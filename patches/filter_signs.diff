diff -r ea4d6358e258 src/lang/english.txt
--- src/lang/english.txt	Fri Apr 03 11:02:41 2009 +0000
+++ src/lang/english.txt	Sat Apr 04 09:18:07 2009 +0200
@@ -2239,6 +2239,7 @@
 STR_704B_GENERATE_RANDOM_NEW_FACE                               :{BLACK}Generate random new face
 STR_704C_KEY                                                    :{BLACK}Key
 STR_704D_SHOW_KEY_TO_GRAPHS                                     :{BLACK}Show key to graphs
+STR_SHOW_DETAILED_PERFORMANCE_RATINGS                           :{BLACK}Show detailed performance ratings
 STR_704E_KEY_TO_COMPANY_GRAPHS                                  :{WHITE}Key to company graphs
 STR_704F_CLICK_HERE_TO_TOGGLE_COMPANY                           :{BLACK}Click here to toggle company's entry on graph on/off
 STR_7050_UNITS_OF_CARGO_DELIVERED                               :{WHITE}Units of cargo delivered
@@ -3475,6 +3476,13 @@
 
 ########
 
+#### GUI list filter 
+STR_FILTER                                                      :{BLACK}Filter
+STR_FILTER_OSKTITLE                                             :{BLACK}Enter a filter string
+STR_FILTER_MATCH_CASE                                           :{BLACK}Match case
+STR_FILTER_CLEAR                                                :{BLACK}Clear filter
+########
+
 STR_FUND_NEW_INDUSTRY                                           :{BLACK}Fund
 STR_PROSPECT_NEW_INDUSTRY                                       :{BLACK}Prospect
 STR_BUILD_NEW_INDUSTRY                                          :{BLACK}Build
diff -r ea4d6358e258 src/signs_gui.cpp
--- src/signs_gui.cpp	Fri Apr 03 11:02:41 2009 +0000
+++ src/signs_gui.cpp	Sat Apr 04 09:18:07 2009 +0200
@@ -20,12 +20,25 @@
 
 #include "table/strings.h"
 
+struct FilterInfo {
+	const char *string;
+	bool case_sensitive;
+};
+
 struct SignList {
-	typedef GUIList<const Sign *> GUISignList;
+	typedef GUIList<const Sign *, FilterInfo> GUISignList;
 
 	static const Sign *last_sign;
 	GUISignList signs;
 
+	char filter_string[MAX_LENGTH_SIGN_NAME_BYTES];
+	bool match_case;
+
+	SignList(){
+		memset(filter_string, '\0', sizeof(this->filter_string));
+		this->match_case = false;
+	}
+
 	void BuildSignsList()
 	{
 		if (!this->signs.NeedRebuild()) return;
@@ -37,6 +50,7 @@
 		const Sign *si;
 		FOR_ALL_SIGNS(si) *this->signs.Append() = si;
 
+		this->FilterSignList();
 		this->signs.Compact();
 		this->signs.RebuildDone();
 	}
@@ -66,6 +80,23 @@
 		/* Reset the name sorter sort cache */
 		this->last_sign = NULL;
 	}
+
+	/** Filter sign list by sign name (case sensitive setting in FilterInfo) */
+	static bool CDECL SignNameFilter(const Sign * const *a, FilterInfo filter_info)
+	{
+		/* Get sign string */
+		char buf1[64];
+		SetDParam(0, (*a)->index);
+		GetString(buf1, STR_SIGN_NAME, lastof(buf1));
+
+		return (filter_info.case_sensitive ? strstr(buf1, filter_info.string) : strcasestr(buf1, filter_info.string)) != NULL;
+	}
+
+	void FilterSignList()
+	{
+		FilterInfo filter_info = {this->filter_string, this->match_case};
+		this->signs.Filter(&SignNameFilter, filter_info);
+	}
 };
 
 const Sign *SignList::last_sign = NULL;
@@ -77,22 +108,118 @@
 	SLW_STICKY,
 	SLW_LIST,
 	SLW_SCROLLBAR,
+	SLW_FILTER_TEXT,
+	SLW_FILTER_MATCH_CASE_BTN,
+	SLW_FILTER_CLEAR_BTN,
 	SLW_RESIZE,
 };
 
-struct SignListWindow : Window, SignList {
-	SignListWindow(const WindowDesc *desc, WindowNumber window_number) : Window(desc, window_number)
+struct SignListWindow : QueryStringBaseWindow, SignList {
+private:
+	int selected_sign;
+
+public:
+	SignListWindow(const WindowDesc *desc, WindowNumber window_number) : QueryStringBaseWindow(MAX_LENGTH_SIGN_NAME_BYTES, desc)
 	{
-		this->vscroll.cap = 12;
+		this->vscroll.cap = 11;
 		this->resize.step_height = 10;
 		this->resize.height = this->height - 10 * 7; // minimum if 5 in the list
 
+		this->InitializeFilterTextWidget();
+		this->SetFilterString("");
+		this->selected_sign = -1;
+ 
 		this->signs.ForceRebuild();
 		this->signs.NeedResort();
 
 		this->FindWindowPlacementAndResize(desc);
 	}
 
+	void InitializeFilterTextWidget()
+	{
+		this->afilter = CS_ALPHANUMERAL;
+		this->LowerWidget(SLW_FILTER_TEXT);
+
+		/* Display an empty string in the edit box */
+		GetString(this->edit_str_buf, STR_EMPTY, lastof(this->edit_str_buf));
+
+		this->edit_str_buf[lengthof(this->edit_str_buf) - 1] = '\0';
+
+		InitializeTextBuffer(&this->text, this->edit_str_buf, MAX_LENGTH_SIGN_NAME_BYTES, 255); // Allow MAX_LENGTH_SIGN_NAME_BYTES characters (including \0)
+
+		this->InvalidateWidget(SLW_FILTER_TEXT);
+	}
+
+	void SetFilterString(const char* new_filter_string)
+	{
+		/* clear this->filter_string */
+		memset(this->filter_string, '\0', sizeof(this->filter_string));
+
+		/* check if there is a new filter string */ 
+		if (new_filter_string != 0 && strlen(new_filter_string) != 0) {
+			/* Copy new filter string */
+			strncpy(this->filter_string, new_filter_string, strlen(new_filter_string));
+			this->filter_string[strlen(new_filter_string)] = '\0';
+
+			this->signs.SetFilterState(true);
+		}
+		else
+			this->signs.SetFilterState(false);
+
+		this->UpdateList();
+	}
+
+	void UpdateList()
+	{
+		/* Rebuild list of signs that are displayed. */
+		this->signs.ForceRebuild();
+
+		/* Re-paint widgets that need to be repainted */
+		this->InvalidateWidget(SLW_LIST);
+		this->InvalidateWidget(SLW_SCROLLBAR);
+		this->InvalidateWidget(SLW_CAPTION);
+	}
+
+	void SelectNextSign()
+	{
+		this->selected_sign++;
+		if (this->selected_sign != -1 && (unsigned int) this->selected_sign >= this->signs.Length()) {
+			this->selected_sign = this->signs.Length () - 1;
+		}
+
+		/* Scroll down a half page if moving below last line  */
+		if (this->selected_sign >= this->vscroll.cap + this->vscroll.pos)
+		{
+			int pos = Clamp(this->vscroll.pos + this->vscroll.cap/2 + 1,  0, this->vscroll.count - this->vscroll.cap);
+			this->vscroll.pos = pos;
+			//this->SetDirty();
+			this->InvalidateWidget(SLW_SCROLLBAR);
+		}
+
+		this->InvalidateWidget(SLW_LIST);
+	}
+
+	void SelectPreviousSign()
+	{
+		this->selected_sign--;
+		if (this->selected_sign < 0) {
+			this->selected_sign = 0;
+		} else if ((unsigned int) this->selected_sign >= this->signs.Length()) {
+			this->selected_sign = this->signs.Length () - 1;
+		}
+
+		/* Scroll up a half page if moving above first line  */
+		if (this->selected_sign < this->vscroll.pos)
+		{
+			int pos = Clamp(this->vscroll.pos - this->vscroll.cap/2 - 1,  0, this->vscroll.count - this->vscroll.cap);
+			this->vscroll.pos = pos;
+			//this->SetDirty();
+			this->InvalidateWidget(SLW_SCROLLBAR);
+		}
+		
+		this->InvalidateWidget(SLW_LIST);
+ 	}
+
 	virtual void OnPaint()
 	{
 		BuildSignsList();
@@ -102,6 +229,7 @@
 
 		SetDParam(0, this->vscroll.count);
 		this->DrawWidgets();
+		this->DrawEditBox(SLW_FILTER_TEXT);
 
 		/* No signs? */
 		int y = this->widget[SLW_LIST].top + 2; // offset from top of widget
@@ -118,24 +246,119 @@
 
 			SetDParam(0, si->index);
 			DrawString(this->widget[SLW_LIST].left + 22, this->widget[SLW_LIST].right, y, STR_SIGN_NAME, TC_YELLOW);
+			if (this->selected_sign == i)
+				DrawString(this->widget[SLW_LIST].left + 22, this->widget[SLW_LIST].right, y, STR_SIGN_NAME, TC_BLUE);
+			else
+				DrawString(this->widget[SLW_LIST].left + 22, this->widget[SLW_LIST].right, y, STR_SIGN_NAME, TC_YELLOW);
 			y += 10;
 		}
 	}
 
 	virtual void OnClick(Point pt, int widget)
 	{
-		if (widget == SLW_LIST) {
-			uint32 id_v = (pt.y - this->widget[SLW_LIST].top - 1) / 10;
+		switch (widget) {
+			case SLW_LIST:
+			{ // <- needed or the compiler will complain
+				uint32 id_v = (pt.y - this->widget[SLW_LIST].top - 1) / 10;
 
-			if (id_v >= this->vscroll.cap) return;
-			id_v += this->vscroll.pos;
-			if (id_v >= this->vscroll.count) return;
+				if (id_v >= this->vscroll.cap) return;
+				id_v += this->vscroll.pos;
+				if (id_v >= this->vscroll.count) return;
 
-			const Sign *si = this->signs[id_v];
-			ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+				const Sign *si = this->signs[id_v];
+				ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+				break;
+			}
+
+			case SLW_FILTER_CLEAR_BTN:
+				this->InitializeFilterTextWidget();
+				this->SetFilterString(0);
+				this->selected_sign = -1;
+				break;
+
+			case SLW_FILTER_MATCH_CASE_BTN:
+				this->match_case = !this->match_case;
+				if (this->match_case) {
+					this->LowerWidget(SLW_FILTER_MATCH_CASE_BTN);
+				} else {
+					this->RaiseWidget(SLW_FILTER_MATCH_CASE_BTN);
+				}
+				this->UpdateList();
+				break;
 		}
 	}
 
+	virtual EventState OnKeyPress(uint16 key, uint16 keycode)
+	{
+		EventState state = ES_NOT_HANDLED;
+		switch (this->HandleEditBoxKey(SLW_FILTER_TEXT, key, keycode, state)) {
+			case HEBR_EDITING:
+				break;
+
+			case HEBR_CONFIRM: // Enter pressed -> goto first sign in list
+			{
+				uint n_signs = this->signs.Length();
+				if (n_signs >= 1) {
+					/* highlight first sign if selected_sign is == -1 or if a sign below the end of list is selected */
+					uint sign_id = this->selected_sign == -1 || (uint)this->selected_sign >= n_signs? 0 : this->selected_sign;
+					if (n_signs > sign_id) {
+						const Sign* si = this->signs[sign_id];
+						ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+					}
+				}
+				return state;
+			}
+
+			case HEBR_CANCEL: // ESC pressed, clear filter
+				this->InitializeFilterTextWidget(); // Empty the text in the EditBox widget
+				this->SetFilterString(0);           // Use empty text as filter text (= view all signs)
+				this->focused_widget = 0;           // Unfocus the text box
+				this->selected_sign = -1;           // Deselect sign in sign list
+				return state;
+
+			case HEBR_NOT_FOCUSED: // The filter text box is not globaly focused
+				if (keycode == 'F') { // Hotkey to enable filter box
+					this->SetFocusedWidget(SLW_FILTER_TEXT);
+					SetFocusedWindow(this); // The user has asked to give focus to the text box, so make sure this window is focused.
+					state = ES_HANDLED;
+				}
+				break;
+
+			default:
+				NOT_REACHED();
+		}
+
+		if (state == ES_HANDLED) OnOSKInput(SLW_FILTER_TEXT);
+
+		// Selection of signs using arrow up/down keys
+		if (this->focused_widget == this->widget + SLW_FILTER_TEXT)
+		{
+			switch (keycode) {
+				case WKC_UP:
+					this->SelectPreviousSign();
+					state = ES_HANDLED;
+					break;
+
+				case WKC_DOWN:
+					this->SelectNextSign();
+					state = ES_HANDLED;
+			}
+		}
+
+		return state;
+	}
+
+	virtual void OnOSKInput(int wid)
+	{
+		this->SetFilterString(this->text.buf);
+		this->UpdateList();
+	}
+
+	virtual void OnMouseLoop()
+	{
+		this->HandleEditBox(SLW_FILTER_TEXT);
+ 	}
+
 	virtual void OnResize(Point delta)
 	{
 		this->vscroll.cap += delta.y / 10;
@@ -143,7 +366,10 @@
 
 	virtual void OnInvalidateData(int data)
 	{
-		if (data == 0) {
+		/* data == 0: new or deleted sign
+		 * data == 1: sign is renamed
+		 */
+		if (data == 0 || strlen(this->filter_string) != 0) {
 			this->signs.ForceRebuild();
 		} else {
 			this->signs.ForceResort();
@@ -153,10 +379,13 @@
 
 static const Widget _sign_list_widget[] = {
 {   WWT_CLOSEBOX,   RESIZE_NONE,  COLOUR_GREY,     0,    10,     0,    13, STR_00C5,              STR_018B_CLOSE_WINDOW},
-{    WWT_CAPTION,  RESIZE_RIGHT,  COLOUR_GREY,    11,   345,     0,    13, STR_SIGN_LIST_CAPTION, STR_018C_WINDOW_TITLE_DRAG_THIS},
+{    WWT_CAPTION,  RESIZE_RIGHT,  COLOUR_GREY,    11,   345,     0,    13, STR_SIGN_LIST_CAPTION, STR_018C_WINDOW_TITLE_DRAG_THIS},   // SLW_CAPTION
 {  WWT_STICKYBOX,     RESIZE_LR,  COLOUR_GREY,   346,   357,     0,    13, 0x0,                   STR_STICKY_BUTTON},
-{      WWT_PANEL,     RESIZE_RB,  COLOUR_GREY,     0,   345,    14,   137, 0x0,                   STR_NULL},
-{  WWT_SCROLLBAR,    RESIZE_LRB,  COLOUR_GREY,   346,   357,    14,   125, 0x0,                   STR_0190_SCROLL_BAR_SCROLLS_LIST},
+{      WWT_PANEL,     RESIZE_RB,  COLOUR_GREY,     0,   345,    14,   125, 0x0,                   STR_NULL},                          // SLW_LIST
+{  WWT_SCROLLBAR,    RESIZE_LRB,  COLOUR_GREY,   346,   357,    14,   125, 0x0,                   STR_0190_SCROLL_BAR_SCROLLS_LIST},  // SLW_SCROLLBAR
+{    WWT_EDITBOX,    RESIZE_RTB,  COLOUR_GREY,     0,   165,   126,   137, STR_FILTER_OSKTITLE,   STR_NULL},                          // SLW_FILTER_TEXT
+{ WWT_PUSHTXTBTN,    RESIZE_LRTB, COLOUR_GREY,     166, 255,   126,   137, STR_FILTER_MATCH_CASE, STR_NULL},                          // SLW_FILTER_MATCH_CASE_BTN
+{    WWT_TEXTBTN,    RESIZE_LRTB, COLOUR_GREY,     256, 345,   126,   137, STR_FILTER_CLEAR,      STR_NULL},                          // SLW_FILTER_CLEAR_BTN
 {  WWT_RESIZEBOX,   RESIZE_LRTB,  COLOUR_GREY,   346,   357,   126,   137, 0x0,                   STR_RESIZE_BUTTON},
 {   WIDGETS_END},
 };
diff -r ea4d6358e258 src/toolbar_gui.cpp
--- src/toolbar_gui.cpp	Fri Apr 03 11:02:41 2009 +0000
+++ src/toolbar_gui.cpp	Sat Apr 04 09:18:07 2009 +0200
@@ -1090,6 +1090,7 @@
 			case WKC_CTRL  | 'S': MenuClickSmallScreenshot(); break;
 			case WKC_CTRL  | 'G': MenuClickWorldScreenshot(); break;
 			case WKC_CTRL | WKC_ALT | 'C': if (!_networking) ShowCheatWindow(); break;
+			case WKC_CTRL | 'L': ShowSignList(); break;
 			case 'A': if (CanBuildVehicleInfrastructure(VEH_TRAIN)) ShowBuildRailToolbar(_last_built_railtype, 4); break; // Invoke Autorail
 			case 'L': ShowTerraformToolbar(); break;
 			case 'M': ShowSmallMap(); break;
