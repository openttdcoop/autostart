diff -r 84cf79d1ad29 src/date.cpp
--- src/date.cpp	Fri Mar 20 18:21:26 2009 +0100
+++ src/date.cpp	Fri Mar 20 18:33:00 2009 +0100
@@ -13,6 +13,9 @@
 #include "functions.h"
 #include "date_func.h"
 #include "vehicle_base.h"
+#include "screenshot.h"
+#include "transparency.h"
+#include "signs_base.h"
 #include "debug.h"
 #include "rail_gui.h"
 #include "saveload/saveload.h"
@@ -230,6 +233,33 @@
 	if (_game_mode != GM_MENU) {
 		InvalidateWindowWidget(WC_STATUS_BAR, 0, 0);
 		EnginesDailyLoop();
+		if (_settings_client.gui.auto_local_screen && (_date % _settings_client.gui.auto_local_screen_interval == 0)) {
+			/* save the current transparency setting */
+			uint8 transparency_backup = _transparency_opt;
+			/* disable transparency for all unlocked transparency settings */
+			_transparency_opt &= _transparency_lock;
+			/* iterate through signs and take local screenshots if appropriate */
+			const Sign *si;
+			FOR_ALL_SIGNS(si) {
+				if (si->name != NULL && *si->name == '#') {
+					SetScreenshotType(SC_TIMELAPSE_LOCAL);
+					MakeScreenshot(si);
+				}
+			}
+			/* reset transparency to the former state */
+			_transparency_opt = transparency_backup;
+		}
+		if (_settings_client.gui.auto_screenshot && (_date % _settings_client.gui.auto_screenshot_interval == 0)) {
+			/* save the current transparency setting */
+			uint8 transparency_backup = _transparency_opt;
+			/* disable transparency for all unlocked transparency settings */
+			_transparency_opt &= _transparency_lock;
+			/* take a giant screenshot */
+			SetScreenshotType(SC_TIMELAPSE);
+			MakeScreenshot();
+			/* reset transparency to the former state */
+			_transparency_opt = transparency_backup;
+		}
 	}
 
 	/* check if we entered a new month? */
diff -r 84cf79d1ad29 src/lang/english.txt
--- src/lang/english.txt	Fri Mar 20 18:21:26 2009 +0100
+++ src/lang/english.txt	Fri Mar 20 18:33:00 2009 +0100
@@ -1114,6 +1114,22 @@
 STR_CONFIG_SETTING_LARGER_TOWNS_DISABLED                        :{LTBLUE}Proportion of towns that will become cities: {ORANGE}None
 STR_CONFIG_SETTING_CITY_SIZE_MULTIPLIER                         :{LTBLUE}Initial city size multiplier: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_MODIFIED_ROAD_REBUILD                        :{LTBLUE}Remove absurd road-elements during the road construction: {ORANGE}{STRING1}
+ 
+STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS                        :{ORANGE}Automatic Screenshots
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN                            :{LTBLUE}Automatically take giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic giant screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_8X                 :8x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN                            :{LTBLUE}Automatically take local screenshots (use signs with #): {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic local screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_8X                 :8x
 
 STR_CONFIG_SETTING_GUI                                          :{ORANGE}Interface
 STR_CONFIG_SETTING_CONSTRUCTION                                 :{ORANGE}Construction
diff -r 84cf79d1ad29 src/screenshot.cpp
--- src/screenshot.cpp	Fri Mar 20 18:21:26 2009 +0100
+++ src/screenshot.cpp	Fri Mar 20 18:33:00 2009 +0100
@@ -16,6 +16,9 @@
 #include "map_func.h"
 #include "saveload/saveload.h"
 #include "company_func.h"
+#include "settings_type.h"
+#include "signs_base.h"
+#include "landscape.h"
 
 
 char _screenshot_format_name[8];
@@ -548,6 +551,37 @@
 	return filename;
 }
 
+static char *MakeTimelapseScreenshotName(const char *ext, const char *name = NULL)
+{
+	/* File name base - "timelapse" */
+	ttd_strlcpy(_screenshot_name, "timelapse", lengthof(_screenshot_name));
+	size_t len = strlen(_screenshot_name);
+	if (name != NULL) {
+		/* For local screens add sign name (starting with #) */
+		snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "%s", name);
+		len = strlen(_screenshot_name);
+	}
+	/* Add '#' */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "#");
+	SanitizeFilename(_screenshot_name);
+	len = strlen(_screenshot_name);
+	/* Add initial numbers and file extension */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "000000.%s", ext);
+
+	uint diff = 5; // number of preceding zeros
+	static char filename[MAX_PATH];
+	for (uint serial = 1;; serial++) {
+		/* Try if the file name is available */
+		snprintf(filename, lengthof(filename), "%s%s", _personal_dir, _screenshot_name);
+		if (!FileExists(filename)) break;
+		/* If file already exists increase the serial */
+		if (serial == 10 || serial == 100 || serial == 1000 || serial == 10000 || serial == 100000) diff--;
+		snprintf(&_screenshot_name[len + diff], lengthof(_screenshot_name) - len, "%d.%s", serial, ext);
+	}
+
+	return filename;
+}
+
 void SetScreenshotType(ScreenshotType t)
 {
 	current_screenshot_type = t;
@@ -583,7 +617,53 @@
 	return sf->proc(MakeScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
 }
 
-bool MakeScreenshot()
+static bool MakeTimelapseScreenshot()
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint8 zoom = _settings_client.gui.auto_screenshot_zoomlvl;
+
+	vp.zoom = (ZoomLevel)zoom;
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = -(int)MapMaxX() * TILE_PIXELS;
+	vp.virtual_top = 0;
+	vp.virtual_width = (MapMaxX() + MapMaxY()) * TILE_PIXELS >> zoom;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = (MapMaxX() + MapMaxY()) * (TILE_PIXELS >> 1) >> zoom;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+static bool MakeTimelapseLocalScreenshot(const Sign *si)
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint16 size_x = _settings_client.gui.auto_local_screen_size_x;
+	uint16 size_y = _settings_client.gui.auto_local_screen_size_y;
+	uint8 zoom = _settings_client.gui.auto_local_screen_zoomlvl;
+
+	vp.zoom = ZoomLevel(zoom);
+
+	Point pt = RemapCoords2(si->x, si->y);
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = pt.x - ((size_x / 2) << zoom);
+	vp.virtual_top = pt.y - ((size_y / 2) << zoom);
+	vp.virtual_width = size_x;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = size_y;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension, si->name), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+bool MakeScreenshot(const void *si)
 {
 	switch (current_screenshot_type) {
 		case SC_VIEWPORT:
@@ -594,6 +674,12 @@
 		case SC_WORLD:
 			current_screenshot_type = SC_NONE;
 			return MakeWorldScreenshot();
+		case SC_TIMELAPSE:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseScreenshot();
+		case SC_TIMELAPSE_LOCAL:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseLocalScreenshot((const Sign*) si);
 		default: return false;
 	}
 }
diff -r 84cf79d1ad29 src/screenshot.h
--- src/screenshot.h	Fri Mar 20 18:21:26 2009 +0100
+++ src/screenshot.h	Fri Mar 20 18:33:00 2009 +0100
@@ -13,10 +13,12 @@
 enum ScreenshotType {
 	SC_NONE,
 	SC_VIEWPORT,
-	SC_WORLD
+	SC_WORLD,
+	SC_TIMELAPSE,
+	SC_TIMELAPSE_LOCAL
 };
 
-bool MakeScreenshot();
+bool MakeScreenshot(const void *si = NULL);
 void SetScreenshotType(ScreenshotType t);
 bool IsScreenshotRequested();
 
diff -r 84cf79d1ad29 src/settings.cpp
--- src/settings.cpp	Fri Mar 20 18:21:26 2009 +0100
+++ src/settings.cpp	Fri Mar 20 18:33:00 2009 +0100
@@ -1536,6 +1536,8 @@
 	 SDTC_BOOL(gui.keep_all_autosave,                    S,  0, false,                        STR_NULL,                                       NULL),
 	 SDTC_BOOL(gui.autosave_on_exit,                     S,  0, false,                        STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.max_num_autosaves,         SLE_UINT8, S,  0,    16,        0,      255, 0, STR_NULL,                                       NULL),
+	SDTC_VAR(gui.auto_local_screen_size_x, SLE_UINT16, S,  0,   800,      100,     8000, 1, STR_NULL,                                       NULL),
+	SDTC_VAR(gui.auto_local_screen_size_y, SLE_UINT16, S,  0,   600,      100,     6000, 1, STR_NULL,                                       NULL),
 	 SDTC_BOOL(gui.bridge_pillars,                       S,  0,  true,                        STR_NULL,                                       NULL),
 	 SDTC_BOOL(gui.auto_euro,                            S,  0,  true,                        STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.news_message_timeout,      SLE_UINT8, S,  0,     2,        1,      255, 0, STR_NULL,                                       NULL),
@@ -1550,6 +1552,12 @@
 	 SDTC_BOOL(gui.expenses_layout,                      S,  0, false,                        STR_CONFIG_SETTING_EXPENSES_LAYOUT,             RedrawScreen),
 	 SDTC_BOOL(gui.imp_newstations_gui,                  S,  0, false,                        STR_CONFIG_SETTING_IMP_NEWSTATIONS_GUI,         RedrawScreen),
 
+	SDTC_BOOL(gui.auto_screenshot,                      S,  0, false,                        STR_CONFIG_SETTING_AUTO_GIANT_SCREEN,           NULL),
+	SDTC_VAR(gui.auto_screenshot_interval, SLE_UINT16, S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL,  NULL),
+	SDTC_VAR(gui.auto_screenshot_zoomlvl,   SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL,   NULL),
+	SDTC_BOOL(gui.auto_local_screen,                    S,  0, false,                        STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN,           NULL),
+	SDTC_VAR(gui.auto_local_screen_interval,SLE_UINT16,S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL,  NULL),
+	SDTC_VAR(gui.auto_local_screen_zoomlvl, SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL,   NULL),	
 
 	  SDTC_VAR(gui.console_backlog_timeout,  SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.console_backlog_length,   SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
diff -r 84cf79d1ad29 src/settings_gui.cpp
--- src/settings_gui.cpp	Fri Mar 20 18:21:26 2009 +0100
+++ src/settings_gui.cpp	Fri Mar 20 18:33:00 2009 +0100
@@ -1037,9 +1037,21 @@
 /** Interaction sub-page */
 static SettingsPage _settings_ui_interaction_page = {_settings_ui_interaction, lengthof(_settings_ui_interaction)};
 
+static SettingEntry _patches_ui_automatic_screenshots[] = {
+	SettingEntry("gui.auto_screenshot"),
+	SettingEntry("gui.auto_screenshot_interval"),
+	SettingEntry("gui.auto_screenshot_zoomlvl"),
+	SettingEntry("gui.auto_local_screen"),
+	SettingEntry("gui.auto_local_screen_interval"),
+	SettingEntry("gui.auto_local_screen_zoomlvl"),
+};
+/** Automatic Screenshots sub-page */
+static SettingsPage _patches_ui_automatic_screenshots_page = {_patches_ui_automatic_screenshots, lengthof(_patches_ui_automatic_screenshots)};
+
 static SettingEntry _settings_ui[] = {
 	SettingEntry(&_settings_ui_display_page, STR_CONFIG_SETTING_DISPLAY_OPTIONS),
 	SettingEntry(&_settings_ui_interaction_page, STR_CONFIG_SETTING_INTERACTION),
+	SettingEntry(&_patches_ui_automatic_screenshots_page, STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS),
 	SettingEntry("gui.show_finances"),
 	SettingEntry("gui.errmsg_duration"),
 	SettingEntry("gui.toolbar_pos"),
diff -r 84cf79d1ad29 src/settings_type.h
--- src/settings_type.h	Fri Mar 20 18:21:26 2009 +0100
+++ src/settings_type.h	Fri Mar 20 18:33:00 2009 +0100
@@ -91,6 +91,15 @@
 	bool   persistent_buildingtools;         ///< keep the building tools active after usage
 	uint8  expenses_layout;                  ///< layout of expenses window
 	bool   imp_newstations_gui;              ///< use the new newstations selection ui
+	
+	bool   auto_screenshot;                  ///< automatically takes a giant screenshot (whole map) in a set interval.
+	uint16 auto_screenshot_interval;         ///< the interval for automatic giant screenshots.
+	uint8  auto_screenshot_zoomlvl;          ///< the zoom level used for automatic giant screenshots (zoomed out means smaller filesize but less quality).
+	bool   auto_local_screen;                ///< automatically takes local screenshots (at signs starting with #) in a set interval.
+	uint16 auto_local_screen_interval;       ///< the interval for automatic local screenshots.
+	uint16 auto_local_screen_zoomlvl;        ///< the zoom level used for automatic local screenshots.
+	uint16 auto_local_screen_size_x;         ///< width of automatic local screenshots.
+	uint16 auto_local_screen_size_y;         ///< heigth of automatic local screenshots.
 
 	uint16 console_backlog_timeout;          ///< the minimum amount of time items should be in the console backlog before they will be removed in ~3 seconds granularity.
 	uint16 console_backlog_length;           ///< the minimum amount of items in the console backlog before items will be removed.
