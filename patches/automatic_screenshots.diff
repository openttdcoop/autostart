diff -r ea558e217ea7 projects/openttd_vs80.vcproj
--- projects/openttd_vs80.vcproj	Sun May 17 23:56:53 2009 +0200
+++ projects/openttd_vs80.vcproj	Sun May 17 23:57:10 2009 +0200
@@ -740,6 +740,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1496,6 +1500,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ea558e217ea7 projects/openttd_vs90.vcproj
--- projects/openttd_vs90.vcproj	Sun May 17 23:56:53 2009 +0200
+++ projects/openttd_vs90.vcproj	Sun May 17 23:57:10 2009 +0200
@@ -737,6 +737,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1493,6 +1497,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ea558e217ea7 source.list
--- source.list	Sun May 17 23:56:53 2009 +0200
+++ source.list	Sun May 17 23:57:10 2009 +0200
@@ -95,6 +95,7 @@
 	thread_none.cpp
 #end
 tile_map.cpp
+timelapse.cpp
 #if WIN32
 #else
 	#if WINCE
@@ -304,6 +305,7 @@
 tile_type.h
 tilehighlight_func.h
 tilehighlight_type.h
+timelapse.h
 timetable.h
 toolbar_gui.h
 town.h
diff -r ea558e217ea7 src/command.cpp
--- src/command.cpp	Sun May 17 23:56:53 2009 +0200
+++ src/command.cpp	Sun May 17 23:57:10 2009 +0200
@@ -24,6 +24,7 @@
 #include "signal_func.h"
 #include "window_func.h"
 #include "viewport_func.h"
+#include "timelapse.h"
 
 #include "table/strings.h"
 
@@ -595,6 +596,8 @@
 #endif /* ENABLE_NETWORK */
 	DEBUG(desync, 1, "cmd: %08x; %08x; %1x; %06x; %08x; %08x; %04x; %s\n", _date, _date_fract, (int)_current_company, tile, p1, p2, cmd & ~CMD_NETWORK_COMMAND, text);
 
+	TimelapseCommandCheck();
+
 	/* update last build coordinate of company. */
 	if (tile != 0 && Company::IsValidID(_current_company)) {
 		Company::Get(_current_company)->last_build_coordinate = tile;
diff -r ea558e217ea7 src/date.cpp
--- src/date.cpp	Sun May 17 23:56:53 2009 +0200
+++ src/date.cpp	Sun May 17 23:57:10 2009 +0200
@@ -15,6 +15,7 @@
 #include "vehicle_base.h"
 #include "debug.h"
 #include "rail_gui.h"
+#include "timelapse.h"
 #include "saveload/saveload.h"
 
 Year      _cur_year;   ///< Current year, starting at 0
@@ -229,6 +230,7 @@
 	if (_game_mode != GM_MENU) {
 		InvalidateWindowWidget(WC_STATUS_BAR, 0, 0);
 		EnginesDailyLoop();
+		TimelapseDailyCheck();
 	}
 
 	/* check if we entered a new month? */
diff -r ea558e217ea7 src/lang/english.txt
--- src/lang/english.txt	Sun May 17 23:56:53 2009 +0200
+++ src/lang/english.txt	Sun May 17 23:57:10 2009 +0200
@@ -1098,6 +1098,36 @@
 STR_CONFIG_SETTING_CYCLE_SIGNAL_ALL                             :All
 STR_CONFIG_SETTING_IMP_NEWSTATIONS_GUI                          :{LTBLUE}Enable previews for station building: {ORANGE}{STRING1}
 
+STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS                        :{ORANGE}Automatic Screenshots
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN                            :{LTBLUE}Take giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic giant screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic giant screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_8X                 :8x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN                            :{LTBLUE}Take local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES                      :{LTBLUE}Local screenshots are taken at: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS                :Signs
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_STATIONS             :Stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS_AND_STATIONS   :Signs and stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic local screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic local screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_8X                 :8x
+
 STR_CONFIG_SETTING_TOWN_LAYOUT                                  :{LTBLUE}Road layout for new towns: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_TOWN_LAYOUT_DEFAULT                          :original
 STR_CONFIG_SETTING_TOWN_LAYOUT_BETTER_ROADS                     :better roads
diff -r ea558e217ea7 src/screenshot.cpp
--- src/screenshot.cpp	Sun May 17 23:56:53 2009 +0200
+++ src/screenshot.cpp	Sun May 17 23:57:10 2009 +0200
@@ -16,6 +16,9 @@
 #include "map_func.h"
 #include "saveload/saveload.h"
 #include "company_func.h"
+#include "settings_type.h"
+#include "signs_base.h"
+#include "landscape.h"
 
 
 char _screenshot_format_name[8];
@@ -548,6 +551,42 @@
 	return filename;
 }
 
+static char *MakeTimelapseScreenshotName(const char *ext, const char *name = NULL)
+{
+	/* Path for automatic screenshots */
+	static char autoscreen_dir[MAX_PATH];
+	snprintf(autoscreen_dir, lengthof(autoscreen_dir), "%s%s%s", _personal_dir, "auto_screenshot", PATHSEP);
+	if (!FileExists(autoscreen_dir)) FioCreateDirectory(autoscreen_dir);
+	if (name != NULL) {
+		/* For local screens use subdirectory */
+		snprintf(autoscreen_dir, lengthof(autoscreen_dir), "%s%s%s", autoscreen_dir, name, PATHSEP);
+		if (!FileExists(autoscreen_dir)) FioCreateDirectory(autoscreen_dir);
+	}
+
+	/* File name base - "timelapse" */
+	ttd_strlcpy(_screenshot_name, "timelapse", lengthof(_screenshot_name));
+	size_t len = strlen(_screenshot_name);
+	/* Add '#' */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "#");
+	SanitizeFilename(_screenshot_name);
+	len = strlen(_screenshot_name);
+	/* Add initial numbers and file extension */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "000000.%s", ext);
+
+	uint diff = 5; // number of preceding zeros
+	static char filename[MAX_PATH];
+	for (uint serial = 1;; serial++) {
+		/* Try if the file name is available */
+		snprintf(filename, lengthof(filename), "%s%s", autoscreen_dir, _screenshot_name);
+		if (!FileExists(filename)) break;
+		/* If file already exists increase the serial */
+		if (serial == 10 || serial == 100 || serial == 1000 || serial == 10000 || serial == 100000) diff--;
+		snprintf(&_screenshot_name[len + diff], lengthof(_screenshot_name) - len, "%d.%s", serial, ext);
+	}
+
+	return filename;
+}
+
 void SetScreenshotType(ScreenshotType t)
 {
 	current_screenshot_type = t;
@@ -583,7 +622,52 @@
 	return sf->proc(MakeScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
 }
 
-bool MakeScreenshot()
+static bool MakeTimelapseScreenshot()
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint8 zoom = _settings_client.gui.auto_screenshot_zoomlvl;
+
+	vp.zoom = (ZoomLevel)zoom;
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = -(int)MapMaxX() * TILE_PIXELS;
+	vp.virtual_top = 0;
+	vp.virtual_width = (MapMaxX() + MapMaxY()) * TILE_PIXELS >> zoom;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = (MapMaxX() + MapMaxY()) * (TILE_PIXELS >> 1) >> zoom;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+static bool MakeTimelapseLocalScreenshot(const char *name, const Point *pt)
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint16 size_x = _settings_client.gui.auto_local_screen_size_x;
+	uint16 size_y = _settings_client.gui.auto_local_screen_size_y;
+	uint8 zoom = _settings_client.gui.auto_local_screen_zoomlvl;
+
+	vp.zoom = ZoomLevel(zoom);
+
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = pt->x - ((size_x / 2) << zoom);
+	vp.virtual_top = pt->y - ((size_y / 2) << zoom);
+	vp.virtual_width = size_x;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = size_y;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension, name), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+bool MakeScreenshot(const void *name, const void *pt)
 {
 	switch (current_screenshot_type) {
 		case SC_VIEWPORT:
@@ -594,6 +678,12 @@
 		case SC_WORLD:
 			current_screenshot_type = SC_NONE;
 			return MakeWorldScreenshot();
+		case SC_TIMELAPSE:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseScreenshot();
+		case SC_TIMELAPSE_LOCAL:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseLocalScreenshot((const char*) name, (const Point*) pt);
 		default: return false;
 	}
 }
diff -r ea558e217ea7 src/screenshot.h
--- src/screenshot.h	Sun May 17 23:56:53 2009 +0200
+++ src/screenshot.h	Sun May 17 23:57:10 2009 +0200
@@ -13,10 +13,12 @@
 enum ScreenshotType {
 	SC_NONE,
 	SC_VIEWPORT,
-	SC_WORLD
+	SC_WORLD,
+	SC_TIMELAPSE,
+	SC_TIMELAPSE_LOCAL
 };
 
-bool MakeScreenshot();
+bool MakeScreenshot(const void *name = NULL, const void *pt = NULL);
 void SetScreenshotType(ScreenshotType t);
 bool IsScreenshotRequested();
 
diff -r ea558e217ea7 src/settings_gui.cpp
--- src/settings_gui.cpp	Sun May 17 23:56:53 2009 +0200
+++ src/settings_gui.cpp	Sun May 17 23:57:10 2009 +0200
@@ -1152,9 +1152,24 @@
 /** Interaction sub-page */
 static SettingsPage _settings_ui_interaction_page = {_settings_ui_interaction, lengthof(_settings_ui_interaction)};
 
+static SettingEntry _settings_ui_automatic_screenshots[] = {
+	SettingEntry("gui.auto_screenshot"),
+	SettingEntry("gui.auto_screenshot_interval"),
+	SettingEntry("gui.auto_screenshot_num_commands"),
+	SettingEntry("gui.auto_screenshot_zoomlvl"),
+	SettingEntry("gui.auto_local_screen"),
+	SettingEntry("gui.auto_local_screen_types"),
+	SettingEntry("gui.auto_local_screen_interval"),
+	SettingEntry("gui.auto_local_screen_num_commands"),
+	SettingEntry("gui.auto_local_screen_zoomlvl"),
+};
+/** Automatic Screenshots sub-page */
+static SettingsPage _settings_ui_automatic_screenshots_page = {_settings_ui_automatic_screenshots, lengthof(_settings_ui_automatic_screenshots)};
+
 static SettingEntry _settings_ui[] = {
 	SettingEntry(&_settings_ui_display_page, STR_CONFIG_SETTING_DISPLAY_OPTIONS),
 	SettingEntry(&_settings_ui_interaction_page, STR_CONFIG_SETTING_INTERACTION),
+	SettingEntry(&_settings_ui_automatic_screenshots_page, STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS),
 	SettingEntry("gui.show_finances"),
 	SettingEntry("gui.errmsg_duration"),
 	SettingEntry("gui.toolbar_pos"),
diff -r ea558e217ea7 src/settings_type.h
--- src/settings_type.h	Sun May 17 23:56:53 2009 +0200
+++ src/settings_type.h	Sun May 17 23:57:10 2009 +0200
@@ -90,6 +90,19 @@
 	uint8  expenses_layout;                  ///< layout of expenses window
 	bool   imp_newstations_gui;              ///< use the new newstations selection ui
 
+	uint8  auto_screenshot;                  ///< automatically take giant screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint16 auto_screenshot_interval;         ///< the time interval for automatic giant screenshots
+	uint16 auto_screenshot_num_commands;     ///< the number of commands for automatic giant screenshots
+	uint8  auto_screenshot_zoomlvl;          ///< the zoom level used for automatic giant screenshots (zoomed out means smaller filesize but less quality)
+	uint8  auto_local_screen;                ///< automatically take local screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint8  auto_local_screen_types;          ///< where to take local screenshots (0 = at signs, 1 = at stations, 2 = at signs and stations)
+	uint16 auto_local_screen_interval;       ///< the interval for automatic local screenshots
+	uint16 auto_local_screen_num_commands;   ///< the number of commands for automatic local screenshots
+	uint16 auto_local_screen_zoomlvl;        ///< the zoom level used for automatic local screenshots
+	uint16 auto_local_screen_size_x;         ///< width of automatic local screenshots
+	uint16 auto_local_screen_size_y;         ///< heigth of automatic local screenshots
+	uint8  auto_local_screen_prefix;         ///< the character used to specify local screen signs (# by default)
+
 	uint16 console_backlog_timeout;          ///< the minimum amount of time items should be in the console backlog before they will be removed in ~3 seconds granularity.
 	uint16 console_backlog_length;           ///< the minimum amount of items in the console backlog before items will be removed.
 #ifdef ENABLE_NETWORK
diff -r ea558e217ea7 src/table/settings.h
--- src/table/settings.h	Sun May 17 23:56:53 2009 +0200
+++ src/table/settings.h	Sun May 17 23:57:10 2009 +0200
@@ -570,6 +570,19 @@
 	 SDTC_BOOL(gui.expenses_layout,                      S,  0, false,                        STR_CONFIG_SETTING_EXPENSES_LAYOUT,             RedrawScreen),
 	 SDTC_BOOL(gui.imp_newstations_gui,                  S,  0, false,                        STR_CONFIG_SETTING_IMP_NEWSTATIONS_GUI,         RedrawScreen),
 
+	  SDTC_VAR(gui.auto_screenshot,           SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_screenshot_interval, SLE_UINT16, S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_screenshot_num_commands,SLE_UINT16,S,0,   100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_screenshot_zoomlvl,   SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen,         SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_local_screen_types,   SLE_UINT8, S, MS,     0,        0,        2, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES,     NULL),
+	  SDTC_VAR(gui.auto_local_screen_interval,SLE_UINT16,S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_local_screen_num_commands,SLE_UINT16,S,0, 100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_local_screen_zoomlvl, SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_x, SLE_UINT16, S,  0,   800,      100,     8000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_y, SLE_UINT16, S,  0,   600,      100,     6000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_prefix,  SLE_UINT8, S,  0,    35,        0,      255, 1, STR_NULL,                                       NULL),
+
 	  SDTC_VAR(gui.console_backlog_timeout,  SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.console_backlog_length,   SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 #ifdef ENABLE_NETWORK
diff -r ea558e217ea7 src/timelapse.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ src/timelapse.cpp	Sun May 17 23:57:10 2009 +0200
@@ -0,0 +1,131 @@
+/* $Id */
+
+/** @file timelapse.cpp Timelapse patch */
+
+#include "stdafx.h"
+#include "openttd.h"
+#include "functions.h"
+#include "core/bitmath_func.hpp"
+#include "settings_type.h"
+#include "date_type.h"
+#include "screenshot.h"
+#include "signs_base.h"
+#include "station_base.h"
+#include "landscape.h"
+#include "map_func.h"
+#include "transparency.h"
+#include "debug.h"
+
+uint32 _command_count_giant = 0;
+uint32 _command_count_local = 0;
+
+extern Date _date;
+
+void DoGiantScreenshot()
+{
+	/* save the current transparency setting */
+	uint8 transparency_backup = _transparency_opt;
+	/* disable transparency for all unlocked transparency settings */
+	_transparency_opt &= _transparency_lock;
+	/* take a giant screenshot */
+	SetScreenshotType(SC_TIMELAPSE);
+	MakeScreenshot();
+	/* reset transparency to the former state */
+	_transparency_opt = transparency_backup;
+}
+
+void DoLocalScreenshots()
+{
+	/* save the current transparency setting */
+	uint8 transparency_backup = _transparency_opt;
+	/* disable transparency for all unlocked transparency settings */
+	_transparency_opt &= _transparency_lock;
+
+	/* iterate through signs and take local screenshots if appropriate */
+	if (_settings_client.gui.auto_local_screen_types != 1) { // 1 == stations only
+		const Sign *si;
+		FOR_ALL_SIGNS(si) {
+			if (si->name != NULL && *si->name == _settings_client.gui.auto_local_screen_prefix) {
+				SetScreenshotType(SC_TIMELAPSE_LOCAL);
+				const Point pt = RemapCoords2(si->x, si->y);
+				MakeScreenshot(si->name, &pt);
+			}
+		}
+	}
+
+	/* iterate through stations and take local screenshots if appropriate */
+	if (_settings_client.gui.auto_local_screen_types != 0) { // 0 == signs only
+		const Station *s;
+		FOR_ALL_STATIONS(s) {
+			if (s->name != NULL && *s->name == _settings_client.gui.auto_local_screen_prefix) {
+				SetScreenshotType(SC_TIMELAPSE_LOCAL);
+				const Point pt = RemapCoords2(TileX(s->xy) * TILE_SIZE, TileY(s->xy) * TILE_SIZE);
+				MakeScreenshot(s->name, &pt);
+			}
+		}
+	}
+	/* reset transparency to the former state */
+	_transparency_opt = transparency_backup;
+}
+
+void CheckGiantScreenshot()
+{
+	switch (_settings_client.gui.auto_screenshot) {
+		case 0: break; // off
+		case 2: break; // number of commands
+		case 1: // time interval
+			if (_date % _settings_client.gui.auto_screenshot_interval == 0) DoGiantScreenshot();
+			break;
+		case 3: // time interval and number of commands
+			if (_date % _settings_client.gui.auto_screenshot_interval != 0) break;
+			if (_command_count_giant < _settings_client.gui.auto_screenshot_num_commands) break;
+			_command_count_giant = 0;
+			DoGiantScreenshot();
+			break;
+		default: NOT_REACHED();
+	}
+}
+
+void CheckLocalScreenshots()
+{
+	switch (_settings_client.gui.auto_local_screen) {
+		case 0: break; // off
+		case 2: break; // number of commands
+		case 1: // time interval
+			if (_date % _settings_client.gui.auto_local_screen_interval == 0) DoLocalScreenshots();
+			break;
+		case 3: // time interval and number of commands
+			if (_date % _settings_client.gui.auto_local_screen_interval != 0) break;
+			if (_command_count_local < _settings_client.gui.auto_local_screen_num_commands) break;
+			_command_count_local = 0;
+			DoLocalScreenshots();
+			break;
+		default: NOT_REACHED();
+	}
+}
+
+void TimelapseDailyCheck()
+{
+	DEBUG(misc, 1, "TimelapseDailyCheck()! _command_count_giant=%d, _command_count_local=%d)", _command_count_giant, _command_count_local);
+
+	CheckLocalScreenshots();
+	CheckGiantScreenshot();
+}
+
+void TimelapseCommandCheck()
+{
+	if ((_settings_client.gui.auto_screenshot & 0x02) != 0) {
+		_command_count_giant++;
+		if ((_settings_client.gui.auto_screenshot == 2) && (_command_count_giant >= _settings_client.gui.auto_screenshot_num_commands)) {
+			_command_count_giant = 0;
+			DoGiantScreenshot();
+		}
+	}
+	if ((_settings_client.gui.auto_local_screen & 0x02) != 0) {
+		_command_count_local++;
+		if ((_settings_client.gui.auto_local_screen == 2) && (_command_count_local >= _settings_client.gui.auto_local_screen_num_commands)) {
+			_command_count_local = 0;
+			DoLocalScreenshots();
+		}
+	}
+}
diff -r ea558e217ea7 src/timelapse.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ src/timelapse.h	Sun May 17 23:57:10 2009 +0200
@@ -0,0 +1,11 @@
+/* $Id */
+
+/** @file timelapse.h Functions of the timelapse patch */
+
+#ifndef TIMELAPSE_H
+#define TIMELAPSE_H
+
+void TimelapseDailyCheck();
+void TimelapseCommandCheck();
+
+#endif /* TIMELAPSE_H */
