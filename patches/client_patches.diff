diff -r ecfbfa484e1b -r f9510fe46f8f config.lib
--- config.lib	Tue Mar 31 17:46:18 2009 +0000
+++ config.lib	Tue Mar 31 22:41:30 2009 +0200
@@ -868,7 +868,7 @@
 			log 1 "WARNING: in most cases it is not safe for network use"
 			log 1 "WARNING: USE WITH CAUTION!"
 
-			sleep 5
+		#	sleep 5
 		elif [ -f "$ROOT_DIR/version" ]; then
 			revision="`cat $ROOT_DIR/version`"
 
diff -r ecfbfa484e1b -r f9510fe46f8f projects/openttd_vs80.vcproj
--- projects/openttd_vs80.vcproj	Tue Mar 31 17:46:18 2009 +0000
+++ projects/openttd_vs80.vcproj	Tue Mar 31 22:41:30 2009 +0200
@@ -740,6 +740,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1496,6 +1500,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ecfbfa484e1b -r f9510fe46f8f projects/openttd_vs90.vcproj
--- projects/openttd_vs90.vcproj	Tue Mar 31 17:46:18 2009 +0000
+++ projects/openttd_vs90.vcproj	Tue Mar 31 22:41:30 2009 +0200
@@ -737,6 +737,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1493,6 +1497,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ecfbfa484e1b -r f9510fe46f8f source.list
--- source.list	Tue Mar 31 17:46:18 2009 +0000
+++ source.list	Tue Mar 31 22:41:30 2009 +0200
@@ -95,6 +95,7 @@
 	thread_none.cpp
 #end
 tile_map.cpp
+timelapse.cpp
 #if WIN32
 #else
 	#if WINCE
@@ -304,6 +305,7 @@
 tile_type.h
 tilehighlight_func.h
 tilehighlight_type.h
+timelapse.h
 timetable.h
 toolbar_gui.h
 town.h
diff -r ecfbfa484e1b -r f9510fe46f8f src/command.cpp
--- src/command.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/command.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -20,6 +20,7 @@
 #include "company_func.h"
 #include "company_base.h"
 #include "signal_func.h"
+#include "timelapse.h"
 
 #include "table/strings.h"
 
@@ -589,6 +590,8 @@
 #endif /* ENABLE_NETWORK */
 	DEBUG(desync, 1, "cmd: %08x; %08x; %1x; %06x; %08x; %08x; %04x; %s\n", _date, _date_fract, (int)_current_company, tile, p1, p2, cmd & ~CMD_NETWORK_COMMAND, text);
 
+	TimelapseCommandCheck();
+
 	/* update last build coordinate of company. */
 	if (tile != 0 && IsValidCompanyID(_current_company)) {
 		GetCompany(_current_company)->last_build_coordinate = tile;
diff -r ecfbfa484e1b -r f9510fe46f8f src/date.cpp
--- src/date.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/date.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -15,6 +15,7 @@
 #include "vehicle_base.h"
 #include "debug.h"
 #include "rail_gui.h"
+#include "timelapse.h"
 #include "saveload/saveload.h"
 
 Year      _cur_year;   ///< Current year, starting at 0
@@ -230,6 +231,7 @@
 	if (_game_mode != GM_MENU) {
 		InvalidateWindowWidget(WC_STATUS_BAR, 0, 0);
 		EnginesDailyLoop();
+		TimelapseDailyCheck();
 	}
 
 	/* check if we entered a new month? */
diff -r ecfbfa484e1b -r f9510fe46f8f src/economy.cpp
--- src/economy.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/economy.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -1427,6 +1427,8 @@
 		}
 	}
 
+	InvalidateWindow(WC_INDUSTRY_VIEW, i->index);
+
 	TriggerIndustry(i, INDUSTRY_TRIGGER_RECEIVED_CARGO);
 	StartStopIndustryTileAnimation(i, IAT_INDUSTRY_RECEIVED_CARGO);
 }
diff -r ecfbfa484e1b -r f9510fe46f8f src/industry_cmd.cpp
--- src/industry_cmd.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/industry_cmd.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -456,6 +456,8 @@
 		}
 	}
 
+	if (moved_cargo) InvalidateWindow(WC_INDUSTRY_VIEW, i->index);
+
 	if (moved_cargo && !StartStopIndustryTileAnimation(i, IAT_INDUSTRY_DISTRIBUTES_CARGO)) {
 		uint newgfx = GetIndustryTileSpec(GetIndustryGfx(tile))->anim_production;
 
diff -r ecfbfa484e1b -r f9510fe46f8f src/industry_gui.cpp
--- src/industry_gui.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/industry_gui.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -557,6 +557,43 @@
 			y += 10;
 		}
 
+		first = true;
+		for (uint j = 0; j < lengthof(i->produced_cargo_waiting); j++) {
+			if (i->produced_cargo[j] == CT_INVALID) continue;
+			if (first) {
+				if (has_accept) y += 10;
+				DrawString(2, this->widget[IVW_INFO].right, y, STR_INDUSTRY_PRODUCTION_THIS_MONTH, TC_FROMSTRING);
+				y += 10;
+				this->production_offset_y = y;
+				first = false;
+			}
+
+			SetDParam(0, i->produced_cargo[j]);
+			SetDParam(1, i->this_month_production[j]);
+			SetDParam(2, GetCargoSuffix(j + 3, CST_VIEW, i, i->type, ind));
+
+			SetDParam(3, i->this_month_production[j] == 0 ? 0 : (i->this_month_transported[j] * 100 / i->this_month_production[j]));
+			DrawString(4, this->widget[IVW_INFO].right, y, STR_482B_TRANSPORTED, TC_FROMSTRING);
+			y += 10;
+		}
+
+		first = true;
+		for (uint j = 0; j < lengthof(i->produced_cargo_waiting); j++) {
+			if (i->produced_cargo[j] == CT_INVALID) continue;
+			if (first) {
+				if (has_accept) y += 10;
+				DrawString(2, this->widget[IVW_INFO].right, y, STR_INDUSTRY_WAITING_CARGO, TC_FROMSTRING);
+				y += 10;
+				this->production_offset_y = y;
+				first = false;
+			}
+
+			SetDParam(0, i->produced_cargo[j]);
+			SetDParam(1, i->produced_cargo_waiting[j]);
+			DrawString(4, this->widget[IVW_INFO].right, y, STR_INDUSTRY_WAITING_CARGO_DETAIL, TC_FROMSTRING);
+			y += 10;
+		}
+
 		/* Get the extra message for the GUI */
 		if (HasBit(ind->callback_flags, CBM_IND_WINDOW_MORE_TEXT)) {
 			uint16 callback_res = GetIndustryCallback(CBID_INDUSTRY_WINDOW_MORE_TEXT, 0, 0, i, i->type, i->xy);
diff -r ecfbfa484e1b -r f9510fe46f8f src/lang/english.txt
--- src/lang/english.txt	Tue Mar 31 17:46:18 2009 +0000
+++ src/lang/english.txt	Tue Mar 31 22:41:30 2009 +0200
@@ -1084,6 +1084,36 @@
 STR_CONFIG_SETTING_CYCLE_SIGNAL_PBS                             :Path signals only
 STR_CONFIG_SETTING_CYCLE_SIGNAL_ALL                             :All
 
+STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS                        :{ORANGE}Automatic Screenshots
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN                            :{LTBLUE}Take giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic giant screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic giant screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_8X                 :8x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN                            :{LTBLUE}Take local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES                      :{LTBLUE}Local screenshots are taken at: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS                :Signs
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_STATIONS             :Stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS_AND_STATIONS   :Signs and stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic local screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic local screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_8X                 :8x
+
 STR_CONFIG_SETTING_TOWN_LAYOUT                                  :{LTBLUE}Road layout for new towns: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_TOWN_LAYOUT_DEFAULT                          :original
 STR_CONFIG_SETTING_TOWN_LAYOUT_BETTER_ROADS                     :better roads
@@ -1974,8 +2004,12 @@
 STR_4828_PRODUCES                                               :{BLACK}Produces: {YELLOW}{STRING}{STRING}, {STRING}{STRING}
 ############ range for produces ends
 
-STR_482A_PRODUCTION_LAST_MONTH                                  :{BLACK}Production last month:
+STR_482A_PRODUCTION_LAST_MONTH                                  :{BLACK}Production (cargo distributed) last month:
 STR_482B_TRANSPORTED                                            :{YELLOW}{CARGO}{STRING}{BLACK} ({COMMA}% transported)
+STR_INDUSTRY_PRODUCTION_THIS_MONTH                              :{BLACK}Production (cargo distributed) this month:
+STR_INDUSTRY_WAITING_CARGO                                      :{BLACK}Cargo waiting to be distributed:
+STR_INDUSTRY_WAITING_CARGO_DETAIL                               :{YELLOW}{CARGO}
+
 STR_482C_CENTER_THE_MAIN_VIEW_ON                                :{BLACK}Centre the main view on industry location
 STR_482D_NEW_UNDER_CONSTRUCTION                                 :{BLACK}{BIGFONT}New {STRING} under construction near {TOWN}!
 STR_482E_NEW_BEING_PLANTED_NEAR                                 :{BLACK}{BIGFONT}New {STRING} being planted near {TOWN}!
diff -r ecfbfa484e1b -r f9510fe46f8f src/main_gui.cpp
--- src/main_gui.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/main_gui.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -26,6 +26,7 @@
 #include "toolbar_gui.h"
 #include "statusbar_gui.h"
 #include "tilehighlight_func.h"
+#include "gui.h"
 
 #include "network/network.h"
 #include "network/network_func.h"
@@ -306,6 +307,10 @@
 			case 'X':
 				ResetRestoreAllTransparency();
 				break;
+				
+			case 'G':
+				PlaceLandBlockInfo();
+				break;
 
 #ifdef ENABLE_NETWORK
 			case WKC_RETURN: case 'T': // smart chat; send to team if any, otherwise to all
diff -r ecfbfa484e1b -r f9510fe46f8f src/mixer.cpp
--- src/mixer.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/mixer.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -25,7 +25,7 @@
 	uint flags;
 };
 
-static MixerChannel _channels[8];
+static MixerChannel _channels[64];
 static uint32 _play_rate;
 
 /**
diff -r ecfbfa484e1b -r f9510fe46f8f src/network/network_client.cpp
--- src/network/network_client.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/network/network_client.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -514,9 +514,14 @@
 			_password_game_seed = p->Recv_uint32();
 			p->Recv_string(_password_server_unique_id, sizeof(_password_server_unique_id));
 			if (MY_CLIENT->has_quit) return NETWORK_RECV_STATUS_MALFORMED_PACKET;
-
+			if (_company_pw != NULL) _login_pw = _company_pw;
 		case NETWORK_GAME_PASSWORD:
-			ShowNetworkNeedPassword(type);
+			if (_login_pw == NULL) {
+			    ShowNetworkNeedPassword(type);
+			} else {
+			    SEND_COMMAND(PACKET_CLIENT_PASSWORD)(type, _login_pw);
+			    _login_pw = NULL;
+			}
 			return NETWORK_RECV_STATUS_OKAY;
 
 		default: return NETWORK_RECV_STATUS_MALFORMED_PACKET;
diff -r ecfbfa484e1b -r f9510fe46f8f src/network/network_internal.h
--- src/network/network_internal.h	Tue Mar 31 17:46:18 2009 +0000
+++ src/network/network_internal.h	Tue Mar 31 22:41:30 2009 +0200
@@ -125,6 +125,9 @@
 
 void NetworkTCPQueryServer(NetworkAddress address);
 
+extern char *_login_pw;                      // login password from -p argument
+extern char *_company_pw;                    // company password from -P argument
+
 void NetworkAddServer(const char *b);
 void NetworkRebuildHostList();
 void UpdateNetworkGameWindow(bool unselect);
diff -r ecfbfa484e1b -r f9510fe46f8f src/openttd.cpp
--- src/openttd.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/openttd.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -157,6 +157,8 @@
 		"  -G seed             = Set random seed\n"
 #if defined(ENABLE_NETWORK)
 		"  -n [ip:port#company]= Start networkgame\n"
+		"  -p password         = Join password\n"
+		"  -P password         = Company password\n"
 		"  -D [ip][:port]      = Start dedicated server\n"
 		"  -l ip[:port]        = Redirect DEBUG()\n"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
@@ -379,6 +381,10 @@
 }
 
 byte _savegame_sort_order;
+#if defined(ENABLE_NETWORK)
+char *_login_pw = NULL;
+char *_company_pw = NULL;
+#endif /* ENABLE_NETWORK */
 #if defined(UNIX) && !defined(__MORPHOS__)
 extern void DedicatedFork();
 #endif
@@ -415,7 +421,7 @@
 	 *   a letter means: it accepts that param (e.g.: -h)
 	 *   a ':' behind it means: it need a param (e.g.: -m<driver>)
 	 *   a '::' behind it means: it can optional have a param (e.g.: -d<debug>) */
-	optformat = "m:s:v:b:hD::n::ei::I:t:d::r:g::G:c:xl:"
+	optformat = "m:s:v:b:hD::n::ei::I:t:d::r:g::G:c:xl:p:P:"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
 		"f"
 #endif
@@ -460,6 +466,12 @@
 		case 'l':
 			debuglog_conn = mgo.opt;
 			break;
+		case 'p':
+			_login_pw = mgo.opt;
+			break;
+		case 'P':
+			_company_pw = mgo.opt;
+			break;
 #endif /* ENABLE_NETWORK */
 		case 'r': ParseResolution(&resolution, mgo.opt); break;
 		case 't': startyear = atoi(mgo.opt); break;
diff -r ecfbfa484e1b -r f9510fe46f8f src/screenshot.cpp
--- src/screenshot.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/screenshot.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -16,6 +16,9 @@
 #include "map_func.h"
 #include "saveload/saveload.h"
 #include "company_func.h"
+#include "settings_type.h"
+#include "signs_base.h"
+#include "landscape.h"
 
 
 char _screenshot_format_name[8];
@@ -548,6 +551,38 @@
 	return filename;
 }
 
+static char *MakeTimelapseScreenshotName(const char *ext, const char *name = NULL)
+{
+	/* File name base - "timelapse" */
+	ttd_strlcpy(_screenshot_name, "timelapse", lengthof(_screenshot_name));
+	size_t len = strlen(_screenshot_name);
+	if (name != NULL) {
+		/** For local screens add sign name (starting with # or specified local screenshot character)
+		 * XXX: it seems somewhere forbidden characters like :, ? and so on are automatically taken care of so no need to handle them here */
+		snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "%s", name);
+		len = strlen(_screenshot_name);
+	}
+	/* Add '#' */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "#");
+	SanitizeFilename(_screenshot_name);
+	len = strlen(_screenshot_name);
+	/* Add initial numbers and file extension */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "000000.%s", ext);
+
+	uint diff = 5; // number of preceding zeros
+	static char filename[MAX_PATH];
+	for (uint serial = 1;; serial++) {
+		/* Try if the file name is available */
+		snprintf(filename, lengthof(filename), "%s%s", _personal_dir, _screenshot_name);
+		if (!FileExists(filename)) break;
+		/* If file already exists increase the serial */
+		if (serial == 10 || serial == 100 || serial == 1000 || serial == 10000 || serial == 100000) diff--;
+		snprintf(&_screenshot_name[len + diff], lengthof(_screenshot_name) - len, "%d.%s", serial, ext);
+	}
+
+	return filename;
+}
+
 void SetScreenshotType(ScreenshotType t)
 {
 	current_screenshot_type = t;
@@ -583,7 +618,52 @@
 	return sf->proc(MakeScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
 }
 
-bool MakeScreenshot()
+static bool MakeTimelapseScreenshot()
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint8 zoom = _settings_client.gui.auto_screenshot_zoomlvl;
+
+	vp.zoom = (ZoomLevel)zoom;
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = -(int)MapMaxX() * TILE_PIXELS;
+	vp.virtual_top = 0;
+	vp.virtual_width = (MapMaxX() + MapMaxY()) * TILE_PIXELS >> zoom;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = (MapMaxX() + MapMaxY()) * (TILE_PIXELS >> 1) >> zoom;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+static bool MakeTimelapseLocalScreenshot(const char *name, const Point *pt)
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint16 size_x = _settings_client.gui.auto_local_screen_size_x;
+	uint16 size_y = _settings_client.gui.auto_local_screen_size_y;
+	uint8 zoom = _settings_client.gui.auto_local_screen_zoomlvl;
+
+	vp.zoom = ZoomLevel(zoom);
+
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = pt->x - ((size_x / 2) << zoom);
+	vp.virtual_top = pt->y - ((size_y / 2) << zoom);
+	vp.virtual_width = size_x;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = size_y;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension, name), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+bool MakeScreenshot(const void *name, const void *pt)
 {
 	switch (current_screenshot_type) {
 		case SC_VIEWPORT:
@@ -594,6 +674,12 @@
 		case SC_WORLD:
 			current_screenshot_type = SC_NONE;
 			return MakeWorldScreenshot();
+		case SC_TIMELAPSE:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseScreenshot();
+		case SC_TIMELAPSE_LOCAL:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseLocalScreenshot((const char*) name, (const Point*) pt);
 		default: return false;
 	}
 }
diff -r ecfbfa484e1b -r f9510fe46f8f src/screenshot.h
--- src/screenshot.h	Tue Mar 31 17:46:18 2009 +0000
+++ src/screenshot.h	Tue Mar 31 22:41:30 2009 +0200
@@ -13,10 +13,12 @@
 enum ScreenshotType {
 	SC_NONE,
 	SC_VIEWPORT,
-	SC_WORLD
+	SC_WORLD,
+	SC_TIMELAPSE,
+	SC_TIMELAPSE_LOCAL
 };
 
-bool MakeScreenshot();
+bool MakeScreenshot(const void *name = NULL, const void *pt = NULL);
 void SetScreenshotType(ScreenshotType t);
 bool IsScreenshotRequested();
 
diff -r ecfbfa484e1b -r f9510fe46f8f src/settings_gui.cpp
--- src/settings_gui.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/settings_gui.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -1129,9 +1129,24 @@
 /** Interaction sub-page */
 static SettingsPage _settings_ui_interaction_page = {_settings_ui_interaction, lengthof(_settings_ui_interaction)};
 
+static SettingEntry _settings_ui_automatic_screenshots[] = {
+	SettingEntry("gui.auto_screenshot"),
+	SettingEntry("gui.auto_screenshot_interval"),
+	SettingEntry("gui.auto_screenshot_num_commands"),
+	SettingEntry("gui.auto_screenshot_zoomlvl"),
+	SettingEntry("gui.auto_local_screen"),
+	SettingEntry("gui.auto_local_screen_types"),
+	SettingEntry("gui.auto_local_screen_interval"),
+	SettingEntry("gui.auto_local_screen_num_commands"),
+	SettingEntry("gui.auto_local_screen_zoomlvl"),
+};
+/** Automatic Screenshots sub-page */
+static SettingsPage _settings_ui_automatic_screenshots_page = {_settings_ui_automatic_screenshots, lengthof(_settings_ui_automatic_screenshots)};
+
 static SettingEntry _settings_ui[] = {
 	SettingEntry(&_settings_ui_display_page, STR_CONFIG_SETTING_DISPLAY_OPTIONS),
 	SettingEntry(&_settings_ui_interaction_page, STR_CONFIG_SETTING_INTERACTION),
+	SettingEntry(&_settings_ui_automatic_screenshots_page, STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS),
 	SettingEntry("gui.show_finances"),
 	SettingEntry("gui.errmsg_duration"),
 	SettingEntry("gui.toolbar_pos"),
diff -r ecfbfa484e1b -r f9510fe46f8f src/settings_type.h
--- src/settings_type.h	Tue Mar 31 17:46:18 2009 +0000
+++ src/settings_type.h	Tue Mar 31 22:41:30 2009 +0200
@@ -91,6 +91,19 @@
 	bool   persistent_buildingtools;         ///< keep the building tools active after usage
 	uint8  expenses_layout;                  ///< layout of expenses window
 
+	uint8  auto_screenshot;                  ///< automatically take giant screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint16 auto_screenshot_interval;         ///< the time interval for automatic giant screenshots
+	uint16 auto_screenshot_num_commands;     ///< the number of commands for automatic giant screenshots
+	uint8  auto_screenshot_zoomlvl;          ///< the zoom level used for automatic giant screenshots (zoomed out means smaller filesize but less quality)
+	uint8  auto_local_screen;                ///< automatically take local screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint8  auto_local_screen_types;          ///< where to take local screenshots (0 = at signs, 1 = at stations, 2 = at signs and stations)
+	uint16 auto_local_screen_interval;       ///< the interval for automatic local screenshots
+	uint16 auto_local_screen_num_commands;   ///< the number of commands for automatic local screenshots
+	uint16 auto_local_screen_zoomlvl;        ///< the zoom level used for automatic local screenshots
+	uint16 auto_local_screen_size_x;         ///< width of automatic local screenshots
+	uint16 auto_local_screen_size_y;         ///< heigth of automatic local screenshots
+	uint8  auto_local_screen_prefix;         ///< the character used to specify local screen signs (# by default)
+
 	uint16 console_backlog_timeout;          ///< the minimum amount of time items should be in the console backlog before they will be removed in ~3 seconds granularity.
 	uint16 console_backlog_length;           ///< the minimum amount of items in the console backlog before items will be removed.
 #ifdef ENABLE_NETWORK
diff -r ecfbfa484e1b -r f9510fe46f8f src/spritecache.cpp
--- src/spritecache.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/spritecache.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -16,8 +16,8 @@
 
 #include "table/sprites.h"
 
-/* Default of 4MB spritecache */
-uint _sprite_cache_size = 4;
+/* Default of 64MB spritecache */
+uint _sprite_cache_size = 64;
 
 typedef SimpleTinyEnumT<SpriteType, byte> SpriteTypeByte;
 
diff -r ecfbfa484e1b -r f9510fe46f8f src/table/settings.h
--- src/table/settings.h	Tue Mar 31 17:46:18 2009 +0000
+++ src/table/settings.h	Tue Mar 31 22:41:30 2009 +0200
@@ -553,6 +553,19 @@
 	 SDTC_BOOL(gui.persistent_buildingtools,             S,  0, false,                        STR_CONFIG_SETTING_PERSISTENT_BUILDINGTOOLS,    NULL),
 	 SDTC_BOOL(gui.expenses_layout,                      S,  0, false,                        STR_CONFIG_SETTING_EXPENSES_LAYOUT,             RedrawScreen),
 
+	  SDTC_VAR(gui.auto_screenshot,           SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_screenshot_interval, SLE_UINT16, S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_screenshot_num_commands,SLE_UINT16,S,0,   100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_screenshot_zoomlvl,   SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen,         SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_local_screen_types,   SLE_UINT8, S, MS,     0,        0,        2, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES,     NULL),
+	  SDTC_VAR(gui.auto_local_screen_interval,SLE_UINT16,S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_local_screen_num_commands,SLE_UINT16,S,0, 100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_local_screen_zoomlvl, SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_x, SLE_UINT16, S,  0,   800,      100,     8000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_y, SLE_UINT16, S,  0,   600,      100,     6000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_prefix,  SLE_UINT8, S,  0,    35,        0,      255, 1, STR_NULL,                                       NULL),
+
 	  SDTC_VAR(gui.console_backlog_timeout,  SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.console_backlog_length,   SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 #ifdef ENABLE_NETWORK
diff -r ecfbfa484e1b -r f9510fe46f8f src/town_cmd.cpp
--- src/town_cmd.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/town_cmd.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -2452,7 +2452,7 @@
 	return cost;
 }
 
-static void UpdateTownGrowRate(Town *t)
+void UpdateTownGrowRate(Town *t)
 {
 	/* Increase company ratings if they're low */
 	const Company *c;
diff -r ecfbfa484e1b -r f9510fe46f8f src/town_gui.cpp
--- src/town_gui.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/town_gui.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -93,6 +93,25 @@
 
 	virtual void OnPaint()
 	{
+		int16 oldrat[MAX_COMPANIES], newrat[MAX_COMPANIES];
+		assert(sizeof(oldrat) == sizeof(this->town->ratings) && sizeof(newrat) == sizeof(this->town->ratings));
+		memcpy(oldrat, this->town->ratings, sizeof(this->town->ratings));
+		int32 oldgrow = _settings_game.economy.town_growth_rate;
+		byte oldmonths = this->town->fund_buildings_months;
+		_settings_game.economy.town_growth_rate = 0;
+		this->town->fund_buildings_months = 0;
+		byte oldflags = this->town->flags12;
+
+		extern void UpdateTownGrowRate(Town *t);
+		UpdateTownGrowRate(this->town);
+
+		memcpy(newrat, this->town->ratings, sizeof(this->town->ratings));
+
+		memcpy(this->town->ratings, oldrat, sizeof(this->town->ratings));
+		_settings_game.economy.town_growth_rate = oldgrow;
+		this->town->fund_buildings_months = oldmonths;
+		this->town->flags12 = oldflags;
+
 		int numact;
 		uint buttons = GetMaskOfTownActions(&numact, _local_company, this->town);
 
@@ -138,6 +157,12 @@
 				}
 
 				DrawString(this->widget[TWA_RATING_INFO].left + 28, this->widget[TWA_RATING_INFO].right - 2, y, STR_2024, TC_FROMSTRING);
+
+				SetDParam(0, this->town->ratings[c->index]);
+				DrawString(this->widget[TWA_RATING_INFO].right - 70, this->widget[TWA_RATING_INFO].right - 35, y, STR_JUST_INT, TC_YELLOW);
+				SetDParam(0, newrat[c->index] - this->town->ratings[c->index]);
+				DrawString(this->widget[TWA_RATING_INFO].right - 35, this->widget[TWA_RATING_INFO].right, y, STR_JUST_INT, TC_YELLOW);
+
 				y += 10;
 			}
 		}
diff -r ecfbfa484e1b -r f9510fe46f8f src/vehicle.cpp
--- src/vehicle.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/vehicle.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -224,7 +224,7 @@
 
 /* Size of the hash, 6 = 64 x 64, 7 = 128 x 128. Larger sizes will (in theory) reduce hash
  * lookup times at the expense of memory usage. */
-const int HASH_BITS = 7;
+const int HASH_BITS = 9;
 const int HASH_SIZE = 1 << HASH_BITS;
 const int HASH_MASK = HASH_SIZE - 1;
 const int TOTAL_HASH_SIZE = 1 << (HASH_BITS * 2);
diff -r ecfbfa484e1b -r f9510fe46f8f src/viewport.cpp
--- src/viewport.cpp	Tue Mar 31 17:46:18 2009 +0000
+++ src/viewport.cpp	Tue Mar 31 22:41:30 2009 +0200
@@ -43,6 +43,8 @@
 #include "table/sprites.h"
 #include "table/strings.h"
 
+static const int VIEWPORT_DRAW_MEM = 65536 * 32;
+
 PlaceProc *_place_proc;
 Point _tile_fract_coords;
 ZoomLevel _saved_scrollpos_zoom;
@@ -1532,7 +1534,7 @@
  * If we do, the sprite memory will overflow. */
 static void ViewportDrawChk(const ViewPort *vp, int left, int top, int right, int bottom)
 {
-	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom) > 180000) {
+	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom) > VIEWPORT_DRAW_MEM) {
 		if ((bottom - top) > (right - left)) {
 			int t = (top + bottom) >> 1;
 			ViewportDrawChk(vp, left, top, right, t);
