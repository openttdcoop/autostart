Index: src/toolbar_gui.cpp
===================================================================
--- src/toolbar_gui.cpp	(revision 19523)
+++ src/toolbar_gui.cpp	(working copy)
@@ -1297,6 +1297,7 @@
 			case WKC_CTRL  | 'S': MenuClickSmallScreenshot(); break;
 			case WKC_CTRL  | 'G': MenuClickWorldScreenshot(); break;
 			case WKC_CTRL | WKC_ALT | 'C': if (!_networking) ShowCheatWindow(); break;
+			case WKC_CTRL | 'L': ShowSignList(); break;
 			case 'A': if (CanBuildVehicleInfrastructure(VEH_TRAIN)) ShowBuildRailToolbar(_last_built_railtype, 4); break; // Invoke Autorail
 			case 'L': ShowTerraformToolbar(); break;
 			case 'Q': case 'W': case 'E': case 'D': ShowTerraformToolbarWithTool(key, keycode); break;
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 19523)
+++ src/lang/english.txt	(working copy)
@@ -1142,7 +1142,7 @@
 STR_CONFIG_SETTING_AUTORENEW_MONTHS                             :{LTBLUE}Autorenew when vehicle is {ORANGE}{STRING1}{LTBLUE} months before/after max age
 STR_CONFIG_SETTING_AUTORENEW_MONEY                              :{LTBLUE}Autorenew minimum needed money for renew: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_ERRMSG_DURATION                              :{LTBLUE}Duration of error message: {ORANGE}{STRING1}
-STR_CONFIG_SETTING_POPULATION_IN_LABEL                          :{LTBLUE}Show town population in the town name label: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_POPULATION_IN_LABEL                          :{LTBLUE}Show extra information in the town name label: {ORANGE}{STRING1}
 
 STR_CONFIG_SETTING_LAND_GENERATOR                               :{LTBLUE}Land generator: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_LAND_GENERATOR_ORIGINAL                      :Original
@@ -1861,6 +1861,7 @@
 STR_TRANSPARENT_STRUCTURES_TOOLTIP                              :{BLACK}Toggle transparency for structures like lighthouses and antennas. Ctrl+Click to lock.
 STR_TRANSPARENT_CATENARY_TOOLTIP                                :{BLACK}Toggle transparency for catenary. Ctrl+Click to lock.
 STR_TRANSPARENT_LOADING_TOOLTIP                                 :{BLACK}Toggle transparency for loading indicators. Ctrl+Click to lock.
+STR_TRANSPARENT_TUNNELS_TOOLTIP                                 :{BLACK}Toggle transparency for vehicles in tunnels. Ctrl+Click to lock.
 STR_TRANSPARENT_INVISIBLE_TOOLTIP                               :{BLACK}Set objects invisible instead of transparent
 
 # Base for station construction window(s)
@@ -2586,6 +2587,10 @@
 STR_COMPANY_VIEW_VIEW_HQ_TOOLTIP                                :{BLACK}View company headquarters
 STR_COMPANY_VIEW_RELOCATE_HQ                                    :{BLACK}Relocate HQ
 STR_COMPANY_VIEW_RELOCATE_COMPANY_HEADQUARTERS                  :{BLACK}Rebuild company headquarters elsewhere for 1% cost of company value
+STR_COMPANY_VIEW_CENTER_VIEWPORT                                :{BLACK}Center viewport to place where company built last time
+STR_COMPANY_VIEW_OPEN_VIEWPORT                                  :{BLACK}Open new viewport to watch company's actions
+STR_COMPANY_VIEW_CENTER                                         :{BLACK}Center view
+STR_COMPANY_VIEW_OPEN                                           :{BLACK}Open window
 
 STR_COMPANY_VIEW_NEW_FACE_BUTTON                                :{BLACK}New Face
 STR_COMPANY_VIEW_NEW_FACE_TOOLTIP                               :{BLACK}Select new face for manager
@@ -3639,6 +3644,12 @@
 STR_ERROR_CAN_T_CHANGE_SIGN_NAME                                :{WHITE}Can't change sign name...
 STR_ERROR_CAN_T_DELETE_SIGN                                     :{WHITE}Can't delete sign...
 
+# GUI Sign list filter
+STR_FILTER                                                      :{BLACK}Filter
+STR_FILTER_OSKTITLE                                             :{BLACK}Enter a filter string
+STR_FILTER_MATCH_CASE                                           :{BLACK}Match case
+STR_FILTER_CLEAR                                                :{BLACK}Clear filter
+
 ##id 0x2000
 # Town building names
 STR_TOWN_BUILDING_NAME_TALL_OFFICE_BLOCK_1                      :Tall office block
@@ -4037,10 +4048,18 @@
 STR_SAVEGAME_NAME_SPECTATOR                                     :Spectator, {1:STRING1}
 
 # Viewport strings
+STR_VIEWPORT_TOWN_POP_VERY_POOR_RATING                          :{WHITE}{TOWN} {RED}({COMMA})
+STR_VIEWPORT_TOWN_POP_MEDIOCRE_RATING                           :{WHITE}{TOWN} {ORANGE}({COMMA})
+STR_VIEWPORT_TOWN_POP_GOOD_RATING                               :{WHITE}{TOWN} {YELLOW}({COMMA})
 STR_VIEWPORT_TOWN_POP                                           :{WHITE}{TOWN} ({COMMA})
+STR_VIEWPORT_TOWN_POP_EXCELLENT_RATING                          :{WHITE}{TOWN} {GREEN}({COMMA})
 STR_VIEWPORT_TOWN                                               :{WHITE}{TOWN}
 STR_VIEWPORT_TOWN_TINY_BLACK                                    :{TINYFONT}{BLACK}{TOWN}
+STR_VIEWPORT_TOWN_TINY_VERY_POOR_RATING                         :{TINYFONT}{RED}{TOWN}
+STR_VIEWPORT_TOWN_TINY_MEDIOCRE_RATING                          :{TINYFONT}{ORANGE}{TOWN}
+STR_VIEWPORT_TOWN_TINY_GOOD_RATING                              :{TINYFONT}{YELLOW}{TOWN}
 STR_VIEWPORT_TOWN_TINY_WHITE                                    :{TINYFONT}{WHITE}{TOWN}
+STR_VIEWPORT_TOWN_TINY_EXCELLENT_RATING                         :{TINYFONT}{GREEN}{TOWN}
 
 STR_VIEWPORT_SIGN_SMALL_BLACK                                   :{TINYFONT}{BLACK}{SIGN}
 STR_VIEWPORT_SIGN_SMALL_WHITE                                   :{TINYFONT}{WHITE}{SIGN}
Index: src/town.h
===================================================================
--- src/town.h	(revision 19523)
+++ src/town.h	(working copy)
@@ -17,6 +17,9 @@
 #include "command_type.h"
 #include "town_map.h"
 #include "subsidy_type.h"
+#include "openttd.h"
+#include "table/strings.h"
+#include "company_func.h"
 
 template <typename T>
 struct BuildingCounts {
@@ -66,6 +69,7 @@
 	CompanyByte exclusivity;       ///< which company has exclusivity
 	uint8 exclusive_counter;       ///< months till the exclusivity expires
 	int16 ratings[MAX_COMPANIES];
+	StringID town_label;           ///< Label dependent on _local_company rating.
 
 	/* Maximum amount of passengers and mail that can be transported. */
 	uint32 max_pass;
@@ -122,6 +126,30 @@
 
 	void InitializeLayout(TownLayout layout);
 
+	void UpdateLabel();
+
+	/**
+	 * Returns the correct town label, based on rating.
+	 */
+	FORCEINLINE StringID Label() const{
+		if (!(_game_mode == GM_EDITOR) && (_local_company < MAX_COMPANIES)) {
+			return STR_VIEWPORT_TOWN_POP_VERY_POOR_RATING + this->town_label;
+		} else {
+			return _settings_client.gui.population_in_label ? STR_VIEWPORT_TOWN_POP : STR_VIEWPORT_TOWN;
+		}
+	}
+
+	/**
+	 * Returns the correct town small label, based on rating.
+	 */
+	FORCEINLINE StringID SmallLabel() const{
+		if (!(_game_mode == GM_EDITOR) && (_local_company < MAX_COMPANIES)) {
+			return STR_VIEWPORT_TOWN_TINY_VERY_POOR_RATING + this->town_label;
+		} else {
+			return STR_VIEWPORT_TOWN_TINY_WHITE;
+		}
+	}
+
 	/** Calculate the max town noise
 	 * The value is counted using the population divided by the content of the
 	 * entry in town_noise_population corespondig to the town's tolerance.
Index: src/rail_cmd.cpp
===================================================================
--- src/rail_cmd.cpp	(revision 19523)
+++ src/rail_cmd.cpp	(working copy)
@@ -2320,6 +2320,8 @@
 	RailGroundType old_ground = GetRailGroundType(tile);
 	RailGroundType new_ground;
 
+	ReduceStuckCounter(tile);
+
 	if (old_ground == RAIL_GROUND_WATER) {
 		TileLoop_Water(tile);
 		return;
Index: src/smallmap_gui.cpp
===================================================================
--- src/smallmap_gui.cpp	(revision 19523)
+++ src/smallmap_gui.cpp	(working copy)
@@ -214,6 +214,21 @@
 };
 assert_compile(lengthof(_green_map_heights) == MAX_TILE_HEIGHT + 1);
 
+/**
+ * Colour Coding for Stuck Counter
+ */
+static const uint32 _stuck_counter_colours[] = {
+	MKCOLOUR(0xD0D0D0D0),
+	MKCOLOUR(0xCECECECE),
+	MKCOLOUR(0xBFBFBFBF),
+	MKCOLOUR(0xBDBDBDBD),
+	MKCOLOUR(0xBABABABA),
+	MKCOLOUR(0xB8B8B8B8),
+	MKCOLOUR(0xB6B6B6B6),
+	MKCOLOUR(0xB4B4B4B4),
+};
+assert_compile(lengthof(_stuck_counter_colours) == 8);
+
 /** Height map colours for the dark green colour scheme, ordered by height. */
 static const uint32 _dark_green_map_heights[] = {
 	MKCOLOUR(0x60606060),
@@ -421,13 +436,9 @@
 			default:              return MKCOLOUR(0xFFFFFFFF);
 		}
 	} else if (t == MP_RAILWAY) {
-		AndOr andor = {
-			GetRailTypeInfo(GetRailType(tile))->map_colour * MKCOLOUR(0x00010100),
-			_smallmap_contours_andor[t].mand
-		};
-
-		const SmallMapColourScheme *cs = &_heightmap_schemes[_settings_client.gui.smallmap_land_colour];
-		return ApplyMask(cs->default_colour, &andor);
+		byte c = GetStuckCounter(tile);
+		if (c==0) return 0;
+		return _stuck_counter_colours[c/32];
 	}
 
 	/* Ground colour */
Index: src/table/settings.h
===================================================================
--- src/table/settings.h	(revision 19523)
+++ src/table/settings.h	(working copy)
@@ -274,8 +274,8 @@
 #endif
 	  SDTG_VAR("sprite_cache_size",SLE_UINT, S, 0, _sprite_cache_size,     4, 1, 64, 0, STR_NULL, NULL),
 	  SDTG_VAR("player_face",    SLE_UINT32, S, 0, _company_manager_face,0,0,0xFFFFFFFF,0, STR_NULL, NULL),
-	  SDTG_VAR("transparency_options", SLE_UINT, S, 0, _transparency_opt,  0,0,0x1FF,0, STR_NULL, NULL),
-	  SDTG_VAR("transparency_locks", SLE_UINT, S, 0, _transparency_lock,   0,0,0x1FF,0, STR_NULL, NULL),
+	  SDTG_VAR("transparency_options", SLE_UINT, S, 0, _transparency_opt,  0,0,0x3FF,0, STR_NULL, NULL),
+	  SDTG_VAR("transparency_locks", SLE_UINT, S, 0, _transparency_lock,   0,0,0x3FF,0, STR_NULL, NULL),
 	  SDTG_VAR("invisibility_options", SLE_UINT, S, 0, _invisibility_opt,  0,0, 0xFF,0, STR_NULL, NULL),
 	  SDTG_STR("keyboard",         SLE_STRB, S, 0, _keyboard_opt[0],       NULL,    STR_NULL, NULL),
 	  SDTG_STR("keyboard_caps",    SLE_STRB, S, 0, _keyboard_opt[1],       NULL,    STR_NULL, NULL),
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 19523)
+++ src/town_cmd.cpp	(working copy)
@@ -150,6 +150,26 @@
 	return Town::Get(index);
 }
 
+/**
+ * Updates the town label of the town after changes in rating. The colour scheme is:
+ * Red: Appalling and Very poor ratings.
+ * Orange: Poor and mediocre ratings.
+ * Yellow: Good rating.
+ * White: Very good rating (standard).
+ * Green: Excellent and outstanding ratings.
+ */
+void Town::UpdateLabel()
+{
+	if (!(_game_mode == GM_EDITOR) && (_local_company < MAX_COMPANIES)) {
+		int r = this->ratings[_local_company];
+		(this->town_label = 0, r <= RATING_VERYPOOR)  || // Appalling and Very Poor
+		(this->town_label++,   r <= RATING_MEDIOCRE)  || // Poor and Mediocre
+		(this->town_label++,   r <= RATING_GOOD)      || // Good
+		(this->town_label++,   r <= RATING_VERYGOOD)  || // Very Good
+		(this->town_label++,   true);                    // Excellent and Outstanding
+	}
+}
+
 Money HouseSpec::GetRemovalCost() const
 {
 	return (_price[PR_CLEAR_HOUSE] * this->removal_cost) >> 8;
@@ -339,11 +359,11 @@
  */
 void Town::UpdateVirtCoord()
 {
+	this->UpdateLabel();
 	Point pt = RemapCoords2(TileX(this->xy) * TILE_SIZE, TileY(this->xy) * TILE_SIZE);
 	SetDParam(0, this->index);
 	SetDParam(1, this->population);
-	this->sign.UpdatePosition(pt.x, pt.y - 24,
-		_settings_client.gui.population_in_label ? STR_VIEWPORT_TOWN_POP : STR_VIEWPORT_TOWN);
+	this->sign.UpdatePosition(pt.x, pt.y - 24, this->Label());
 
 	SetWindowDirty(WC_TOWN_VIEW, this->index);
 }
@@ -2461,6 +2481,7 @@
 		 */
 		if (t->ratings[_current_company] > RATING_BRIBE_DOWN_TO) {
 			t->ratings[_current_company] = RATING_BRIBE_DOWN_TO;
+			t->UpdateVirtCoord();
 			SetWindowDirty(WC_TOWN_AUTHORITY, t->index);
 		}
 	} else {
@@ -2587,6 +2608,7 @@
 		t->ratings[i] = Clamp(t->ratings[i], RATING_MINIMUM, RATING_MAXIMUM);
 	}
 
+	t->UpdateVirtCoord();
 	SetWindowDirty(WC_TOWN_AUTHORITY, t->index);
 
 	ClrBit(t->flags, TOWN_IS_FUNDED);
@@ -2797,6 +2819,7 @@
 	} else {
 		SetBit(t->have_ratings, _current_company);
 		t->ratings[_current_company] = rating;
+		t->UpdateVirtCoord();
 		SetWindowDirty(WC_TOWN_AUTHORITY, t->index);
 	}
 }
Index: src/company_cmd.cpp
===================================================================
--- src/company_cmd.cpp	(revision 19523)
+++ src/company_cmd.cpp	(working copy)
@@ -52,7 +52,8 @@
 Company::Company(uint16 name_1, bool is_ai) :
 	name_1(name_1),
 	location_of_HQ(INVALID_TILE),
-	is_ai(is_ai)
+	is_ai(is_ai),
+	window(-1)
 {
 	for (uint j = 0; j < 4; j++) this->share_owners[j] = COMPANY_SPECTATOR;
 	InvalidateWindowData(WC_PERFORMANCE_DETAIL, 0, INVALID_COMPANY);
@@ -505,6 +506,8 @@
 
 	c->num_engines = CallocT<uint16>(Engine::GetPoolSize());
 
+	if (!is_ai) UpdateAllTownVirtCoords();
+
 	return c;
 }
 
Index: src/train_cmd.cpp
===================================================================
--- src/train_cmd.cpp	(revision 19523)
+++ src/train_cmd.cpp	(working copy)
@@ -3203,6 +3203,9 @@
 
 						/* Don't handle stuck trains here. */
 						if (HasBit(v->flags, VRF_TRAIN_STUCK)) return;
+						/* this codepath seems to be run every 5 ticks, so increase counter twice every 20 ticks */
+						IncreaseStuckCounter(v->tile);
+						if (v->tick_counter % 4 == 0) IncreaseStuckCounter(v->tile);
 
 						if (!HasSignalOnTrackdir(gp.new_tile, ReverseTrackdir(i))) {
 							v->cur_speed = 0;
@@ -3358,7 +3361,7 @@
 			} else {
 				v->x_pos = gp.x;
 				v->y_pos = gp.y;
-				VehicleMove(v, !(v->vehstatus & VS_HIDDEN));
+				VehicleMove(v, v->IsDrawn());
 				continue;
 			}
 		}
@@ -3818,6 +3821,7 @@
 	/* Handle stuck trains. */
 	if (!mode && HasBit(v->flags, VRF_TRAIN_STUCK)) {
 		++v->wait_counter;
+		if (v->tick_counter % 4 == 0) IncreaseStuckCounter(v->tile);
 
 		/* Should we try reversing this tick if still stuck? */
 		bool turn_around = v->wait_counter % (_settings_game.pf.wait_for_pbs_path * DAY_TICKS) == 0 && _settings_game.pf.wait_for_pbs_path < 255;
@@ -3893,7 +3897,7 @@
 	}
 
 	for (Train *u = v; u != NULL; u = u->Next()) {
-		if ((u->vehstatus & VS_HIDDEN) != 0) continue;
+		if (!u->IsDrawn()) continue;
 
 		u->UpdateViewport(false, false);
 	}
Index: src/command.cpp
===================================================================
--- src/command.cpp	(revision 19523)
+++ src/command.cpp	(working copy)
@@ -23,6 +23,9 @@
 #include "town.h"
 #include "date_func.h"
 #include "debug.h"
+#include "window_func.h"
+#include "viewport_type.h"
+#include "viewport_func.h"
 #include "company_func.h"
 #include "company_base.h"
 #include "signal_func.h"
@@ -661,7 +664,17 @@
 	/* update last build coordinate of company. */
 	if (tile != 0) {
 		Company *c = Company::GetIfValid(_current_company);
-		if (c != NULL) c->last_build_coordinate = tile;
+		if (c != NULL && c->last_build_coordinate != tile) {
+			c->last_build_coordinate = tile;
+			if (c->window != -1) {
+				Window *w = FindWindowById(WC_EXTRA_VIEW_PORT, c->window);
+				if (w != NULL) {
+					ScrollWindowTo(TileX(tile) * TILE_SIZE + TILE_SIZE / 2, TileY(tile) * TILE_SIZE + TILE_SIZE / 2, -1, w, true);
+				} else {
+					c->window = -1;
+				}
+			}
+		}
 	}
 
 	SubtractMoneyFromCompany(res2);
Index: src/rail_gui.cpp
===================================================================
--- src/rail_gui.cpp	(revision 19523)
+++ src/rail_gui.cpp	(working copy)
@@ -37,6 +37,8 @@
 #include "table/sprites.h"
 #include "table/strings.h"
 
+#include <vector>
+
 static RailType _cur_railtype;               ///< Rail type of the current build-rail toolbar.
 static bool _remove_button_clicked;          ///< Flag whether 'remove' toggle-button is currently enabled
 static DiagDirection _build_depot_direction; ///< Currently selected depot direction
@@ -49,6 +51,13 @@
 /* Map the setting: default_signal_type to the corresponding signal type */
 static const SignalType _default_signal_type[] = {SIGTYPE_NORMAL, SIGTYPE_PBS, SIGTYPE_PBS_ONEWAY};
 
+struct StationClass_Testing {
+	int result;      ///< Custom station class offset
+	StringID string; ///< Custom station class name
+};
+
+typedef std::vector<StationClass_Testing *> StationClasses;
+
 struct RailStationGUISettings {
 	Axis orientation;                 ///< Currently selected rail station orientation
 
@@ -56,6 +65,9 @@
 	StationClassIDByte station_class; ///< Currently selected custom station class (if newstations is \c true )
 	byte station_type;                ///< Station type within the currently selected custom station class (if newstations is \c true )
 	byte station_count;               ///< Number of custom stations (if newstations is \c true )
+	byte station_class_count;         ///< Number of custom stations classes (if newstations is \c true)
+	StationClasses station_classes;   ///< Cache of custom stations classes (if newstations is \c true)
+	uint16 station_types_list_size;   ///< Last used size of the station type list (#BRSW_NEWST_STATION_TYPES_LIST) (if newstations is \c true)
 };
 static RailStationGUISettings _railstation; ///< Settings of the station builder GUI
 
@@ -936,6 +948,12 @@
 enum BuildRailStationWidgets {
 	BRSW_BACKGROUND,
 
+	BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT,
+
+	BRSW_SHOW_NEWST_STATION_CLASSES,
+	BRSW_NEWST_STATION_CLASSES_LIST,
+	BRSW_NEWST_STATION_CLASSES_SCROLL,
+
 	BRSW_PLATFORM_DIR_X,
 	BRSW_PLATFORM_DIR_Y,
 
@@ -960,18 +978,26 @@
 	BRSW_HIGHLIGHT_OFF,
 	BRSW_HIGHLIGHT_ON,
 
-	BRSW_SHOW_NEWST_ADDITIONS,
-	BRSW_NEWST_DROPDOWN,
-	BRSW_NEWST_LIST,
-	BRSW_NEWST_SCROLL,
+	BRSW_SHOW_NEWST_STATION_TYPES,
+	BRSW_NEWST_STATION_TYPES_LIST,
+	BRSW_NEWST_STATION_TYPES_SCROLL,
 
+	BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT,
+
+	BRSW_STATION_COVERAGE,
+
+	BRSW_SHOW_NEWST_BOTTOM_BAR,
+	BRSW_NEWST_RESIZE,
+
 	BRSW_PLATFORM_NUM_BEGIN = BRSW_PLATFORM_NUM_1 - 1,
 	BRSW_PLATFORM_LEN_BEGIN = BRSW_PLATFORM_LEN_1 - 1,
 };
 
 struct BuildRailStationWindow : public PickerWindowBase {
 private:
-	uint line_height; ///< Height of a single line in the newstation selection matrix (#BRSW_NEWST_LIST widget).
+	uint line_height;            ///< Height of a single line in the newstation classes and types selection matrices 
+	                             ///  (#BRSW_NEWST_STATION_CLASSES_LIST & #BRSW_NEWST_STATION_TYPES_LIST widgets).
+	int station_coverage_resize; ///< Of how many pixels should the station coverage area text be resized (#BRSW_STATION_COVERAGE widget).
 
 	/**
 	 * Verify whether the currently selected station size is allowed after selecting a new station class/type.
@@ -1002,25 +1028,41 @@
 		}
 	}
 
-	/** Build a dropdown list of available station classes */
-	static DropDownList *BuildStationClassDropDown()
+	/* Display or not the first plane of the given stacked widget */
+	void DisplayPlane(int widget, bool display)
 	{
-		DropDownList *list = new DropDownList();
+		this->GetWidget<NWidgetStacked>(widget)->SetDisplayedPlane(display ? 0 : SZSP_NONE);
+	}
 
-		for (uint i = 0; i < GetNumStationClasses(); i++) {
-			if (i == STAT_CLASS_WAYP) continue;
-			list->push_back(new DropDownListStringItem(GetStationClassName((StationClassID)i), i, false));
-		}
+	/* Returns the station type denoted by a point over the station types list widget (#BRSW_NEWST_STATION_TYPES_LIST). */
+	int GetStationType(const Point pt)
+	{
+		const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+		const int col_count = GB(stations_list_nwi->widget_data, MAT_COL_START, MAT_COL_BITS);
+		const int row_count = GB(stations_list_nwi->widget_data, MAT_ROW_START, MAT_ROW_BITS);
+		int y = (pt.y - stations_list_nwi->pos_y) / (stations_list_nwi->current_y / row_count);
+		const int x = (pt.x - stations_list_nwi->pos_x) / (stations_list_nwi->current_x / col_count);
 
-		return list;
+		if (y >= this->vscroll2.GetCapacity()) return -1;
+		if (x >= col_count) return -1;
+		y += this->vscroll2.GetPosition();
+		if (y * col_count + x >= _railstation.station_count) return -1;
+
+		return y * col_count + x;
 	}
 
 public:
 	BuildRailStationWindow(const WindowDesc *desc, Window *parent, bool newstation) : PickerWindowBase(parent)
 	{
+		_railstation.newstations = newstation;
+		this->station_coverage_resize = -1;
+
 		this->CreateNestedTree(desc);
-		NWidgetStacked *newst_additions = this->GetWidget<NWidgetStacked>(BRSW_SHOW_NEWST_ADDITIONS);
-		newst_additions->SetDisplayedPlane(newstation ? 0 : SZSP_NONE);
+		this->DisplayPlane(BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT, !newstation);
+		this->DisplayPlane(BRSW_SHOW_NEWST_STATION_CLASSES, newstation);
+		this->DisplayPlane(BRSW_SHOW_NEWST_STATION_TYPES, newstation);
+		this->DisplayPlane(BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT, !newstation);
+		this->DisplayPlane(BRSW_SHOW_NEWST_BOTTOM_BAR, newstation);
 		this->FinishInitNested(desc, TRANSPORT_RAIL);
 
 		this->LowerWidget(_railstation.orientation + BRSW_PLATFORM_DIR_X);
@@ -1033,14 +1075,25 @@
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_OFF, !_settings_client.gui.station_show_coverage);
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_ON, _settings_client.gui.station_show_coverage);
 
-		_railstation.newstations = newstation;
-
 		if (newstation) {
-			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+			if (_railstation.station_types_list_size != 0) {
+				/* The last size of the station types list was stored.
+				 * Check if we need to resize the window to restore its previous size. */
+				const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+				uint16 widget_data = stations_list_nwi->widget_data;
 
-			this->vscroll.SetCount(_railstation.station_count);
-			this->vscroll.SetCapacity(GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_LIST)->widget_data, MAT_ROW_START, MAT_ROW_BITS));
-			this->vscroll.SetPosition(Clamp(_railstation.station_type - 2, 0, max(this->vscroll.GetCount() - this->vscroll.GetCapacity(), 0)));
+				uint stored_col_count = GB(_railstation.station_types_list_size, MAT_COL_START, MAT_COL_BITS);
+				uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+				uint stored_row_count = GB(_railstation.station_types_list_size, MAT_ROW_START, MAT_ROW_BITS);
+				uint row_count = GB(widget_data, MAT_ROW_START, MAT_ROW_BITS);
+
+				if (stored_col_count != col_count || stored_row_count != row_count) {
+					const Dimension cell_dim = {stations_list_nwi->current_x / col_count, stations_list_nwi->current_y / row_count};
+					int delta_x = (stored_col_count - col_count) * cell_dim.width;
+					int delta_y = (stored_row_count - row_count) * cell_dim.height;
+					this->ReInit(delta_x, delta_y);
+				}
+			}
 		} else {
 			/* New stations are not available, so ensure the default station
 			 * type is 'selected'. */
@@ -1051,9 +1104,52 @@
 
 	virtual ~BuildRailStationWindow()
 	{
+		if (_railstation.newstations) {
+			/* Store the current size of the station types list 
+			 * (used to restore window size on next gui invocation). */
+			_railstation.station_types_list_size = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data;
+		}
+
 		DeleteWindowById(WC_SELECT_STATION, 0);
 	}
 
+	virtual void OnInit()
+	{
+		if (_railstation.newstations) {
+			this->line_height = FONT_HEIGHT_NORMAL + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
+
+			/* Cache the list of custom stations classes */
+			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+			if (!_railstation.station_classes.empty()) {
+				/* If the window is being opened again refresh the station classes */
+				_railstation.station_classes.clear();
+				_railstation.station_class_count = 0;
+			}
+			uint station_classes_count = GetNumStationClasses();
+			for (uint i = 0; i < station_classes_count; i++) {
+				if (i == STAT_CLASS_WAYP) continue;
+				_railstation.station_class_count++;
+				StationClass_Testing *station_class = new StationClass_Testing();
+				station_class->result = i;
+				station_class->string = GetStationClassName((StationClassID)i);
+				_railstation.station_classes.push_back(station_class);
+			}
+
+			/* Setup the station classes scrollbar */
+			this->vscroll.SetCount(_railstation.station_class_count);
+			this->vscroll.SetCapacity(GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_CLASSES_LIST)->widget_data, MAT_ROW_START, MAT_ROW_BITS));
+			this->vscroll.SetPosition(Clamp(_railstation.station_class - 2, 0, max(this->vscroll.GetCount() - this->vscroll.GetCapacity(), 0)));
+
+			/* Setup the station types scrollbar */
+			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+			uint16 widget_data = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data;
+			this->vscroll2.SetCapacity(GB(widget_data, MAT_ROW_START, MAT_ROW_BITS));
+			uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+			this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+			this->vscroll2.SetPosition(Clamp((_railstation.station_type / col_count), 0, max(this->vscroll2.GetCount() - this->vscroll2.GetCapacity(), 0)));
+		}
+	}
+
 	virtual void OnPaint()
 	{
 		bool newstations = _railstation.newstations;
@@ -1088,48 +1184,58 @@
 		this->DrawWidgets();
 
 		/* 'Accepts' and 'Supplies' texts. */
-		int top = this->GetWidget<NWidgetBase>(BRSW_HIGHLIGHT_ON)->pos_y + this->GetWidget<NWidgetBase>(BRSW_HIGHLIGHT_ON)->current_y + WD_PAR_VSEP_NORMAL;
-		NWidgetBase *back_nwi = this->GetWidget<NWidgetBase>(BRSW_BACKGROUND);
-		int right = back_nwi->pos_x +  back_nwi->current_x;
-		int bottom = back_nwi->pos_y +  back_nwi->current_y;
-		top = DrawStationCoverageAreaText(back_nwi->pos_x + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, false) + WD_PAR_VSEP_NORMAL;
-		top = DrawStationCoverageAreaText(back_nwi->pos_x + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, true) + WD_PAR_VSEP_NORMAL;
-		/* Resize background if the text is not equally long as the window. */
-		if (top > bottom || (top < bottom && back_nwi->current_y > back_nwi->smallest_y)) {
-			ResizeWindow(this, 0, top - bottom);
+		NWidgetBase *station_coverage_nwi = this->GetWidget<NWidgetBase>(BRSW_STATION_COVERAGE);
+		uint left = station_coverage_nwi->pos_x;
+		uint right = left + station_coverage_nwi->current_x;
+		uint top = station_coverage_nwi->pos_y;
+		top = DrawStationCoverageAreaText(left + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, false) + WD_PAR_VSEP_NORMAL;
+		top = DrawStationCoverageAreaText(left + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, true) + WD_PAR_VSEP_NORMAL;
+		/* Resize background if the text is not equally long as the 'station coverage' widget. */
+		const uint text_height = top - station_coverage_nwi->pos_y + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
+		if (text_height != station_coverage_nwi->current_y) {
+			/* Sets the additional height needed to #BRSW_STATION_COVERAGE to fit 
+				the coverage area text (UpdateWidgetSize(#BRSW_STATION_COVERAGE)) */
+			this->station_coverage_resize = text_height - (this->line_height * 2);
+			this->ReInit(0, this->station_coverage_resize);
 		}
 	}
 
 	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
 		switch (widget) {
-			case BRSW_NEWST_DROPDOWN: {
-				Dimension d = {0, 0};
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				/* Increase width to match the widest custom station class name */
+ 				Dimension d = {0, 0};
 				for (uint i = 0; i < GetNumStationClasses(); i++) {
 					if (i == STAT_CLASS_WAYP) continue;
 					SetDParam(0, GetStationClassName((StationClassID)i));
-					d = maxdim(d, GetStringBoundingBox(STR_BLACK_STRING));
-				}
-				d.width += padding.width;
-				d.height += padding.height;
-				*size = maxdim(*size, d);
-				break;
-			}
-			case BRSW_NEWST_LIST: {
-				Dimension d = GetStringBoundingBox(STR_STATION_CLASS_DFLT);
-				for (StationClassID statclass = STAT_CLASS_BEGIN; statclass < (StationClassID)GetNumStationClasses(); statclass++) {
-					if (statclass == STAT_CLASS_WAYP) continue;
-					for (uint16 j = 0; j < GetNumCustomStations(statclass); j++) {
-						const StationSpec *statspec = GetCustomStationSpec(statclass, j);
-						if (statspec != NULL && statspec->name != 0) d = maxdim(d, GetStringBoundingBox(statspec->name));
-					}
-				}
-				size->width = max(size->width, d.width + padding.width);
+ 					d = maxdim(d, GetStringBoundingBox(STR_BLACK_STRING));
+ 				}
+ 				size->width = max(size->width, d.width + padding.width);
 
-				this->line_height = FONT_HEIGHT_NORMAL + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
-				size->height = GB(this->GetWidget<NWidgetCore>(widget)->widget_data, MAT_ROW_START, MAT_ROW_BITS) * this->line_height;
-				break;
-			}
+				size->height = GB(this->GetWidget<NWidgetCore>(widget)->widget_data, MAT_ROW_START, MAT_ROW_BITS) * this->line_height + 1;
+				resize->height = this->line_height;
+			} break;
+
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				const uint station_cell_height = this->line_height * 4;
+				const uint row_count = GB(this->GetWidget<NWidgetCore>(widget)->widget_data, MAT_ROW_START, MAT_ROW_BITS);
+				size->height = station_cell_height * row_count;
+				resize->height = station_cell_height;
+			} break;
+
+			case BRSW_STATION_COVERAGE: {
+				/* Widget height is two lines eventually increased by the height needed
+					to fit the coverage text */
+				size->height = this->line_height * 2 + max(0, this->station_coverage_resize);
+				this->station_coverage_resize = -1;
+			} break;
+
+			case BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT:
+			case BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT: {
+				/* Force height resizing when using newstations gui */
+				if (_railstation.newstations) resize->height = 1;
+			} break;
 		}
 	}
 
@@ -1162,32 +1268,68 @@
 				}
 				break;
 
-			case BRSW_NEWST_LIST: {
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				/* Draw the custom stations classes names */
 				uint y = r.top;
-				for (uint16 i = this->vscroll.GetPosition(); i < _railstation.station_count && this->vscroll.IsVisible(i); i++) {
-					const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, i);
+				for (uint16 i = this->vscroll.GetPosition(); i < _railstation.station_class_count && this->vscroll.IsVisible(i); i++) {
+					DrawString(r.left + WD_MATRIX_LEFT, r.right - WD_MATRIX_RIGHT, y + WD_MATRIX_TOP, _railstation.station_classes[i]->string,
+							_railstation.station_classes[i]->result == (StationClassID)_railstation.station_class ? TC_WHITE : TC_BLACK);
+					y += this->line_height;
+				}
+			} break;
 
-					StringID str = STR_STATION_CLASS_DFLT;
-					if (statspec != NULL && statspec->name != 0) {
-						if (HasBit(statspec->callback_mask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
-							GfxFillRect(r.left + 1, y + 1, r.right - 1, y + this->line_height - 2, 0, FILLRECT_CHECKER);
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				/* Draw station types of the current custom station class */
+				const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(widget);
+				uint16 widget_data = stations_list_nwi->widget_data;
+				const uint row_count = GB(widget_data, MAT_ROW_START, MAT_ROW_BITS);
+				const uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+				const Dimension cell_dim = {stations_list_nwi->current_x / col_count, stations_list_nwi->current_y / row_count};
+				/* Topmost-leftest cell */
+				const Rect cell = {r.left, r.top, r.left + cell_dim.width, r.top + cell_dim.height};
+
+				uint y = 0;
+				uint x = 0;
+				DrawPixelInfo *old_dpi;
+
+				for (uint16 i = this->vscroll2.GetPosition(); i < this->vscroll2.GetCount() && this->vscroll2.IsVisible(i); i++) {
+					x = 0;
+					for (uint16 station = i * col_count; station < _railstation.station_count && station < (i + 1) * col_count; station++) {
+						/* Draw selected cell as lowered */
+						if (_railstation.station_type == station) {
+							/* Rightest cells don't overwrite scrollbar */
+							const int adjust_x = (x / cell_dim.width) + 1 == col_count ? -2 : -1;
+							/* Bottom cells don't overwrite coverage area text */
+							const int adjust_y = (y / cell_dim.height) + 1 == this->vscroll2.GetCapacity() ? -1 : 0;
+							DrawFrameRect(cell.left + x, cell.top + y, cell.right + adjust_x + x, cell.bottom + adjust_y + y, stations_list_nwi->colour, FR_LOWERED);
 						}
-						str = statspec->name;
+
+						/* Draw station sprite */
+						if (FillDrawPixelInfo(&tmp_dpi, cell.left + x, cell.top + 1 + y, cell_dim.width, cell_dim.height + 1)) {
+							old_dpi = _cur_dpi;
+							_cur_dpi = &tmp_dpi;
+							if (!DrawStationTile(32, 16, _cur_railtype, _railstation.orientation, _railstation.station_class, station)) {
+								StationPickerDrawSprite(32, 16, STATION_RAIL, _cur_railtype, INVALID_ROADTYPE, 2 + _railstation.orientation);
+							}
+							_cur_dpi = old_dpi;
+						}
+
+						/* Draw unavailable station as disabled */
+						const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station);
+						if (statspec != NULL && statspec->name != 0) {
+							if (HasBit(statspec->callback_mask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
+								GfxFillRect(cell.left + 1 + x, cell.top + 1 + y, cell.right - 2 + x, cell.bottom - 1 + y, 0, FILLRECT_CHECKER);
+							}
+						}
+
+						x += cell_dim.width;
 					}
-					DrawString(r.left + WD_MATRIX_LEFT, r.right - WD_MATRIX_RIGHT, y + WD_MATRIX_TOP, str, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
-
-					y += this->line_height;
+					y += cell_dim.height;
 				}
-				break;
-			}
+			} break;
 		}
 	}
 
-	virtual void SetStringParameters(int widget) const
-	{
-		if (widget == BRSW_NEWST_DROPDOWN) SetDParam(0, GetStationClassName(_railstation.station_class));
-	}
-
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
 		switch (widget) {
@@ -1314,126 +1456,207 @@
 				this->SetDirty();
 				break;
 
-			case BRSW_NEWST_DROPDOWN:
-				ShowDropDownList(this, BuildStationClassDropDown(), _railstation.station_class, BRSW_NEWST_DROPDOWN);
-				break;
-
-			case BRSW_NEWST_LIST: {
-				const StationSpec *statspec;
-				int y = (pt.y - this->GetWidget<NWidgetBase>(BRSW_NEWST_LIST)->pos_y) / this->line_height;
-
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				int y = (pt.y - this->GetWidget<NWidgetBase>(widget)->pos_y) / this->line_height;
 				if (y >= this->vscroll.GetCapacity()) return;
 				y += this->vscroll.GetPosition();
-				if (y >= _railstation.station_count) return;
+				if (y >= _railstation.station_class_count) return;
 
-				/* Check station availability callback */
-				statspec = GetCustomStationSpec(_railstation.station_class, y);
-				if (statspec != NULL &&
-					HasBit(statspec->callback_mask, CBM_STATION_AVAIL) &&
-					GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) return;
+				if (_railstation.station_class != _railstation.station_classes[y]->result) {
+					/* A new custom station class is selected */
+					_railstation.station_class = (StationClassID)(_railstation.station_classes[y]->result);
+					_railstation.station_type  = 0;
+					_railstation.station_count = GetNumCustomStations(_railstation.station_class);
 
-				_railstation.station_type = y;
+					this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
 
+					uint col_count = GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data, MAT_COL_START, MAT_COL_BITS);
+					this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+					this->vscroll2.SetPosition(_railstation.station_type);
+				}
+
+				SndPlayFx(SND_15_BEEP);
+				this->SetDirty();
+				DeleteWindowById(WC_SELECT_STATION, 0);
+			} break;
+
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				int station_type = this->GetStationType(pt);
+ 				if (station_type == -1) return;
+ 				
+ 				/* Check station availability callback */
+				const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station_type);
+ 				if (statspec != NULL &&
+ 					HasBit(statspec->callback_mask, CBM_STATION_AVAIL) &&
+ 					GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) return;
+ 
+				/* Select current station type */
+				_railstation.station_type = station_type;
+
 				this->CheckSelectedSize(statspec);
 
 				SndPlayFx(SND_15_BEEP);
 				this->SetDirty();
 				DeleteWindowById(WC_SELECT_STATION, 0);
-				break;
-			}
+			} break;
 		}
 	}
 
-	virtual void OnDropdownSelect(int widget, int index)
+	virtual void OnRightClick(Point pt, int widget)
 	{
-		if (_railstation.station_class != index) {
-			_railstation.station_class = (StationClassID)index;
-			_railstation.station_type  = 0;
-			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+		if (widget == BRSW_NEWST_STATION_TYPES_LIST) {
+			int station_type = this->GetStationType(pt);
+			if (station_type == -1) return;
+			
+			const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station_type);
 
-			this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
-
-			this->vscroll.SetCount(_railstation.station_count);
-			this->vscroll.SetPosition(_railstation.station_type);
+			/* Show station type name as tooltip (forced in black) */
+			uint64 args[1];
+			args[0] = (uint64)(size_t)(statspec != NULL && statspec->name != 0 ? statspec->name : STR_STATION_CLASS_DFLT);
+			GuiShowTooltips(STR_BLACK_STRING, 1, args);
 		}
-
-		SndPlayFx(SND_15_BEEP);
-		this->SetDirty();
-		DeleteWindowById(WC_SELECT_STATION, 0);
 	}
 
 	virtual void OnTick()
 	{
 		CheckRedrawStationCoverage(this);
 	}
+
+	virtual void OnResize()
+	{
+		if (_railstation.newstations) {
+			/* Update custom stations classes scrollbar */
+			int old_capacity = this->vscroll.GetCapacity();
+			this->vscroll.SetCapacityFromWidget(this, BRSW_NEWST_STATION_CLASSES_LIST, 1);
+			this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_CLASSES_LIST)->widget_data = (this->vscroll.GetCapacity()  << MAT_ROW_START) + (1 << MAT_COL_START);
+			if (!this->vscroll.IsVisible(_railstation.station_class)) {
+				/* Ensure that the currently selected class is visible */
+				this->vscroll.UpdatePosition(max(old_capacity - this->vscroll.GetCapacity(), 0));
+			}
+
+			/* Update custom stations types scrollbar */
+			old_capacity = this->vscroll2.GetCapacity();
+			this->vscroll2.SetCapacityFromWidget(this, BRSW_NEWST_STATION_TYPES_LIST, 0);
+			int capacity = this->vscroll2.GetCapacity();
+
+			NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+
+			const uint col_count = stations_list_nwi->current_x / stations_list_nwi->resize_x;
+			this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+
+			const uint old_col_count = GB(stations_list_nwi->widget_data, MAT_COL_START, MAT_COL_BITS);
+			stations_list_nwi->widget_data = (this->vscroll2.GetCapacity() << MAT_ROW_START) + (col_count << MAT_COL_START);
+
+			if (!this->vscroll2.IsVisible(_railstation.station_type / col_count)) {
+				/* Ensure that the currently selected type is visible */
+				if (old_capacity > capacity) {
+					/* Selected type was hidden by a vertical resize */
+					this->vscroll2.UpdatePosition(old_capacity - capacity);
+				} else if(old_col_count > col_count) {
+					/* Selected type was hidden by an horizontal resize */
+					this->vscroll2.UpdatePosition(_railstation.station_type - (capacity - 1) - this->vscroll2.GetPosition());
+				}
+			}
+		}
+	}
 };
 
+/* 
+ * NOTE: A stacked widget that display no plane (SZSP_NONE) has {0, 0} as size and resize. To allow a proper centering of the
+ * widgets in the default gui, two spacers (BRSW_SHOW_DEFAULT_CENTER_ALIGN_{LEFT,RIGHT}) are inserted at the inner bounds
+ * of the NWID_HORIZONTAL container that contains them.
+ */
 static const NWidgetPart _nested_station_builder_widgets[] = {
 	NWidget(NWID_HORIZONTAL),
 		NWidget(WWT_CLOSEBOX, COLOUR_DARK_GREEN),
-		NWidget(WWT_CAPTION, COLOUR_DARK_GREEN), SetDataTip(STR_STATION_BUILD_RAIL_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS),
+		NWidget(WWT_CAPTION, COLOUR_DARK_GREEN), SetDataTip(STR_STATION_BUILD_RAIL_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS), SetResize(1, 0),
 	EndContainer(),
 	NWidget(WWT_PANEL, COLOUR_DARK_GREEN, BRSW_BACKGROUND),
-		/* begin newstations gui additions. */
-		NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_ADDITIONS),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT), // default gui 'left spacer'
+				NWidget(NWID_SPACER), SetFill(1, 1), SetResize(1, 0),
+			EndContainer(),
 			NWidget(NWID_VERTICAL),
-				NWidget(WWT_DROPDOWN, COLOUR_GREY, BRSW_NEWST_DROPDOWN), SetMinimalSize(134, 12), SetFill(1, 0), SetPadding(3, 7, 3, 7), SetDataTip(STR_BLACK_STRING, STR_STATION_BUILD_STATION_CLASS_TOOLTIP),
-				NWidget(NWID_HORIZONTAL), SetPIP(7, 0, 7),
-					NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_LIST), SetMinimalSize(122, 71), SetFill(1, 0), SetDataTip(0x501, STR_STATION_BUILD_STATION_TYPE_TOOLTIP),
-					NWidget(WWT_SCROLLBAR, COLOUR_GREY, BRSW_NEWST_SCROLL),
+				NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_STATION_CLASSES), // newstations gui 'station classes selector'
+					NWidget(NWID_VERTICAL),
+						NWidget(NWID_SPACER), SetMinimalSize(0, 3), SetResize(1, 0),
+						NWidget(NWID_HORIZONTAL), SetPIP(7, 0, 7),
+							NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_STATION_CLASSES_LIST), SetMinimalSize(122, 14 * 5 + 1), SetDataTip(0x501, STR_STATION_BUILD_STATION_CLASS_TOOLTIP), SetResize(0, 14),
+							NWidget(WWT_SCROLLBAR, COLOUR_GREY, BRSW_NEWST_STATION_CLASSES_SCROLL),
+						EndContainer(),
+					EndContainer(),
 				EndContainer(),
-				NWidget(NWID_SPACER), SetMinimalSize(0, 1),
+				/* begin common widgets definition. */
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_ORIENTATION, STR_NULL), SetPadding(1, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+					NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_X), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_Y), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
+					NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_NUMBER_OF_TRACKS, STR_NULL), SetPadding(2, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_PLATFORM_LENGTH, STR_NULL), SetPadding(2, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+				EndContainer(),
+				NWidget(NWID_SPACER), SetMinimalSize(0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_DRAG_N_DROP), SetMinimalSize(75, 12), SetDataTip(STR_STATION_BUILD_DRAG_DROP, STR_STATION_BUILD_DRAG_DROP_TOOLTIP),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_COVERAGE_AREA_TITLE, STR_NULL), SetPadding(3, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_OFF), SetMinimalSize(60, 12),
+												SetDataTip(STR_STATION_BUILD_COVERAGE_OFF, STR_STATION_BUILD_COVERAGE_AREA_OFF_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_ON), SetMinimalSize(60, 12),
+												SetDataTip(STR_STATION_BUILD_COVERAGE_ON, STR_STATION_BUILD_COVERAGE_AREA_ON_TOOLTIP),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+				EndContainer(),
+				/* end common widgets definition. */
 			EndContainer(),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_STATION_TYPES), // newstations gui 'station's type selector'
+				NWidget(NWID_VERTICAL),
+					NWidget(NWID_SPACER), SetMinimalSize(0, 3), SetResize(1, 0),
+					NWidget(NWID_HORIZONTAL),
+						NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_STATION_TYPES_LIST), SetMinimalSize(66, 14 * 4 * 4), SetDataTip(0x401, STR_NULL), SetResize(66, 14 * 4),
+						NWidget(WWT_SCROLL2BAR, COLOUR_GREY, BRSW_NEWST_STATION_TYPES_SCROLL),
+					EndContainer(),
+				EndContainer(),
+			EndContainer(),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT), // default gui 'right spacer'
+				NWidget(NWID_SPACER), SetFill(1, 1), SetResize(1, 0),
+			EndContainer(),
 		EndContainer(),
-		/* end newstations gui additions. */
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_ORIENTATION, STR_NULL), SetPadding(1, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
-			NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_X), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_Y), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
-			NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+		NWidget(NWID_SPACER), SetMinimalSize(0, WD_PAR_VSEP_NORMAL), SetFill(1, 0), SetResize(1, 0),
+		NWidget(WWT_TEXT, COLOUR_DARK_GREEN, BRSW_STATION_COVERAGE), SetMinimalSize(1, 20), SetFill(1, 0), SetResize(1, 0),
+	EndContainer(),
+	NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_BOTTOM_BAR), // newstations gui 'bottom bar with resize button'
+ 		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_PANEL, COLOUR_DARK_GREEN), SetFill(1, 1), SetResize(1, 0), EndContainer(),
+			NWidget(WWT_RESIZEBOX, COLOUR_DARK_GREEN, BRSW_NEWST_RESIZE),
 		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_NUMBER_OF_TRACKS, STR_NULL), SetPadding(2, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_PLATFORM_LENGTH, STR_NULL), SetPadding(2, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-		EndContainer(),
-		NWidget(NWID_SPACER), SetMinimalSize(0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_DRAG_N_DROP), SetMinimalSize(75, 12), SetDataTip(STR_STATION_BUILD_DRAG_DROP, STR_STATION_BUILD_DRAG_DROP_TOOLTIP),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_COVERAGE_AREA_TITLE, STR_NULL), SetPadding(3, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_OFF), SetMinimalSize(60, 12),
-										SetDataTip(STR_STATION_BUILD_COVERAGE_OFF, STR_STATION_BUILD_COVERAGE_AREA_OFF_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_ON), SetMinimalSize(60, 12),
-										SetDataTip(STR_STATION_BUILD_COVERAGE_ON, STR_STATION_BUILD_COVERAGE_AREA_ON_TOOLTIP),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-		EndContainer(),
-		NWidget(NWID_SPACER), SetMinimalSize(0, 20), SetResize(0, 1),
 	EndContainer(),
 };
 
Index: src/company_base.h
===================================================================
--- src/company_base.h	(revision 19523)
+++ src/company_base.h	(working copy)
@@ -74,6 +74,8 @@
 
 	bool is_ai;
 
+	int window;
+
 	class AIInstance *ai_instance;
 	class AIInfo *ai_info;
 
Index: src/transparency.h
===================================================================
--- src/transparency.h	(revision 19523)
+++ src/transparency.h	(working copy)
@@ -31,6 +31,7 @@
 	TO_STRUCTURES, ///< unmovable structures
 	TO_CATENARY,   ///< catenary
 	TO_LOADING,    ///< loading indicators
+	TO_TUNNELS,    ///< vehicles in tunnels
 	TO_END,
 };
 
Index: src/company_gui.cpp
===================================================================
--- src/company_gui.cpp	(revision 19523)
+++ src/company_gui.cpp	(working copy)
@@ -13,6 +13,7 @@
 #include "gui.h"
 #include "window_gui.h"
 #include "textbuf_gui.h"
+#include "window_func.h"
 #include "viewport_func.h"
 #include "company_func.h"
 #include "command_func.h"
@@ -27,6 +28,7 @@
 #include "date_func.h"
 #include "widgets/dropdown_type.h"
 #include "tilehighlight_func.h"
+#include "map_func.h"
 #include "sprite.h"
 #include "company_base.h"
 #include "core/geometry_func.hpp"
@@ -1592,6 +1594,9 @@
 	CW_WIDGET_SELECT_RELOCATE,    ///< View/hide the 'Relocate HQ' button.
 	CW_WIDGET_RELOCATE_HQ,
 
+	CW_WIDGET_CENTER,
+	CW_WIDGET_OPEN,
+
 	CW_WIDGET_HAS_PASSWORD,       ///< Draw a lock when the company has a password
 	CW_WIDGET_SELECT_MULTIPLAYER, ///< Multiplayer selection panel.
 	CW_WIDGET_COMPANY_PASSWORD,
@@ -1638,6 +1643,8 @@
 							NWidget(WWT_TEXTBTN, COLOUR_GREY, CW_WIDGET_RELOCATE_HQ), SetFill(1, 0), SetDataTip(STR_COMPANY_VIEW_RELOCATE_HQ, STR_COMPANY_VIEW_RELOCATE_COMPANY_HEADQUARTERS),
 							NWidget(NWID_SPACER), SetMinimalSize(90, 0),
 						EndContainer(),
+						NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, CW_WIDGET_CENTER), SetFill(1, 0), SetDataTip(STR_COMPANY_VIEW_CENTER, STR_COMPANY_VIEW_CENTER_VIEWPORT),
+						NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, CW_WIDGET_OPEN), SetFill(1, 0), SetDataTip(STR_COMPANY_VIEW_OPEN, STR_COMPANY_VIEW_OPEN_VIEWPORT),
 						NWidget(NWID_SPACER), SetFill(0, 1),
 					EndContainer(),
 				EndContainer(),
@@ -1967,6 +1974,21 @@
 				DoCommandP(0, this->window_number, 0, CMD_BUY_SHARE_IN_COMPANY | CMD_MSG(STR_ERROR_CAN_T_BUY_25_SHARE_IN_THIS));
 				break;
 
+			case CW_WIDGET_CENTER:
+				ScrollMainWindowToTile(Company::Get((CompanyID)this->window_number)->last_build_coordinate);
+				break;
+
+			case CW_WIDGET_OPEN: {
+				int window = ShowExtraViewPortWindow();
+				Company *c = Company::Get((CompanyID)this->window_number);
+				TileIndex tile = c->last_build_coordinate;
+
+				c->window = window;
+				ScrollWindowTo(TileX(tile) * TILE_SIZE + TILE_SIZE / 2, TileY(tile) * TILE_SIZE + TILE_SIZE / 2, -1, FindWindowById(WC_EXTRA_VIEW_PORT, window), true);
+				break;
+			}
+
+
 			case CW_WIDGET_SELL_SHARE:
 				DoCommandP(0, this->window_number, 0, CMD_SELL_SHARE_IN_COMPANY | CMD_MSG(STR_ERROR_CAN_T_SELL_25_SHARE_IN));
 				break;
Index: src/viewport_gui.cpp
===================================================================
--- src/viewport_gui.cpp	(revision 19523)
+++ src/viewport_gui.cpp	(working copy)
@@ -167,7 +167,7 @@
 	_nested_extra_view_port_widgets, lengthof(_nested_extra_view_port_widgets)
 );
 
-void ShowExtraViewPortWindow(TileIndex tile)
+int ShowExtraViewPortWindow(TileIndex tile)
 {
 	int i = 0;
 
@@ -175,4 +175,6 @@
 	while (FindWindowById(WC_EXTRA_VIEW_PORT, i) != NULL) i++;
 
 	new ExtraViewportWindow(&_extra_view_port_desc, i, tile);
+
+	return i;
 }
Index: src/gui.h
===================================================================
--- src/gui.h	(revision 19523)
+++ src/gui.h	(working copy)
@@ -63,7 +63,7 @@
 
 void ShowErrorMessage(StringID summary_msg, StringID detailed_msg, WarningLevel wl, int x = 0, int y = 0);
 
-void ShowExtraViewPortWindow(TileIndex tile = INVALID_TILE);
+int ShowExtraViewPortWindow(TileIndex tile = INVALID_TILE);
 
 void BuildFileList();
 void SetFiosType(const byte fiostype);
Index: src/transparency_gui.cpp
===================================================================
--- src/transparency_gui.cpp	(revision 19523)
+++ src/transparency_gui.cpp	(working copy)
@@ -34,14 +34,14 @@
 	TTW_WIDGET_STRUCTURES,               ///< Unmovable structures transparency toggle button.
 	TTW_WIDGET_CATENARY,                 ///< Catenary transparency toggle button.
 	TTW_WIDGET_LOADING,                  ///< Loading indicators transparency toggle button.
+	TTW_WIDGET_TUNNELS,                  ///< Vehicles in tunnels toggle button.
 	TTW_WIDGET_END,                      ///< End of toggle buttons.
 
 	/* Panel with buttons for invisibility */
 	TTW_WIDGET_BUTTONS,                  ///< Panel with 'invisibility' buttons.
 };
 
-class TransparenciesWindow : public Window
-{
+class TransparenciesWindow : public Window {
 public:
 	TransparenciesWindow(const WindowDesc *desc, int window_number) : Window()
 	{
@@ -50,7 +50,7 @@
 
 	virtual void OnPaint()
 	{
-		OnInvalidateData(0); // Must be sure that the widgets show the transparency variable changes, also when we use shortcuts.
+		this->OnInvalidateData(0); // Must be sure that the widgets show the transparency variable changes, also when we use shortcuts.
 		this->DrawWidgets();
 	}
 
@@ -65,14 +65,15 @@
 			case TTW_WIDGET_BRIDGES:
 			case TTW_WIDGET_STRUCTURES:
 			case TTW_WIDGET_CATENARY:
-			case TTW_WIDGET_LOADING: {
+			case TTW_WIDGET_LOADING:
+			case TTW_WIDGET_TUNNELS: {
 				uint i = widget - TTW_WIDGET_BEGIN;
 				if (HasBit(_transparency_lock, i)) DrawSprite(SPR_LOCK, PAL_NONE, r.left + 1, r.top + 1);
 				break;
 			}
 			case TTW_WIDGET_BUTTONS:
 				for (uint i = TTW_WIDGET_BEGIN; i < TTW_WIDGET_END; i++) {
-					if (i == TTW_WIDGET_LOADING) continue; // Do not draw button for invisible loading indicators.
+					if (i >= TTW_WIDGET_LOADING) continue; // Do not draw button for invisible loading indicators.
 
 					const NWidgetBase *wi = this->GetWidget<NWidgetBase>(i);
 					DrawFrameRect(wi->pos_x + 1, r.top + 2, wi->pos_x + wi->current_x - 2, r.bottom - 2, COLOUR_PALE_GREEN,
@@ -84,7 +85,7 @@
 
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
-		if (widget >= TTW_WIDGET_BEGIN && widget < TTW_WIDGET_END) {
+		if (IsInsideMM(widget, TTW_WIDGET_BEGIN, TTW_WIDGET_END)) {
 			if (_ctrl_pressed) {
 				/* toggle the bit of the transparencies lock variable */
 				ToggleTransparencyLock((TransparencyOption)(widget - TTW_WIDGET_BEGIN));
@@ -147,7 +148,8 @@
 		NWidget(WWT_IMGBTN, COLOUR_DARK_GREEN, TTW_WIDGET_STRUCTURES), SetMinimalSize(22, 22), SetFill(0, 1), SetDataTip(SPR_IMG_TRANSMITTER, STR_TRANSPARENT_STRUCTURES_TOOLTIP),
 		NWidget(WWT_IMGBTN, COLOUR_DARK_GREEN, TTW_WIDGET_CATENARY), SetMinimalSize(22, 22), SetFill(0, 1), SetDataTip(SPR_BUILD_X_ELRAIL, STR_TRANSPARENT_CATENARY_TOOLTIP),
 		NWidget(WWT_IMGBTN, COLOUR_DARK_GREEN, TTW_WIDGET_LOADING), SetMinimalSize(22, 22), SetFill(0, 1), SetDataTip(SPR_IMG_TRAINLIST, STR_TRANSPARENT_LOADING_TOOLTIP),
-		NWidget(WWT_PANEL, COLOUR_DARK_GREEN), SetFill(1, 1), EndContainer(),
+		NWidget(WWT_IMGBTN, COLOUR_DARK_GREEN, TTW_WIDGET_TUNNELS), SetMinimalSize(22, 22), SetFill(0, 1), SetDataTip(SPR_IMG_ROAD_TUNNEL, STR_TRANSPARENT_TUNNELS_TOOLTIP),
+	NWidget(WWT_PANEL, COLOUR_DARK_GREEN), SetFill(1, 1), EndContainer(),
 	EndContainer(),
 	/* Panel with 'inivisibility' buttons. */
 	NWidget(WWT_PANEL, COLOUR_DARK_GREEN, TTW_WIDGET_BUTTONS), SetMinimalSize(219, 13), SetDataTip(0x0, STR_TRANSPARENT_INVISIBLE_TOOLTIP),
Index: src/roadveh_cmd.cpp
===================================================================
--- src/roadveh_cmd.cpp	(revision 19523)
+++ src/roadveh_cmd.cpp	(working copy)
@@ -1210,7 +1210,7 @@
 
 		v->x_pos = gp.x;
 		v->y_pos = gp.y;
-		VehicleMove(v, !(v->vehstatus & VS_HIDDEN));
+		VehicleMove(v, v->IsDrawn());
 		return true;
 	}
 
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 19523)
+++ src/vehicle.cpp	(working copy)
@@ -183,7 +183,15 @@
 	return pass;
 }
 
+bool Vehicle::IsDrawn() const
+{
+	return !(this->vehstatus & VS_HIDDEN) ||
+			(!IsTransparencySet(TO_TUNNELS) &&
+				((this->type == VEH_TRAIN && Train::From(this)->track == TRACK_BIT_WORMHOLE) ||
+				(this->type == VEH_ROAD && RoadVehicle::From(this)->state == RVSB_WORMHOLE)));
+}
 
+
 /**
  * Displays a "NewGrf Bug" error message for a engine, and pauses the game if not networking.
  * @param engine The engine that caused the problem
@@ -672,7 +680,7 @@
 
 	/* sometimes, eg. for disaster vehicles, when company bankrupts, when removing crashed/flooded vehicles,
 	 * it may happen that vehicle chain is deleted when visible */
-	if (!(this->vehstatus & VS_HIDDEN)) MarkSingleVehicleDirty(this);
+	if (this->IsDrawn()) MarkSingleVehicleDirty(this);
 
 	Vehicle *v = this->Next();
 	this->SetNext(NULL);
@@ -825,7 +833,7 @@
 	if (v->vehstatus & VS_DEFPAL) pal = (v->vehstatus & VS_CRASHED) ? PALETTE_CRASH : GetVehiclePalette(v);
 
 	AddSortableSpriteToDraw(image, pal, v->x_pos + v->x_offs, v->y_pos + v->y_offs,
-		v->x_extent, v->y_extent, v->z_extent, v->z_pos, (v->vehstatus & VS_SHADOW) != 0);
+		v->x_extent, v->y_extent, v->z_extent, v->z_pos, (v->vehstatus & (VS_SHADOW | VS_HIDDEN)));
 }
 
 void ViewportAddVehicles(DrawPixelInfo *dpi)
@@ -862,7 +870,7 @@
 			const Vehicle *v = _vehicle_position_hash[x + y]; // already masked & 0xFFF
 
 			while (v != NULL) {
-				if (!(v->vehstatus & VS_HIDDEN) &&
+				if (v->IsDrawn() &&
 						l <= v->coord.right &&
 						t <= v->coord.bottom &&
 						r >= v->coord.left &&
@@ -890,7 +898,7 @@
 	y = ScaleByZoom(y, vp->zoom) + vp->virtual_top;
 
 	FOR_ALL_VEHICLES(v) {
-		if ((v->vehstatus & (VS_HIDDEN | VS_UNCLICKABLE)) == 0 &&
+		if (v->IsDrawn() && !(v->vehstatus & VS_UNCLICKABLE) &&
 				x >= v->coord.left && x <= v->coord.right &&
 				y >= v->coord.top && y <= v->coord.bottom) {
 
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 19523)
+++ src/viewport.cpp	(working copy)
@@ -1127,8 +1127,7 @@
 	const Town *t;
 	FOR_ALL_TOWNS(t) {
 		ViewportAddString(dpi, ZOOM_LVL_OUT_4X, &t->sign,
-				_settings_client.gui.population_in_label ? STR_VIEWPORT_TOWN_POP : STR_VIEWPORT_TOWN,
-				STR_VIEWPORT_TOWN_TINY_WHITE, STR_VIEWPORT_TOWN_TINY_BLACK,
+				t->Label(), t->SmallLabel(), STR_VIEWPORT_TOWN_TINY_BLACK,
 				t->index, t->population);
 	}
 }
Index: src/signs_gui.cpp
===================================================================
--- src/signs_gui.cpp	(revision 19523)
+++ src/signs_gui.cpp	(working copy)
@@ -29,12 +29,29 @@
 #include "table/strings.h"
 #include "table/sprites.h"
 
+/**
+ * Struct containing the necessary information to decide if a sign should
+ * be filtered out or not.
+ */
+struct FilterInfo {
+	const char *string;
+	bool case_sensitive;
+};
+
 struct SignList {
-	typedef GUIList<const Sign *> GUISignList;
+	typedef GUIList<const Sign *, FilterInfo> GUISignList;
 
 	static const Sign *last_sign;
 	GUISignList signs;
 
+	char filter_string[MAX_LENGTH_SIGN_NAME_BYTES];
+	static bool match_case;
+
+	SignList()
+	{
+		filter_string[0] = '\0';
+	}
+
 	void BuildSignsList()
 	{
 		if (!this->signs.NeedRebuild()) return;
@@ -46,6 +63,7 @@
 		const Sign *si;
 		FOR_ALL_SIGNS(si) *this->signs.Append() = si;
 
+		this->FilterSignList();
 		this->signs.Compact();
 		this->signs.RebuildDone();
 	}
@@ -75,24 +93,60 @@
 		/* Reset the name sorter sort cache */
 		this->last_sign = NULL;
 	}
+
+	/** Filter sign list by sign name (case sensitive setting in FilterInfo) */
+	static bool CDECL SignNameFilter(const Sign * const *a, FilterInfo filter_info)
+	{
+		/* Get sign string */
+		char buf1[MAX_LENGTH_SIGN_NAME_BYTES];
+		SetDParam(0, (*a)->index);
+		GetString(buf1, STR_SIGN_NAME, lastof(buf1));
+
+		return (filter_info.case_sensitive ? strstr(buf1, filter_info.string) : strcasestr(buf1, filter_info.string)) != NULL;
+	}
+
+	/** Filter out signs from the sign list that does not match the name filter */
+	void FilterSignList()
+	{
+		FilterInfo filter_info = {this->filter_string, this->match_case};
+		this->signs.Filter(&SignNameFilter, filter_info);
+	}
 };
 
 const Sign *SignList::last_sign = NULL;
+bool SignList::match_case = false;
 
 /** Enum referring to the widgets of the sign list window */
 enum SignListWidgets {
 	SLW_CAPTION,
 	SLW_LIST,
 	SLW_SCROLLBAR,
+	SLW_FILTER_TEXT,
+	SLW_FILTER_MATCH_CASE_BTN,
+	SLW_FILTER_CLEAR_BTN,
 };
 
-struct SignListWindow : Window, SignList {
+struct SignListWindow : QueryStringBaseWindow, SignList {
+private:
+	int selected_sign;
+
+public:
 	int text_offset; // Offset of the sign text relative to the left edge of the SLW_LIST widget.
 
-	SignListWindow(const WindowDesc *desc, WindowNumber window_number) : Window()
+	SignListWindow(const WindowDesc *desc, WindowNumber window_number) : QueryStringBaseWindow(MAX_LENGTH_SIGN_NAME_BYTES)
 	{
 		this->InitNested(desc, window_number);
+		this->SetWidgetLoweredState(SLW_FILTER_MATCH_CASE_BTN, SignList::match_case);
 
+		/* Initialize the text edit widget */
+		this->afilter = CS_ALPHANUMERAL;
+		InitializeTextBuffer(&this->text, this->edit_str_buf, MAX_LENGTH_SIGN_NAME_BYTES, MAX_LENGTH_SIGN_NAME_PIXELS); // Allow MAX_LENGTH_SIGN_NAME_BYTES characters (including \0)
+		ClearFilterTextWidget();
+
+		/* Initialize the filtering variables */
+		this->SetFilterString("");
+		this->selected_sign = -1;
+
 		/* Create initial list. */
 		this->signs.ForceRebuild();
 		this->signs.ForceResort();
@@ -101,9 +155,65 @@
 		this->vscroll.SetCount(this->signs.Length());
 	}
 
+	/**
+	 * Empties the string buffer that is edited by the filter text edit widget.
+	 * It also triggers the redraw of the widget so it become visible that the string has been made empty.
+	 */
+	void ClearFilterTextWidget()
+	{
+		this->edit_str_buf[0] = '\0';
+		UpdateTextBufferSize(&this->text);
+
+		this->SetWidgetDirty(SLW_FILTER_TEXT);
+	}
+
+	/**
+	 * This function sets the filter string of the sign list. The contents of
+	 * the edit widget is not updated by this function. Depending on if the
+	 * new string is zero-length or not the clear button is made
+	 * disabled/enabled. The sign list is updated according to the new filter.
+	 */
+	void SetFilterString(const char *new_filter_string)
+	{
+		/* check if there is a new filter string */
+		if (!StrEmpty(new_filter_string)) {
+			/* Copy new filter string */
+			strecpy(this->filter_string, new_filter_string, lastof(this->filter_string));
+			this->filter_string[strlen(new_filter_string)] = '\0';
+
+			this->signs.SetFilterState(true);
+
+			this->EnableWidget(SLW_FILTER_CLEAR_BTN);
+		} else {
+			/* There is no new string -> clear this->filter_string */
+			this->filter_string[0] = '\0';
+
+			this->signs.SetFilterState(false);
+			this->DisableWidget(SLW_FILTER_CLEAR_BTN);
+			this->RaiseWidget(SLW_FILTER_CLEAR_BTN); // If a button is made disabled when it is lowered, it will not be raised by itself.
+		}
+
+		/* Repaint the clear button since its disabled state may have changed */
+		this->SetWidgetDirty(SLW_FILTER_CLEAR_BTN);
+
+		this->selected_sign = Clamp(this->selected_sign, -1, this->signs.Length() - 1); // Can happen when a new filter is used.
+
+		/* Rebuild the list of signs */
+		this->InvalidateData();
+	}
+
+	/** Make sure that the currently selected sign is within the visible part of the sign list */
+	void ScrollToSelected()
+	{
+		if (this->selected_sign == -1 || (uint)this->selected_sign >= this->signs.Length() ) return;
+
+		this->vscroll.ScrollTowards(this->selected_sign);
+ 	}
+
 	virtual void OnPaint()
 	{
 		this->DrawWidgets();
+		if (!this->IsShaded()) this->DrawEditBox(SLW_FILTER_TEXT);
 	}
 
 	virtual void DrawWidget(const Rect &r, int widget) const
@@ -130,7 +240,7 @@
 					if (si->owner != OWNER_NONE) DrawCompanyIcon(si->owner, icon_left, y + sprite_offset_y);
 
 					SetDParam(0, si->index);
-					DrawString(text_left, text_right, y, STR_SIGN_NAME, TC_YELLOW);
+					DrawString(text_left, text_right, y, STR_SIGN_NAME, this->selected_sign == i ? TC_BLUE : TC_YELLOW);
 					y += this->resize.step_height;
 				}
 				break;
@@ -145,18 +255,152 @@
 
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
-		if (widget == SLW_LIST) {
-			uint id_v = (pt.y - this->GetWidget<NWidgetBase>(SLW_LIST)->pos_y - WD_FRAMERECT_TOP) / this->resize.step_height;
+		switch (widget) {
+			case SLW_LIST: { // <- needed or the compiler will complain
+				uint id_v = (pt.y - this->GetWidget<NWidgetBase>(SLW_LIST)->pos_y - WD_FRAMERECT_TOP) / this->resize.step_height;
 
-			if (id_v >= this->vscroll.GetCapacity()) return;
-			id_v += this->vscroll.GetPosition();
-			if (id_v >= this->vscroll.GetCount()) return;
+				if (id_v >= this->vscroll.GetCapacity()) return;
+				id_v += this->vscroll.GetPosition();
+				if (id_v >= this->vscroll.GetCount()) return;
 
-			const Sign *si = this->signs[id_v];
-			ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+				const Sign *si = this->signs[id_v];
+				ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+				break;
+			}
+			case SLW_FILTER_CLEAR_BTN:
+				this->ClearFilterTextWidget();
+				this->SetFilterString(0);
+				this->selected_sign = -1;
+				break;
+
+			case SLW_FILTER_MATCH_CASE_BTN:
+				SignList::match_case = !SignList::match_case;
+				if (SignList::match_case) {
+					this->LowerWidget(SLW_FILTER_MATCH_CASE_BTN);
+				} else {
+					this->RaiseWidget(SLW_FILTER_MATCH_CASE_BTN);
+				}
+				/* Rebuild the list of signs */
+				this->InvalidateData();
+				break;
 		}
 	}
 
+	virtual void OnTimeout()
+	{
+		if (!this->IsWidgetDisabled(SLW_FILTER_CLEAR_BTN)) {
+			this->RaiseWidget(SLW_FILTER_CLEAR_BTN);
+			this->SetWidgetDirty(SLW_FILTER_CLEAR_BTN);
+		}
+	}
+
+	virtual EventState OnKeyPress(uint16 key, uint16 keycode)
+	{
+		EventState state = ES_NOT_HANDLED;
+		switch (this->HandleEditBoxKey(SLW_FILTER_TEXT, key, keycode, state)) {
+			case HEBR_EDITING:
+				this->SetFilterString(this->text.buf);
+				break;
+
+			case HEBR_CONFIRM: { // Enter pressed -> goto selected sign in list (or first if no selected sign)
+				uint n_signs = this->signs.Length();
+				if (n_signs >= 1) {
+					uint sign_id = this->selected_sign == -1 || (uint)this->selected_sign >= n_signs ? 0 : this->selected_sign;
+					if (n_signs > sign_id) {
+						const Sign *si = this->signs[sign_id];
+						ScrollMainWindowToTile(TileVirtXY(si->x, si->y));
+					}
+				}
+				return state;
+			}
+
+			case HEBR_CANCEL: // ESC pressed, clear filter
+				this->ClearFilterTextWidget(); // Empty the text in the EditBox widget
+				this->SetFilterString(0);      // Use empty text as filter text (= view all signs)
+				this->UnfocusFocusedWidget();  // Unfocus the text box
+				this->selected_sign = -1;      // Deselect sign in sign list
+				return state;
+
+			case HEBR_NOT_FOCUSED: // The filter text box is not globaly focused
+				if (keycode == 'F') { // Hotkey to enable filter box
+					this->SetFocusedWidget(SLW_FILTER_TEXT);
+					SetFocusedWindow(this); // The user has asked to give focus to the text box, so make sure this window is focused.
+					state = ES_HANDLED;
+				}
+				break;
+
+			default:
+				NOT_REACHED();
+		}
+
+		if (state == ES_HANDLED) OnOSKInput(SLW_FILTER_TEXT);
+
+		/* Selection of signs using arrow up/down , page up/down and ctrl + home/end keys. 
+		 * This only happens if the edit box is globaly focused.
+		 */
+		if (state != ES_HANDLED && this->IsWidgetGloballyFocused(SLW_FILTER_TEXT)) {
+			switch (keycode) {
+				case WKC_UP:
+					/* scroll up by one */
+					this->selected_sign--;
+					if (this->selected_sign < 0) this->selected_sign = 0;
+					state = ES_HANDLED;
+					break;
+
+				case WKC_DOWN:
+					/* scroll down by one */
+					this->selected_sign++;
+					if (this->selected_sign < 0) this->selected_sign = 0;
+					state = ES_HANDLED;
+					break;
+
+				case WKC_PAGEUP:
+					/* scroll up a page */
+					this->selected_sign = max(0, this->selected_sign - (int)this->vscroll.GetCapacity());
+					state = ES_HANDLED;
+					break;
+
+				case WKC_PAGEDOWN:
+					/* scroll down a page */
+					this->selected_sign = min(this->selected_sign + this->vscroll.GetCapacity(), (int)this->signs.Length() - 1);
+					state = ES_HANDLED;
+					break;
+
+				case WKC_CTRL | WKC_HOME: // Home key without ctrl is processed by the edit box
+					/* jump to beginning */
+					this->selected_sign = 0;
+					state = ES_HANDLED;
+					break;
+
+				case WKC_CTRL | WKC_END: // End key without ctrl is processed by the edit box
+					/* jump to end */
+					this->selected_sign = (int)this->signs.Length() - 1;
+					state = ES_HANDLED;
+					break;
+			}
+
+			if (state == ES_HANDLED) {
+				/* Make sure the selected sign is visible */
+				this->ScrollToSelected();
+
+				/* Repaint the window */
+				this->SetDirty();
+			}
+		}
+
+		return state;
+	}
+
+	virtual void OnOSKInput(int widget)
+	{
+		if (widget == SLW_FILTER_TEXT) this->SetFilterString(this->text.buf);
+	}
+
+	virtual void OnMouseLoop()
+	{
+		this->HandleEditBox(SLW_FILTER_TEXT);
+ 	}
+
 	virtual void OnResize()
 	{
 		this->vscroll.SetCapacityFromWidget(this, SLW_LIST, WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM);
@@ -209,9 +453,14 @@
 							SetResize(1, 10), SetFill(1, 0), EndContainer(),
 		NWidget(NWID_VERTICAL),
 			NWidget(WWT_SCROLLBAR, COLOUR_GREY, SLW_SCROLLBAR),
-			NWidget(WWT_RESIZEBOX, COLOUR_GREY),
 		EndContainer(),
 	EndContainer(),
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_EDITBOX, COLOUR_GREY, SLW_FILTER_TEXT), SetMinimalSize(80, 12), SetResize(1, 0), SetFill(1, 0),
+		NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, SLW_FILTER_MATCH_CASE_BTN), SetDataTip(STR_FILTER_MATCH_CASE, STR_NULL),
+		NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, SLW_FILTER_CLEAR_BTN), SetDataTip(STR_FILTER_CLEAR, STR_NULL),
+		NWidget(WWT_RESIZEBOX, COLOUR_GREY),
+	EndContainer(),
 };
 
 static const WindowDesc _sign_list_desc(
Index: src/vehicle_base.h
===================================================================
--- src/vehicle_base.h	(revision 19523)
+++ src/vehicle_base.h	(working copy)
@@ -210,6 +210,12 @@
 	virtual const char *GetTypeString() const { return "base vehicle"; }
 
 	/**
+	 * Is this vehicle drawn?
+	 * @return true if it is drawn
+	 */
+	bool IsDrawn() const;
+
+	/**
 	 * Marks the vehicles to be redrawn and updates cached variables
 	 *
 	 * This method marks the area of the vehicle on the screen as dirty.
Index: src/rail_map.h
===================================================================
--- src/rail_map.h	(revision 19523)
+++ src/rail_map.h	(working copy)
@@ -563,4 +563,27 @@
 	_me[t].m7 = 0;
 }
 
+
+static inline void IncreaseStuckCounter(TileIndex t)
+{
+	if (!IsTileType(t, MP_RAILWAY)) return;
+	if (_me[t].m7 == 255) return;
+	_me[t].m7++;
+}
+
+
+static inline void ReduceStuckCounter(TileIndex t)
+{
+	if (!IsTileType(t, MP_RAILWAY)) return;
+	_me[t].m7 -= _me[t].m7/4;
+}
+
+
+static inline byte GetStuckCounter(TileIndex t)
+{
+	if (!IsTileType(t, MP_RAILWAY)) return 0;
+	return _me[t].m7;
+
+}
+
 #endif /* RAIL_MAP_H */
Index: findversion.sh
===================================================================
--- findversion.sh	(revision 19523)
+++ findversion.sh	(working copy)
@@ -121,4 +121,4 @@
 	REV="${REV}-$BRANCH"
 fi
 
-echo "$REV	$REV_NR	$MODIFIED	$CLEAN_REV"
+echo "r$REV_NR	$REV_NR	$MODIFIED	$CLEAN_REV"
