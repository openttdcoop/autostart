diff -r ebfdcb643889 -r 09346b82f96a config.lib
--- config.lib	Thu Apr 30 12:11:51 2009 +0000
+++ config.lib	Thu Apr 30 17:42:12 2009 +0200
@@ -868,7 +868,7 @@
 			log 1 "WARNING: in most cases it is not safe for network use"
 			log 1 "WARNING: USE WITH CAUTION!"
 
-			sleep 5
+		#	sleep 5
 		elif [ -f "$ROOT_DIR/version" ]; then
 			revision="`cat $ROOT_DIR/version`"
 
diff -r ebfdcb643889 -r 09346b82f96a projects/openttd_vs80.vcproj
--- projects/openttd_vs80.vcproj	Thu Apr 30 12:11:51 2009 +0000
+++ projects/openttd_vs80.vcproj	Thu Apr 30 17:42:12 2009 +0200
@@ -740,6 +740,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1496,6 +1500,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ebfdcb643889 -r 09346b82f96a projects/openttd_vs90.vcproj
--- projects/openttd_vs90.vcproj	Thu Apr 30 12:11:51 2009 +0000
+++ projects/openttd_vs90.vcproj	Thu Apr 30 17:42:12 2009 +0200
@@ -737,6 +737,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle.cpp"
 				>
 			</File>
@@ -1493,6 +1497,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\timelapse.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\timetable.h"
 				>
 			</File>
diff -r ebfdcb643889 -r 09346b82f96a source.list
--- source.list	Thu Apr 30 12:11:51 2009 +0000
+++ source.list	Thu Apr 30 17:42:12 2009 +0200
@@ -95,6 +95,7 @@
 	thread_none.cpp
 #end
 tile_map.cpp
+timelapse.cpp
 #if WIN32
 #else
 	#if WINCE
@@ -304,6 +305,7 @@
 tile_type.h
 tilehighlight_func.h
 tilehighlight_type.h
+timelapse.h
 timetable.h
 toolbar_gui.h
 town.h
diff -r ebfdcb643889 -r 09346b82f96a src/command.cpp
--- src/command.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/command.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -9,6 +9,8 @@
 #include "gui.h"
 #include "command_func.h"
 #include "network/network.h"
+#include "network/network_base.h"
+#include "network/network_func.h"
 #include "genworld.h"
 #include "newgrf_storage.h"
 #include "strings_func.h"
@@ -20,6 +22,9 @@
 #include "company_func.h"
 #include "company_base.h"
 #include "signal_func.h"
+#include "window_func.h"
+#include "viewport_func.h"
+#include "timelapse.h"
 
 #include "table/strings.h"
 
@@ -468,9 +473,9 @@
  * @param my_cmd indicator if the command is from a company or server (to display error messages for a user)
  * @return true if the command succeeded, else false
  */
-bool DoCommandP(const CommandContainer *container, bool my_cmd)
+bool DoCommandP(const CommandContainer *container, ClientID client)
 {
-	return DoCommandP(container->tile, container->p1, container->p2, container->cmd, container->callback, container->text, my_cmd);
+	return DoCommandP(container->tile, container->p1, container->p2, container->cmd, container->callback, container->text, client);
 }
 
 /*!
@@ -488,8 +493,10 @@
  * @param my_cmd indicator if the command is from a company or server (to display error messages for a user)
  * @return true if the command succeeded, else false
  */
-bool DoCommandP(TileIndex tile, uint32 p1, uint32 p2, uint32 cmd, CommandCallback *callback, const char *text, bool my_cmd)
+bool DoCommandP(TileIndex tile, uint32 p1, uint32 p2, uint32 cmd, CommandCallback *callback, const char *text, ClientID client)
 {
+	bool my_cmd = (client != INVALID_CLIENT_ID && client == _network_own_client_id) || (!_networking && _current_company == _local_company);
+
 	assert(_docommand_recursive == 0);
 
 	CommandCost res, res2;
@@ -589,9 +596,21 @@
 #endif /* ENABLE_NETWORK */
 	DEBUG(desync, 1, "cmd: %08x; %08x; %1x; %06x; %08x; %08x; %04x; %s\n", _date, _date_fract, (int)_current_company, tile, p1, p2, cmd & ~CMD_NETWORK_COMMAND, text);
 
+	TimelapseCommandCheck();
+
 	/* update last build coordinate of company. */
 	if (tile != 0 && IsValidCompanyID(_current_company)) {
 		GetCompany(_current_company)->last_build_coordinate = tile;
+		if (client != INVALID_CLIENT_ID) {
+			NetworkClientInfo *ci = NetworkFindClientInfoFromClientID(client);
+			if (ci != NULL && IsValidCompanyID(ci->client_playas) && ci->client_playas == _current_company) {
+				if (ci->last_build_coordinate != tile) {
+					ci->last_build_coordinate = tile;
+					Window *w = FindWindowById(WC_BIG_BROTHER_WINDOW, client);
+					if (w != NULL) ScrollWindowTo(TileX(tile) * TILE_SIZE + TILE_SIZE / 2, TileY(tile) * TILE_SIZE + TILE_SIZE / 2, -1, w, true);
+				}
+			}
+		}
 	}
 
 	/* Actually try and execute the command. If no cost-type is given
diff -r ebfdcb643889 -r 09346b82f96a src/command_func.h
--- src/command_func.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/command_func.h	Thu Apr 30 17:42:12 2009 +0200
@@ -6,6 +6,7 @@
 #define COMMAND_FUNC_H
 
 #include "command_type.h"
+#include "network/network_func.h"
 
 /**
  * Checks if a command failes.
@@ -59,8 +60,8 @@
 /**
  * Execute a network safe DoCommand function
  */
-bool DoCommandP(TileIndex tile, uint32 p1, uint32 p2, uint32 cmd, CommandCallback *callback = NULL, const char *text = NULL, bool my_cmd = true);
-bool DoCommandP(const CommandContainer *container, bool my_cmd = true);
+bool DoCommandP(TileIndex tile, uint32 p1, uint32 p2, uint32 cmd, CommandCallback *callback = NULL, const char *text = NULL, ClientID client = _network_own_client_id);
+bool DoCommandP(const CommandContainer *container, ClientID client = _network_own_client_id);
 
 #ifdef ENABLE_NETWORK
 
diff -r ebfdcb643889 -r 09346b82f96a src/date.cpp
--- src/date.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/date.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -15,6 +15,7 @@
 #include "vehicle_base.h"
 #include "debug.h"
 #include "rail_gui.h"
+#include "timelapse.h"
 #include "saveload/saveload.h"
 
 Year      _cur_year;   ///< Current year, starting at 0
@@ -230,6 +231,7 @@
 	if (_game_mode != GM_MENU) {
 		InvalidateWindowWidget(WC_STATUS_BAR, 0, 0);
 		EnginesDailyLoop();
+		TimelapseDailyCheck();
 	}
 
 	/* check if we entered a new month? */
diff -r ebfdcb643889 -r 09346b82f96a src/gui.h
--- src/gui.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/gui.h	Thu Apr 30 17:42:12 2009 +0200
@@ -12,6 +12,7 @@
 #include "tile_type.h"
 #include "strings_type.h"
 #include "transport_type.h"
+#include "network/network_type.h"
 
 /* main_gui.cpp */
 void CcPlaySound10(bool success, TileIndex tile, uint32 p1, uint32 p2);
@@ -62,6 +63,7 @@
 
 void ShowSmallMap();
 void ShowExtraViewPortWindow(TileIndex tile = INVALID_TILE);
+void ShowBigBrotherWindow(ClientID cid);
 
 void BuildFileList();
 void SetFiosType(const byte fiostype);
diff -r ebfdcb643889 -r 09346b82f96a src/lang/english.txt
--- src/lang/english.txt	Thu Apr 30 12:11:51 2009 +0000
+++ src/lang/english.txt	Thu Apr 30 17:42:12 2009 +0200
@@ -706,6 +706,7 @@
 STR_MAP_MENU_EXTRA_VIEW_PORT                                    :Extra viewport
 STR_MAP_MENU_SIGN_LIST                                          :Sign list
 STR_TOWN_POPULATION                                             :{BLACK}World population: {COMMA}
+STR_BIG_BROTHER_CLIENT_NAME                                     :{WHITE}{CLIENTNAME}
 STR_EXTRA_VIEW_PORT_TITLE                                       :{WHITE}Viewport {COMMA}
 STR_EXTRA_VIEW_MOVE_VIEW_TO_MAIN                                :{BLACK}Copy to viewport
 STR_EXTRA_VIEW_MOVE_VIEW_TO_MAIN_TT                             :{BLACK}Copy the location of the global view to this viewport
@@ -1089,6 +1090,37 @@
 STR_CONFIG_SETTING_CYCLE_SIGNAL_NORMAL                          :Block signals only
 STR_CONFIG_SETTING_CYCLE_SIGNAL_PBS                             :Path signals only
 STR_CONFIG_SETTING_CYCLE_SIGNAL_ALL                             :All
+STR_CONFIG_SETTING_IMP_NEWSTATIONS_GUI                          :{LTBLUE}Enable previews for station building: {ORANGE}{STRING1}
+
+STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS                        :{ORANGE}Automatic Screenshots
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN                            :{LTBLUE}Take giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic giant screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic giant screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic giant screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL_8X                 :8x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN                            :{LTBLUE}Take local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_OFF                        :Off
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS                       :Every x days
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_COMMANDS                   :Every y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_DAYS_COMMANDS              :Every x days and y commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES                      :{LTBLUE}Local screenshots are taken at: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS                :Signs
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_STATIONS             :Stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES_SIGNS_AND_STATIONS   :Signs and stations
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL                   :{LTBLUE}Interval for automatic local screenshots: {ORANGE}{STRING1} day(s)
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS               :{LTBLUE}Command limit for automatic local screenshots: {ORANGE}{STRING1} commands
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL                    :{LTBLUE}Zoom level for automatic local screenshots: {ORANGE}{STRING1}
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_NORMAL             :Normal
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_2X                 :2x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_4X                 :4x
+STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL_8X                 :8x
 
 STR_CONFIG_SETTING_TOWN_LAYOUT                                  :{LTBLUE}Road layout for new towns: {ORANGE}{STRING1}
 STR_CONFIG_SETTING_TOWN_LAYOUT_DEFAULT                          :original
@@ -1519,6 +1551,7 @@
 STR_NETWORK_CLIENTLIST_SPEAK_TO_ALL                             :Speak to all
 STR_NETWORK_CLIENTLIST_SPEAK_TO_COMPANY                         :Speak to company
 STR_NETWORK_CLIENTLIST_SPEAK_TO_CLIENT                          :Private message
+STR_NETWORK_CLIENTLIST_OPEN_WINDOW                              :Open window
 
 
 STR_NETWORK_SEND                                                :{BLACK}Send
@@ -3085,6 +3118,7 @@
 STR_NEWGRF_TOGGLE_PALETTE_TIP                                   :{BLACK}Toggle the palette of the selected NewGRF.{}Do this when the graphics from this NewGRF look pink in-game
 STR_NEWGRF_SET_PARAMETERS                                       :{BLACK}Set parameters
 STR_NEWGRF_FILENAME                                             :{BLACK}Filename: {SILVER}{RAW_STRING}
+STR_NEWGRF_NAME                                                 :{BLACK}Name: {SILVER}{RAW_STRING}
 STR_NEWGRF_PALETTE                                              :{BLACK}Palette: {SILVER}{RAW_STRING}
 STR_NEWGRF_GRF_ID                                               :{BLACK}GRF ID: {SILVER}{RAW_STRING}
 STR_NEWGRF_MD5SUM                                               :{BLACK}MD5sum: {SILVER}{RAW_STRING}
@@ -3120,19 +3154,23 @@
 STR_NEWGRF_ADD_TIP                                              :{BLACK}Add a NewGRF file to the list
 STR_NEWGRF_REMOVE                                               :{BLACK}Remove
 STR_NEWGRF_REMOVE_TIP                                           :{BLACK}Remove the selected NewGRF file from the list
-STR_NEWGRF_MOVEUP                                               :{BLACK}Move Up
+STR_NEWGRF_JOINT_ADD                                            :{BLACK}>>
+STR_NEWGRF_JOINT_REMOVE                                         :{BLACK}<<
+STR_NEWGRF_TOGGLE_SHOW                                          :{BLACK}Disp. Mode
+STR_NEWGRF_TOGGLE_SHOW_TIP                                      :{BLACK}Toggles filtering of already selected grfs in the left list. Ctrl-click toggles show file names in stead of grf names.
 STR_NEWGRF_MOVEUP_TIP                                           :{BLACK}Move the selected NewGRF file up the list
-STR_NEWGRF_MOVEDOWN                                             :{BLACK}Move Down
+STR_NEWGRF_MOVEUP                                               :{BLACK}Up
+STR_NEWGRF_MOVEDOWN                                             :{BLACK}Down
 STR_NEWGRF_MOVEDOWN_TIP                                         :{BLACK}Move the selected NewGRF file down the list
 STR_NEWGRF_FILE_TIP                                             :{BLACK}A list of the NewGRF files that are installed. Click a file to change its parameters
 STR_NEWGRF_PARAMETER                                            :{BLACK}Parameters: {SILVER}{STRING1}
 STR_NEWGRF_PARAMETER_QUERY                                      :{BLACK}Enter NewGRF parameters
 STR_NEWGRF_NO_INFO                                              :{BLACK}No information available
 
-STR_NEWGRF_ADD_CAPTION                                          :{WHITE}Available NewGRF files
+STR_NEWGRF_ADD_CAPTION                                          :{WHITE}Available NewGRFs
 STR_NEWGRF_ADD_FILE                                             :{BLACK}Add to selection
 STR_NEWGRF_ADD_FILE_TIP                                         :{BLACK}Add the selected NewGRF file to your configuration
-STR_NEWGRF_RESCAN_FILES                                         :{BLACK}Rescan files
+STR_NEWGRF_RESCAN_FILES                                         :{BLACK}Rescan
 STR_NEWGRF_RESCAN_FILES_TIP                                     :{BLACK}Update the list of available NewGRF files
 STR_NEWGRF_DUPLICATE_GRFID                                      :{WHITE}Can't add file: duplicate GRF ID
 
diff -r ebfdcb643889 -r 09346b82f96a src/main_gui.cpp
--- src/main_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/main_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -26,6 +26,7 @@
 #include "toolbar_gui.h"
 #include "statusbar_gui.h"
 #include "tilehighlight_func.h"
+#include "gui.h"
 
 #include "network/network.h"
 #include "network/network_func.h"
@@ -306,6 +307,10 @@
 			case 'X':
 				ResetRestoreAllTransparency();
 				break;
+				
+			case 'G':
+				PlaceLandBlockInfo();
+				break;
 
 #ifdef ENABLE_NETWORK
 			case WKC_RETURN: case 'T': // smart chat; send to team if any, otherwise to all
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_base.h
--- src/network/network_base.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_base.h	Thu Apr 30 17:42:12 2009 +0200
@@ -9,6 +9,8 @@
 
 #include "network_type.h"
 #include "../oldpool.h"
+#include "../tile_type.h"
+#include "core/address.h"
 
 DECLARE_OLD_POOL(NetworkClientInfo, NetworkClientInfo, NCI_BITS_PER_POOL_BLOCK, MAX_CLIENT_SLOTS >> NCI_BITS_PER_POOL_BLOCK);
 
@@ -20,6 +22,7 @@
 	NetworkAddress client_address;                  ///< IP-address of the client (so he can be banned)
 	Date join_date;                                 ///< Gamedate the client has joined
 	char unique_id[NETWORK_UNIQUE_ID_LENGTH];       ///< Every play sends an unique id so we can indentify him
+	TileIndex last_build_coordinate;
 
 	NetworkClientInfo(ClientID client_id = INVALID_CLIENT_ID) : client_id(client_id) {}
 	~NetworkClientInfo() { client_id = INVALID_CLIENT_ID; }
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_client.cpp
--- src/network/network_client.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_client.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -515,9 +515,15 @@
 			_password_game_seed = p->Recv_uint32();
 			p->Recv_string(_password_server_unique_id, sizeof(_password_server_unique_id));
 			if (MY_CLIENT->HasClientQuit()) return NETWORK_RECV_STATUS_MALFORMED_PACKET;
-
-		case NETWORK_GAME_PASSWORD:
-			ShowNetworkNeedPassword(type);
+	
+			if (_company_pw != NULL) _login_pw = _company_pw;
+			case NETWORK_GAME_PASSWORD:
+				if (_login_pw == NULL) {
+					ShowNetworkNeedPassword(type);
+				} else {
+					SEND_COMMAND(PACKET_CLIENT_PASSWORD)(type, _login_pw);
+					_login_pw = NULL;
+				}
 			return NETWORK_RECV_STATUS_OKAY;
 
 		default: return NETWORK_RECV_STATUS_MALFORMED_PACKET;
@@ -684,6 +690,7 @@
 	const char *err = MY_CLIENT->Recv_Command(p, &cp);
 	cp.frame    = p->Recv_uint32();
 	cp.my_cmd   = p->Recv_bool();
+	cp.client   = p->pos + 4 == p->size ? (ClientID)p->Recv_uint32() : (cp.my_cmd ? _network_own_client_id : INVALID_CLIENT_ID);
 	cp.next     = NULL;
 
 	if (err != NULL) {
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_command.cpp
--- src/network/network_command.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_command.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -72,6 +72,7 @@
 		 */
 		c.frame = _frame_counter_max + 1;
 		c.my_cmd = true;
+		c.client = _network_own_client_id;
 
 		NetworkAddCommandQueue(c);
 
@@ -113,7 +114,7 @@
 		/* We can execute this command */
 		_current_company = cp->company;
 		cp->cmd |= CMD_NETWORK_COMMAND;
-		DoCommandP(cp, cp->my_cmd);
+		DoCommandP(cp, cp->client);
 
 		_local_command_queue = _local_command_queue->next;
 		free(cp);
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_gui.cpp
--- src/network/network_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -1606,6 +1606,12 @@
 	ShowNetworkChatQueryWindow(DESTTYPE_BROADCAST, 0);
 }
 
+static void ClientList_OpenWindow(byte client_no)
+{
+	const NetworkClientInfo *ci = NetworkFindClientInfo(client_no);
+	if (ci != NULL && IsValidCompanyID(ci->client_playas)) ShowBigBrotherWindow(ci->client_id);
+}
+
 static void ClientList_None(byte client_no)
 {
 	/* No action ;) */
@@ -1643,6 +1649,9 @@
 		GetString(this->action[i], STR_NETWORK_CLIENTLIST_SPEAK_TO_ALL, lastof(this->action[i]));
 		this->proc[i++] = &ClientList_SpeakToAll;
 
+		GetString(this->action[i], STR_NETWORK_CLIENTLIST_OPEN_WINDOW, lastof(this->action[i]));
+		this->proc[i++] = &ClientList_OpenWindow;
+
 		if (_network_own_client_id != ci->client_id) {
 			/* We are no spectator and the company we want to give money to is no spectator and money gifts are allowed */
 			if (IsValidCompanyID(_network_playas) && IsValidCompanyID(ci->client_playas) && _settings_game.economy.give_money) {
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_internal.h
--- src/network/network_internal.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_internal.h	Thu Apr 30 17:42:12 2009 +0200
@@ -123,6 +123,9 @@
 
 void NetworkTCPQueryServer(NetworkAddress address);
 
+extern char *_login_pw;                      // login password from -p argument
+extern char *_company_pw;                    // company password from -P argument
+
 void GetBindAddresses(NetworkAddressList *addresses, uint16 port);
 void NetworkAddServer(const char *b);
 void NetworkRebuildHostList();
@@ -139,6 +142,7 @@
 	CompanyByte company; ///< company that is executing the command
 	uint32 frame;        ///< the frame in which this packet is executed
 	bool my_cmd;         ///< did the command originate from "me"
+	ClientID client;
 };
 
 void NetworkAddCommandQueue(CommandPacket cp, NetworkClientSocket *cs = NULL);
diff -r ebfdcb643889 -r 09346b82f96a src/network/network_server.cpp
--- src/network/network_server.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/network/network_server.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -483,6 +483,7 @@
 	cs->Send_Command(p, cp);
 	p->Send_uint32(cp->frame);
 	p->Send_bool  (cp->my_cmd);
+	p->Send_uint32(cp->client);
 
 	cs->Send_Packet(p);
 }
@@ -927,12 +928,14 @@
 			 *  first place. This filters that out. */
 			cp.callback = (new_cs != cs) ? NULL : callback;
 			cp.my_cmd = (new_cs == cs);
+			cp.client = ci->client_id;
 			NetworkAddCommandQueue(cp, new_cs);
 		}
 	}
 
 	cp.callback = NULL;
 	cp.my_cmd = false;
+	cp.client = ci->client_id;
 	NetworkAddCommandQueue(cp);
 }
 
diff -r ebfdcb643889 -r 09346b82f96a src/newgrf_gui.cpp
--- src/newgrf_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/newgrf_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -11,6 +11,7 @@
 #include "window_func.h"
 #include "string_func.h"
 #include "gfx_func.h"
+#include "tilehighlight_func.h"
 #include "gamelog.h"
 #include "settings_func.h"
 #include "widgets/dropdown_type.h"
@@ -45,7 +46,7 @@
 }
 
 
-static void ShowNewGRFInfo(const GRFConfig *c, uint x, uint y, uint w, uint bottom, bool show_params)
+static void ShowNewGRFInfo(const GRFConfig *c, uint x, uint y, uint w, uint bottom, bool show_params, bool show_filenames)
 {
 	char buff[256];
 
@@ -72,8 +73,8 @@
 
 	/* Draw filename or not if it is not known (GRF sent over internet) */
 	if (c->filename != NULL) {
-		SetDParamStr(0, c->filename);
-		y = DrawStringMultiLine(x, x + w, y, bottom, STR_NEWGRF_FILENAME);
+		SetDParamStr(0, (show_filenames) ? c->name : c->filename);
+		y = DrawStringMultiLine(x, x + w, y, bottom, (show_filenames) ? STR_NEWGRF_NAME : STR_NEWGRF_FILENAME);
 	}
 
 	/* Prepare and draw GRF ID */
@@ -117,169 +118,6 @@
 	}
 }
 
-
-/** Names of the add a newgrf window widgets. */
-enum AddNewGRFWindowWidgets {
-	ANGRFW_CLOSEBOX = 0,
-	ANGRFW_CAPTION,
-	ANGRFW_BACKGROUND,
-	ANGRFW_GRF_LIST,
-	ANGRFW_SCROLLBAR,
-	ANGRFW_GRF_INFO,
-	ANGRFW_ADD,
-	ANGRFW_RESCAN,
-	ANGRFW_RESIZE,
-};
-
-/**
- * Window for adding NewGRF files
- */
-struct NewGRFAddWindow : public Window {
-	GRFConfig **list;
-	const GRFConfig *sel;
-
-	NewGRFAddWindow(const WindowDesc *desc, GRFConfig **list) : Window(desc, 0)
-	{
-		this->list = list;
-		this->resize.step_height = 10;
-
-		this->FindWindowPlacementAndResize(desc);
-	}
-
-	virtual void OnPaint()
-	{
-		const GRFConfig *c;
-		const Widget *wl = &this->widget[ANGRFW_GRF_LIST];
-		int n = 0;
-
-		/* Count the number of GRFs */
-		for (c = _all_grfs; c != NULL; c = c->next) n++;
-
-		this->vscroll.cap = (wl->bottom - wl->top) / 10;
-		SetVScrollCount(this, n);
-
-		this->SetWidgetDisabledState(ANGRFW_ADD, this->sel == NULL || this->sel->IsOpenTTDBaseGRF());
-		this->DrawWidgets();
-
-		GfxFillRect(wl->left + 1, wl->top + 1, wl->right, wl->bottom, 0xD7);
-
-		uint y = wl->top + 1;
-		for (c = _all_grfs, n = 0; c != NULL && n < (this->vscroll.pos + this->vscroll.cap); c = c->next, n++) {
-			if (n >= this->vscroll.pos) {
-				bool h = c == this->sel;
-				const char *text = (c->name != NULL && !StrEmpty(c->name)) ? c->name : c->filename;
-
-				/* Draw selection background */
-				if (h) GfxFillRect(3, y, this->width - 15, y + 9, 156);
-				DrawString(4, this->width - 22, y, text, h ? TC_WHITE : TC_ORANGE);
-				y += 10;
-			}
-		}
-
-		if (this->sel != NULL) {
-			const Widget *wi = &this->widget[ANGRFW_GRF_INFO];
-			ShowNewGRFInfo(this->sel, wi->left + 2, wi->top + 2, wi->right - wi->left - 2, wi->bottom, false);
-		}
-	}
-
-	virtual void OnDoubleClick(Point pt, int widget)
-	{
-		if (widget == ANGRFW_GRF_LIST) this->OnClick(pt, ANGRFW_ADD);
-	}
-
-	virtual void OnClick(Point pt, int widget)
-	{
-		switch (widget) {
-			case ANGRFW_GRF_LIST: {
-				/* Get row... */
-				const GRFConfig *c;
-				uint i = (pt.y - this->widget[ANGRFW_GRF_LIST].top) / 10 + this->vscroll.pos;
-
-				for (c = _all_grfs; c != NULL && i > 0; c = c->next, i--) {}
-				this->sel = c;
-				this->SetDirty();
-				break;
-			}
-
-			case ANGRFW_ADD: // Add selection to list
-				if (this->sel != NULL) {
-					const GRFConfig *src = this->sel;
-					GRFConfig **list;
-
-					/* Find last entry in the list, checking for duplicate grfid on the way */
-					for (list = this->list; *list != NULL; list = &(*list)->next) {
-						if ((*list)->grfid == src->grfid) {
-							ShowErrorMessage(INVALID_STRING_ID, STR_NEWGRF_DUPLICATE_GRFID, 0, 0);
-							return;
-						}
-					}
-
-					/* Copy GRF details from scanned list */
-					GRFConfig *c = CallocT<GRFConfig>(1);
-					*c = *src;
-					c->filename = strdup(src->filename);
-					if (src->name      != NULL) c->name      = strdup(src->name);
-					if (src->info      != NULL) c->info      = strdup(src->info);
-					c->next = NULL;
-
-					/* Append GRF config to configuration list */
-					*list = c;
-
-					DeleteWindowByClass(WC_SAVELOAD);
-					InvalidateWindowData(WC_GAME_OPTIONS, 0);
-				}
-				break;
-
-			case ANGRFW_RESCAN: // Rescan list
-				this->sel = NULL;
-				ScanNewGRFFiles();
-				this->SetDirty();
-				break;
-		}
-	}
-};
-
-/* Widget definition for the add a newgrf window */
-static const Widget _newgrf_add_dlg_widgets[] = {
-{   WWT_CLOSEBOX,    RESIZE_NONE,  COLOUR_GREY,   0,  10,   0,  13, STR_BLACK_CROSS,         STR_TOOLTIP_CLOSE_WINDOW },             // ANGRFW_CLOSEBOX
-{    WWT_CAPTION,   RESIZE_RIGHT,  COLOUR_GREY,  11, 306,   0,  13, STR_NEWGRF_ADD_CAPTION,  STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS },   // ANGRFW_CAPTION
-{      WWT_PANEL,      RESIZE_RB,  COLOUR_GREY,   0, 294,  14, 121, 0x0,                     STR_NULL },                             // ANGRFW_BACKGROUND
-{      WWT_INSET,      RESIZE_RB,  COLOUR_GREY,   2, 292,  16, 119, 0x0,                     STR_NULL },                             // ANGRFW_GRF_LIST
-{  WWT_SCROLLBAR,     RESIZE_LRB,  COLOUR_GREY, 295, 306,  14, 121, 0x0,                     STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST }, // ANGRFW_SCROLLBAR
-{      WWT_PANEL,     RESIZE_RTB,  COLOUR_GREY,   0, 306, 122, 224, 0x0,                     STR_NULL },                             // ANGRFW_GRF_INFO
-{ WWT_PUSHTXTBTN,     RESIZE_RTB,  COLOUR_GREY,   0, 146, 225, 236, STR_NEWGRF_ADD_FILE,     STR_NEWGRF_ADD_FILE_TIP },              // ANGRFW_ADD
-{ WWT_PUSHTXTBTN,    RESIZE_LRTB,  COLOUR_GREY, 147, 294, 225, 236, STR_NEWGRF_RESCAN_FILES, STR_NEWGRF_RESCAN_FILES_TIP },          // ANGRFW_RESCAN
-{  WWT_RESIZEBOX,    RESIZE_LRTB,  COLOUR_GREY, 295, 306, 225, 236, 0x0,                     STR_RESIZE_BUTTON },                    // ANGRFW_RESIZE
-{   WIDGETS_END },
-};
-
-static const NWidgetPart _nested_newgrf_add_dlg_widgets[] = {
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_CLOSEBOX, COLOUR_GREY, ANGRFW_CLOSEBOX),
-		NWidget(WWT_CAPTION, COLOUR_GREY, ANGRFW_CAPTION), SetDataTip(STR_NEWGRF_ADD_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS),
-	EndContainer(),
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_PANEL, COLOUR_GREY, ANGRFW_BACKGROUND),
-			NWidget(WWT_INSET, COLOUR_GREY, ANGRFW_GRF_LIST), SetMinimalSize(291, 104), SetResize(1, 10), SetPadding(2, 2, 2, 2), EndContainer(),
-		EndContainer(),
-		NWidget(WWT_SCROLLBAR, COLOUR_GREY, ANGRFW_SCROLLBAR),
-	EndContainer(),
-	NWidget(WWT_PANEL, COLOUR_GREY, ANGRFW_GRF_INFO), SetResize(1, 0), SetMinimalSize(307, 103), EndContainer(),
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, ANGRFW_ADD), SetMinimalSize(147, 12), SetResize(1, 0), SetDataTip(STR_NEWGRF_ADD_FILE, STR_NEWGRF_ADD_FILE_TIP),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_GREY, ANGRFW_RESCAN), SetMinimalSize(148, 12), SetDataTip(STR_NEWGRF_RESCAN_FILES, STR_NEWGRF_RESCAN_FILES_TIP),
-		NWidget(WWT_RESIZEBOX, COLOUR_GREY, ANGRFW_RESIZE),
-	EndContainer(),
-};
-
-/* Window definition for the add a newgrf window */
-static const WindowDesc _newgrf_add_dlg_desc(
-	WDP_CENTER, WDP_CENTER, 307, 237, 307, 337,
-	WC_SAVELOAD, WC_NONE,
-	WDF_STD_TOOLTIPS | WDF_DEF_WIDGET | WDF_STD_BTN | WDF_UNCLICK_BUTTONS | WDF_RESIZABLE,
-	_newgrf_add_dlg_widgets, _nested_newgrf_add_dlg_widgets, lengthof(_nested_newgrf_add_dlg_widgets)
-);
-
 static GRFPresetList _grf_preset_list;
 
 class DropDownListPresetItem : public DropDownListItem {
@@ -325,22 +163,60 @@
 };
 
 /**
- * Window for showing NewGRF files
+ * Combined NewGrf Window 
  */
 struct NewGRFWindow : public Window {
-	GRFConfig **orig_list; ///< grf list the window is shown with
-	GRFConfig *list;       ///< temporary grf list to which changes are made
-	GRFConfig *sel;        ///< selected grf item
-	bool editable;         ///< is the window editable
-	bool show_params;      ///< are the grf-parameters shown in the info-panel
-	bool execute;          ///< on pressing 'apply changes' are grf changes applied immediately, or only list is updated
-	int query_widget;      ///< widget that opened a query
-	int preset;            ///< selected preset
+
+	/* Names of the window widgets */
+	enum NewGRFListWindowWidgets {
+		SNGRFS_CLOSE = 0,
+		SNGRFS_CAPTION,
+		SNGRFS_EMPTY_PRESET,
+		SNGRFS_PRESET_LIST,
+		SNGRFS_PRESET_SAVE,
+		SNGRFS_PRESET_DELETE,
+		SNGRFS_AVAILABLE_GRF_CAPTION,
+		SNGRFS_EMPTY_GRF_LIST,
+		SNGRFS_AVAILABLE_GRF_LIST,
+		SNGRFS_AVAILABLE_GRF_LIST_SCROLLBAR,
+		SNGRFS_NEWGRF_INFO,
+		SNGRFS_RESCAN_FILES,
+		SNGRFS_TOGGLE_SHOW_MODE,
+		SNGRFS_CONTENT_DOWNLOAD,
+		SNGRFS_EMPTY_MIDDLE,
+		SNGRFS_EMPTY_BOTTOM_MIDDLE,
+		SNGRFS_EMPTY_TOP_RIGHT,
+		SNGRFS_ADD_FILE,
+		SNGRFS_REMOVE,
+		SNGRFS_MOVE_UP,
+		SNGRFS_MOVE_DOWN,
+		SNGRFS_FILE_LIST,
+		SNGRFS_FILE_LIST_SCROLLBAR,
+		SNGRFS_TOGGLE_PALETTE,
+		SNGRFS_SET_PARAMETERS,
+		SNGRFS_APPLY_CHANGES,
+	};
+	
+	const GRFConfig *sel_l;
+	GRFConfig **orig_list;   ///< grf list the window is shown with
+	GRFConfig *list;         ///< temporary grf list to which changes are made
+	GRFConfig *sel_r;        ///< selected grf item
+	bool editable;           ///< is the window editable
+	bool show_params;        ///< are the grf-parameters shown in the info-panel
+	bool execute;            ///< on pressing 'apply changes' are grf changes applied immediately, or only list is updated
+	bool show_all;
+	bool show_file_names;
+	int query_widget;        ///< widget that opened a query
+	int preset;              ///< selected preset
 
 	NewGRFWindow(const WindowDesc *desc, bool editable, bool show_params, bool exec_changes, GRFConfig **config) : Window(desc, 0)
 	{
-		this->resize.step_height = 14;
-		this->sel         = NULL;
+		this->resize.step_height = 13;
+		this->resize.step_width = 8;
+		this->resize.height = this->height - 78;
+		this->resize.width  = this->width / 2 - 64;
+
+		this->sel_r       = NULL;
 		this->list        = NULL;
 		this->orig_list   = config;
 		this->editable    = editable;
@@ -355,6 +231,7 @@
 		this->SetupNewGRFWindow();
 	}
 
+
 	~NewGRFWindow()
 	{
 		if (this->editable && !this->execute) {
@@ -368,28 +245,14 @@
 		_grf_preset_list.Clear();
 	}
 
-	void SetupNewGRFWindow()
+	virtual void OnPaint()
 	{
 		const GRFConfig *c;
-		int i;
 
-		for (c = this->list, i = 0; c != NULL; c = c->next, i++) {}
+		int i, y;
+		int n = 0;
 
-		this->vscroll.cap = (this->widget[SNGRFS_FILE_LIST].bottom - this->widget[SNGRFS_FILE_LIST].top) / 14 + 1;
-		SetVScrollCount(this, i);
-
-		this->SetWidgetsDisabledState(!this->editable,
-			SNGRFS_PRESET_LIST,
-			SNGRFS_ADD,
-			SNGRFS_APPLY_CHANGES,
-			SNGRFS_TOGGLE_PALETTE,
-			WIDGET_LIST_END
-		);
-	}
-
-	virtual void OnPaint()
-	{
-		bool disable_all = this->sel == NULL || !this->editable;
+		bool disable_all = this->sel_r == NULL || !this->editable;
 
 		this->SetWidgetsDisabledState(disable_all,
 			SNGRFS_REMOVE,
@@ -397,14 +260,24 @@
 			SNGRFS_MOVE_DOWN,
 			WIDGET_LIST_END
 		);
+
+		this->SetWidgetsDisabledState(!this->editable,
+			SNGRFS_RESCAN_FILES,
+			SNGRFS_NEWGRF_INFO,
+			SNGRFS_AVAILABLE_GRF_LIST,
+			SNGRFS_APPLY_CHANGES,
+			WIDGET_LIST_END
+		);
+
+		this->SetWidgetDisabledState(SNGRFS_ADD_FILE, !this->editable || this->sel_l == NULL || this->sel_l->IsOpenTTDBaseGRF());
 		this->SetWidgetDisabledState(SNGRFS_SET_PARAMETERS, !this->show_params || disable_all);
 		this->SetWidgetDisabledState(SNGRFS_TOGGLE_PALETTE, disable_all);
 
 		if (!disable_all) {
 			/* All widgets are now enabled, so disable widgets we can't use */
-			if (this->sel == this->list)       this->DisableWidget(SNGRFS_MOVE_UP);
-			if (this->sel->next == NULL)       this->DisableWidget(SNGRFS_MOVE_DOWN);
-			if (this->sel->IsOpenTTDBaseGRF()) this->DisableWidget(SNGRFS_REMOVE);
+			if (this->sel_r == this->list) this->DisableWidget(SNGRFS_MOVE_UP);
+			if (this->sel_r->next == NULL) this->DisableWidget(SNGRFS_MOVE_DOWN);
+			if (this->sel_r->IsOpenTTDBaseGRF()) this->DisableWidget(SNGRFS_REMOVE);
 		}
 
 		if (this->preset == -1) {
@@ -432,12 +305,32 @@
 
 		this->DrawWidgets();
 
+		DrawString(this->widget[SNGRFS_AVAILABLE_GRF_CAPTION].left, this->widget[SNGRFS_AVAILABLE_GRF_CAPTION].right, 34, STR_NEWGRF_ADD_CAPTION, TC_WHITE,SA_CENTER);
+		GfxFillRect(this->widget[SNGRFS_AVAILABLE_GRF_LIST].left + 1, this->widget[SNGRFS_AVAILABLE_GRF_LIST].top + 1, this->widget[SNGRFS_AVAILABLE_GRF_LIST].right, this->widget[SNGRFS_AVAILABLE_GRF_LIST].bottom, 0xD7);
+
+		n = 0;
+		y = this->widget[SNGRFS_AVAILABLE_GRF_LIST].top + 2;
+		for (c = _all_grfs; c != NULL; c = c->next) {
+
+			if (IsInSelectedList(c->grfid)) continue;	
+			
+			if (n >= this->vscroll.pos && n < this->vscroll.pos + this->vscroll.cap) {
+				bool h = (c == this->sel_l);
+				const char *text = (c->name != NULL && !StrEmpty(c->name) && !this->show_file_names) ? c->name : c->filename;
+
+				/* Draw selection background */
+				if (h) GfxFillRect(3, y, this->widget[SNGRFS_AVAILABLE_GRF_LIST].right - 4, y + 9, 156);
+				DrawString(4, this->widget[SNGRFS_AVAILABLE_GRF_LIST].right - 7, y, text, h ? TC_WHITE : TC_ORANGE);
+				y += 10;
+			}
+			n++;
+		}
+
 		/* Draw NewGRF list */
-		int y = this->widget[SNGRFS_FILE_LIST].top;
-		int i = 0;
-		for (const GRFConfig *c = this->list; c != NULL; c = c->next, i++) {
-			if (i >= this->vscroll.pos && i < this->vscroll.pos + this->vscroll.cap) {
-				const char *text = (c->name != NULL && !StrEmpty(c->name)) ? c->name : c->filename;
+		y = this->widget[SNGRFS_FILE_LIST].top;
+		for (c = this->list, i = 0; c != NULL; c = c->next, i++) {
+			if (i >= this->vscroll2.pos && i < this->vscroll2.pos + this->vscroll2.cap) {
+				const char *text = (c->name != NULL && !StrEmpty(c->name) && !this->show_file_names) ? c->name : c->filename;
 				SpriteID pal;
 				byte txtoffset;
 
@@ -464,19 +357,104 @@
 					}
 				}
 
-				DrawSprite(SPR_SQUARE, pal, 5, y + 2);
-				if (c->error != NULL) DrawSprite(SPR_WARNING_SIGN, 0, 20, y + 2);
+				DrawSprite(SPR_SQUARE, pal, this->widget[SNGRFS_FILE_LIST].left + 9, y + 2);
+				if (c->error != NULL) DrawSprite(SPR_WARNING_SIGN, 0, this->widget[SNGRFS_FILE_LIST].left + 21, y + 2);
 				txtoffset = c->error != NULL ? 35 : 25;
-				DrawString(txtoffset, this->widget[SNGRFS_FILE_LIST].right - 2, y + 3, text, this->sel == c ? TC_WHITE : TC_BLACK);
-				y += 14;
+				DrawString(this->widget[SNGRFS_FILE_LIST].left + txtoffset,
+						this->widget[SNGRFS_FILE_LIST].right - 2 - txtoffset , y + 2,
+						text,
+						this->sel_r == c ? TC_WHITE : TC_BLACK);
+				y += 13;
 			}
 		}
 
-		if (this->sel != NULL) {
+		if (this->sel_r != NULL) {
 			/* Draw NewGRF file info */
 			const Widget *wi = &this->widget[SNGRFS_NEWGRF_INFO];
-			ShowNewGRFInfo(this->sel, wi->left + 2, wi->top + 2, wi->right - wi->left - 2, wi->bottom, this->show_params);
+			ShowNewGRFInfo(this->sel_r, wi->left + 2, wi->top + 2, wi->right - wi->left - 2, wi->bottom, this->show_params, this->show_file_names);
 		}
+
+		if (this->sel_l != NULL) {
+			const Widget *wi = &this->widget[SNGRFS_NEWGRF_INFO];
+			ShowNewGRFInfo(this->sel_l, wi->left + 2, wi->top + 2, wi->right - wi->left - 2, wi->bottom, false, this->show_file_names);
+		}
+
+	}
+
+	virtual void OnInvalidateData(int data)
+	{
+		switch (data) {
+			default: NOT_REACHED();
+			case 0:
+				this->preset = -1;
+				this->SetupNewGRFWindow();
+				break;
+		
+			case 1:
+				/* Search the list for items that are now found and mark them as such. */
+				for (GRFConfig *c = this->list; c != NULL; c = c->next) {
+					if (c->status != GCS_NOT_FOUND) continue;
+				
+					const GRFConfig *f = FindGRFConfig(c->grfid, c->md5sum);
+					if (f == NULL) continue;
+				
+					free(c->filename);
+					free(c->name);
+					free(c->info);
+				
+					c->filename  = f->filename == NULL ? NULL : strdup(f->filename);
+					c->name      = f->name == NULL ? NULL : strdup(f->name);;
+					c->info      = f->info == NULL ? NULL : strdup(f->info);;
+					c->status    = GCS_UNKNOWN;
+				}
+				break;
+		}
+		
+	}
+
+	virtual void OnDragMove(Point pt, int widget)
+	{
+		if (widget != SNGRFS_FILE_LIST) return;
+
+		GRFConfig **pc, *c, *source, *target;
+
+		if ((source = this->sel_r) == NULL) return;
+
+		uint i = (pt.y - this->widget[SNGRFS_FILE_LIST].top) / 13 + this->vscroll2.pos;
+		for (c = this->list; c != NULL && i > 0; c = c->next, i--)
+			if (c == source) i += 1;
+		target = c;
+		
+		if (target == source) return;
+
+		for (pc = &this->list; (c = *pc) != NULL; pc = &c->next) {
+			if (c == source)
+				*pc = c->next;
+			else if (c->next == source) {
+				c->next = c->next->next;
+			}
+		}
+
+		for (pc = &this->list; (c = *pc) != NULL; pc = &c->next) {
+			if (c == target) {
+				*pc = source;
+				source->next = target;
+			}
+			else if (c->next == target) {
+				c->next = source;
+				source->next = target;
+			}
+		}
+
+		this->SetDirty();
+	}
+
+	virtual void OnDoubleClick(Point pt, int widget)
+	{
+		if (widget == SNGRFS_AVAILABLE_GRF_LIST)
+			this->OnClick(pt, SNGRFS_ADD_FILE);
+		if (widget == SNGRFS_FILE_LIST && this->sel_r) 
+			this->OnClick(pt, SNGRFS_REMOVE);
 	}
 
 	virtual void OnClick(Point pt, int widget)
@@ -512,30 +490,97 @@
 				this->SetDirty();
 				break;
 
-			case SNGRFS_ADD: // Add GRF
-				DeleteWindowByClass(WC_SAVELOAD);
-				new NewGRFAddWindow(&_newgrf_add_dlg_desc, &this->list);
+			case SNGRFS_AVAILABLE_GRF_LIST: {
+				/* Get row... */
+				const GRFConfig *c;
+				uint i = ((pt.y) - this->widget[SNGRFS_AVAILABLE_GRF_LIST].top) / 10 + this->vscroll.pos;
+				
+				c = _all_grfs;
+				while (c && IsInSelectedList(c->grfid) && c->next) {
+					c = c->next;
+				}
+				while (c != NULL && i > 0)
+				{
+					c = c->next;
+					while (c != NULL && IsInSelectedList(c->grfid) && c->next) {
+						c = c->next;
+					}
+					--i;
+				}
+				if (c && IsInSelectedList(c->grfid)) c = NULL;
+				this->sel_l = c;
+				this->sel_r = NULL;
+				this->SetDirty();
+				break;
+			}
+
+			case SNGRFS_ADD_FILE: // Add selection to list
+				if (this->sel_l != NULL && this->editable) {
+					const GRFConfig *src = this->sel_l;
+					GRFConfig **list;
+
+					/* Find last entry in the list, checking for duplicate grfid on the way */
+					for (list = &this->list; *list != NULL; list = &(*list)->next) {
+						if ((*list)->grfid == src->grfid) {
+							ShowErrorMessage(INVALID_STRING_ID, STR_NEWGRF_DUPLICATE_GRFID, 0, 0);
+							return;
+						}
+					}
+
+					/* Copy GRF details from scanned list */
+					GRFConfig *c = CallocT<GRFConfig>(1);
+					*c = *src;
+					c->filename = strdup(src->filename);
+					if (src->name      != NULL) c->name      = strdup(src->name);
+					if (src->info      != NULL) c->info      = strdup(src->info);
+					c->next = NULL;
+
+					/* Append GRF config to configuration list */
+					*list = c;
+					this->sel_l = NULL;
+					this->preset = -1;
+					this->SetupNewGRFWindow();
+					this->SetDirty();
+				}
+				break;
+
+			case SNGRFS_RESCAN_FILES: // Rescan list
+				this->sel_l = NULL;
+				ScanNewGRFFiles();
+				this->SetDirty();
+				break;
+				
+			case SNGRFS_TOGGLE_SHOW_MODE: // Toggle show mode
+				if (_ctrl_pressed) {
+					this->show_file_names = !this->show_file_names;
+				}
+				else {
+					this->show_all = !this->show_all;
+				}
+
+				this->SetupNewGRFWindow(); // Adjust scroll bars
+				this->SetDirty();
 				break;
 
 			case SNGRFS_REMOVE: { // Remove GRF
 				GRFConfig **pc, *c, *newsel;
 
 				/* Choose the next GRF file to be the selected file */
-				newsel = this->sel->next;
+				newsel = this->sel_r->next;
 
 				for (pc = &this->list; (c = *pc) != NULL; pc = &c->next) {
 					/* If the new selection is empty (i.e. we're deleting the last item
 					 * in the list, pick the file just before the selected file */
-					if (newsel == NULL && c->next == this->sel) newsel = c;
+					if (newsel == NULL && c->next == this->sel_r) newsel = c;
 
-					if (c == this->sel) {
+					if (c == this->sel_r) {
 						*pc = c->next;
 						free(c);
 						break;
 					}
 				}
 
-				this->sel = newsel;
+				this->sel_r = newsel;
 				this->preset = -1;
 				this->SetupNewGRFWindow();
 				this->SetDirty();
@@ -544,13 +589,13 @@
 
 			case SNGRFS_MOVE_UP: { // Move GRF up
 				GRFConfig **pc, *c;
-				if (this->sel == NULL) break;
+				if (this->sel_r == NULL) break;
 
 				for (pc = &this->list; (c = *pc) != NULL; pc = &c->next) {
-					if (c->next == this->sel) {
-						c->next = this->sel->next;
-						this->sel->next = c;
-						*pc = this->sel;
+					if (c->next == this->sel_r) {
+						c->next = this->sel_r->next;
+						this->sel_r->next = c;
+						*pc = this->sel_r;
 						break;
 					}
 				}
@@ -561,10 +606,10 @@
 
 			case SNGRFS_MOVE_DOWN: { // Move GRF down
 				GRFConfig **pc, *c;
-				if (this->sel == NULL) break;
+				if (this->sel_r == NULL) break;
 
 				for (pc = &this->list; (c = *pc) != NULL; pc = &c->next) {
-					if (c == this->sel) {
+					if (c == this->sel_r) {
 						*pc = c->next;
 						c->next = c->next->next;
 						(*pc)->next = c;
@@ -578,11 +623,15 @@
 
 			case SNGRFS_FILE_LIST: { // Select a GRF
 				GRFConfig *c;
-				uint i = (pt.y - this->widget[SNGRFS_FILE_LIST].top) / 14 + this->vscroll.pos;
+				uint i = (pt.y - this->widget[SNGRFS_FILE_LIST].top) / 13 + this->vscroll2.pos;
 
-				for (c = this->list; c != NULL && i > 0; c = c->next, i--) {}
-				this->sel = c;
+				for (c = this->list; c != NULL && i > 0; c = c->next, i--) ;
+				this->sel_r = c;
+				this->sel_l = NULL;
 
+				/* Activate drag and drop */
+				SetObjectToPlaceWnd(SPR_CURSOR_MOUSE, PAL_NONE, HT_DRAG, this);
+				
 				this->SetDirty();
 				break;
 			}
@@ -603,29 +652,29 @@
 				break;
 
 			case SNGRFS_SET_PARAMETERS: { // Edit parameters
-				if (this->sel == NULL) break;
+				if (this->sel_r == NULL) break;
 
 				this->query_widget = widget;
 				static char buff[512];
-				GRFBuildParamList(buff, this->sel, lastof(buff));
+				GRFBuildParamList(buff, this->sel_r, lastof(buff));
 				SetDParamStr(0, buff);
 				ShowQueryString(STR_JUST_RAW_STRING, STR_NEWGRF_PARAMETER_QUERY, 63, 250, this, CS_ALPHANUMERAL, QSF_NONE);
 				break;
 			}
 
-			case SNGRFS_TOGGLE_PALETTE:
-				if (this->sel != NULL) {
-					this->sel->windows_paletted ^= true;
+			case SNGRFS_TOGGLE_PALETTE: {
+				if (this->sel_r != NULL) {
+					this->sel_r->windows_paletted ^= true;
 					this->SetDirty();
 				}
 				break;
-
+				
 			case SNGRFS_CONTENT_DOWNLOAD:
 				if (!_network_available) {
 					ShowErrorMessage(INVALID_STRING_ID, STR_NETWORK_ERR_NOTAVAILABLE, 0, 0);
 				} else {
 #if defined(ENABLE_NETWORK)
-				/* Only show the things in the current list, or everything when nothing's selected */
+					/* Only show the things in the current list, or everything when nothing's selected */
 					ContentVector cv;
 					for (const GRFConfig *c = this->list; c != NULL; c = c->next) {
 						if (c->status != GCS_NOT_FOUND && !HasBit(c->flags, GCF_COMPATIBLE)) continue;
@@ -643,7 +692,9 @@
 #endif
 				}
 				break;
-
+			
+				
+			}
 		}
 	}
 
@@ -656,14 +707,14 @@
 			GRFConfig *c = LoadGRFPresetFromConfig(_grf_preset_list[index]);
 
 			if (c != NULL) {
-				this->sel = NULL;
+				this->sel_r = NULL;
 				ClearGRFConfigList(&this->list);
 				this->list = c;
 				this->preset = index;
 			}
 		}
 
-		this->sel = NULL;
+		this->sel_r = NULL;
 		this->SetupNewGRFWindow();
 		this->SetDirty();
 	}
@@ -690,7 +741,7 @@
 
 			case SNGRFS_SET_PARAMETERS: {
 				/* Parse our new "int list" */
-				GRFConfig *c = this->sel;
+				GRFConfig *c = this->sel_r;
 				c->num_params = parse_intlist(str, (int*)c->param, lengthof(c->param));
 
 				/* parse_intlist returns -1 on error */
@@ -705,118 +756,123 @@
 
 	virtual void OnResize(Point delta)
 	{
-		if (delta.x != 0) {
-			ResizeButtons(this, SNGRFS_ADD, SNGRFS_MOVE_DOWN);
-			ResizeButtons(this, SNGRFS_SET_PARAMETERS, SNGRFS_APPLY_CHANGES);
+		/* ASSUME: this->width, this->height already contains the new window size */
+
+		int left_column_width  = (this->width - 31) / 2 + 4;
+		int right_column_width = left_column_width - 7;
+
+		Widget *w = this->widget;
+		
+		w[SNGRFS_RESCAN_FILES].right =
+				(left_column_width / 2) - 1;
+
+		w[SNGRFS_TOGGLE_SHOW_MODE].left =
+				(left_column_width / 2);
+
+		w[SNGRFS_AVAILABLE_GRF_LIST].right = 
+				left_column_width - 14;
+
+		w[SNGRFS_AVAILABLE_GRF_LIST_SCROLLBAR].left =
+				left_column_width - 12;
+
+		w[SNGRFS_AVAILABLE_GRF_CAPTION].right =
+		w[SNGRFS_EMPTY_GRF_LIST].right =
+		w[SNGRFS_AVAILABLE_GRF_LIST_SCROLLBAR].right =
+		w[SNGRFS_TOGGLE_SHOW_MODE].right =
+		w[SNGRFS_CONTENT_DOWNLOAD].right = 
+				left_column_width - 1;
+
+		w[SNGRFS_EMPTY_MIDDLE].left =
+		w[SNGRFS_EMPTY_BOTTOM_MIDDLE].left =
+				left_column_width;
+
+		w[SNGRFS_ADD_FILE].left =
+		w[SNGRFS_REMOVE].left =
+				left_column_width + 5;
+
+		w[SNGRFS_ADD_FILE].right =
+		w[SNGRFS_REMOVE].right =
+				left_column_width + 25;
+
+		w[SNGRFS_EMPTY_MIDDLE].right =
+		w[SNGRFS_EMPTY_BOTTOM_MIDDLE].right =
+				left_column_width + 29;
+
+		int rightwin_start = left_column_width + 30;
+
+		w[SNGRFS_EMPTY_TOP_RIGHT].left =
+		w[SNGRFS_FILE_LIST].left =
+		w[SNGRFS_TOGGLE_PALETTE].left = 
+		w[SNGRFS_APPLY_CHANGES].left = 
+				rightwin_start;
+		
+		int button_width = (right_column_width < 198 ? 36 : 66);
+		int spacing = (right_column_width - 2 * button_width) / 3;
+		int pos     = rightwin_start + spacing;
+
+		w[SNGRFS_MOVE_UP].left    = pos; pos += button_width;
+		w[SNGRFS_MOVE_UP].right   = pos; pos += spacing;
+		w[SNGRFS_MOVE_DOWN].left  = pos; pos += button_width;
+		w[SNGRFS_MOVE_DOWN].right = pos;
+
+		spacing = right_column_width / 2;
+		w[SNGRFS_TOGGLE_PALETTE].right = rightwin_start + spacing - 1;
+		w[SNGRFS_SET_PARAMETERS].left  = rightwin_start + spacing;
+
+		int list_bottom;
+
+		if (this->height < 221) {
+			list_bottom = 104;
+		} else {
+			list_bottom = this->height - 106;
 		}
 
-		this->vscroll.cap += delta.y / 14;
-		this->widget[SNGRFS_FILE_LIST].data = (this->vscroll.cap << 8) + 1;
+		w[SNGRFS_EMPTY_GRF_LIST].bottom =
+		w[SNGRFS_AVAILABLE_GRF_LIST].bottom =
+		w[SNGRFS_AVAILABLE_GRF_LIST_SCROLLBAR].bottom =
+		w[SNGRFS_FILE_LIST].bottom =
+		w[SNGRFS_FILE_LIST_SCROLLBAR].bottom =
+		w[SNGRFS_EMPTY_MIDDLE].bottom =
+			list_bottom;
+
+		w[SNGRFS_NEWGRF_INFO].top = list_bottom + 1;
 
 		this->SetupNewGRFWindow();
 	}
+	
+	bool IsInSelectedList(uint32 grfid) {
+		if (this->show_all) return false;
+		const GRFConfig *ctemp;
+		for (ctemp = this->list; ctemp != NULL; ctemp = ctemp->next) {
+			if (grfid == ctemp->grfid) return true;
+		}
+		return false;
+	}
 
-	virtual void OnInvalidateData(int data)
+	void SetupNewGRFWindow()
 	{
-		switch (data) {
-			default: NOT_REACHED();
-			case 0:
-				this->preset = -1;
-				this->SetupNewGRFWindow();
-				break;
+		const GRFConfig *c;
+		uint16 n;
 
-			case 1:
-				/* Search the list for items that are now found and mark them as such. */
-				for (GRFConfig *c = this->list; c != NULL; c = c->next) {
-					if (c->status != GCS_NOT_FOUND) continue;
+		for (c = this->list, n = 0; c != NULL; c = c->next, n++) ;
 
-					const GRFConfig *f = FindGRFConfig(c->grfid, c->md5sum);
-					if (f == NULL) continue;
+		this->vscroll2.cap = (this->widget[SNGRFS_FILE_LIST].bottom - this->widget[SNGRFS_FILE_LIST].top) / 13;
 
-					free(c->filename);
-					free(c->name);
-					free(c->info);
+		this->widget[SNGRFS_FILE_LIST].data = (this->vscroll2.cap << 8) + 1;
+		SetVScroll2Count(this, n);
+		this->SetWidgetDisabledState(SNGRFS_APPLY_CHANGES, !this->editable);
 
-					c->filename  = f->filename == NULL ? NULL : strdup(f->filename);
-					c->name      = f->name == NULL ? NULL : strdup(f->name);;
-					c->info      = f->info == NULL ? NULL : strdup(f->info);;
-					c->status    = GCS_UNKNOWN;
-				}
-				break;
+		/* Count the number of GRFs */
+		for (c = _all_grfs, n = 0; c != NULL; c = c->next)
+		{
+			if (this->show_all || !IsInSelectedList(c->grfid)) n++;
 		}
+
+		this->vscroll.cap = (this->widget[SNGRFS_AVAILABLE_GRF_LIST].bottom - this->widget[SNGRFS_AVAILABLE_GRF_LIST].top) / 10;
+		SetVScrollCount(this, n);
 	}
 };
 
-/* Widget definition of the manage newgrfs window */
-static const Widget _newgrf_widgets[] = {
-{   WWT_CLOSEBOX,  RESIZE_NONE,  COLOUR_MAUVE,    0,  10,   0,  13, STR_BLACK_CROSS,             STR_TOOLTIP_CLOSE_WINDOW },         // SNGRFS_CLOSEBOX
-{    WWT_CAPTION, RESIZE_RIGHT,  COLOUR_MAUVE,   11, 299,   0,  13, STR_NEWGRF_SETTINGS_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS }, // SNGRFS_CAPTION
-{      WWT_PANEL, RESIZE_RIGHT,  COLOUR_MAUVE,    0, 299,  14,  29, STR_NULL,                    STR_NULL },                         // SNGRFS_BACKGROUND1
-{   WWT_DROPDOWN, RESIZE_RIGHT,  COLOUR_YELLOW,  10, 103,  16,  27, STR_EMPTY,                   STR_NEWGRF_PRESET_LIST_TIP },       // SNGRFS_PRESET_LIST
-{ WWT_PUSHTXTBTN,    RESIZE_LR,  COLOUR_YELLOW, 104, 196,  16,  27, STR_NEWGRF_PRESET_SAVE,      STR_NEWGRF_PRESET_SAVE_TIP },       // SNGRFS_PRESET_SAVE
-{ WWT_PUSHTXTBTN,    RESIZE_LR,  COLOUR_YELLOW, 197, 289,  16,  27, STR_NEWGRF_PRESET_DELETE,    STR_NEWGRF_PRESET_DELETE_TIP },     // SNGRFS_PRESET_DELETE
-{      WWT_PANEL, RESIZE_RIGHT,  COLOUR_MAUVE,    0, 299,  30,  45, STR_NULL,                    STR_NULL },                         // SNGRFS_BACKGROUND2
-{ WWT_PUSHTXTBTN,  RESIZE_NONE,  COLOUR_YELLOW,  10,  79,  32,  43, STR_NEWGRF_ADD,              STR_NEWGRF_ADD_TIP },               // SNGRFS_ADD
-{ WWT_PUSHTXTBTN,  RESIZE_NONE,  COLOUR_YELLOW,  80, 149,  32,  43, STR_NEWGRF_REMOVE,           STR_NEWGRF_REMOVE_TIP },            // SNGRFS_REMOVE
-{ WWT_PUSHTXTBTN,  RESIZE_NONE,  COLOUR_YELLOW, 150, 219,  32,  43, STR_NEWGRF_MOVEUP,           STR_NEWGRF_MOVEUP_TIP },            // SNGRFS_MOVE_UP
-{ WWT_PUSHTXTBTN, RESIZE_RIGHT,  COLOUR_YELLOW, 220, 289,  32,  43, STR_NEWGRF_MOVEDOWN,         STR_NEWGRF_MOVEDOWN_TIP },          // SNGRFS_MOVE_DOWN
-{     WWT_MATRIX,    RESIZE_RB,  COLOUR_MAUVE,    0, 287,  46, 115, 0x501,                       STR_NEWGRF_FILE_TIP },              // SNGRFS_FILE_LIST
-{  WWT_SCROLLBAR,   RESIZE_LRB,  COLOUR_MAUVE,  288, 299,  46, 115, 0x0,                         STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST }, // SNGRFS_SCROLLBAR
-{      WWT_PANEL,   RESIZE_RTB,  COLOUR_MAUVE,    0, 299, 116, 238, STR_NULL,                    STR_NULL },                         // SNGRFS_NEWGRF_INFO
-{ WWT_PUSHTXTBTN,    RESIZE_TB,  COLOUR_MAUVE,    0,  99, 239, 250, STR_NEWGRF_SET_PARAMETERS,   STR_NULL },                         // SNGRFS_SET_PARAMETERS
-{ WWT_PUSHTXTBTN,   RESIZE_RTB,  COLOUR_MAUVE,  100, 199, 239, 250, STR_NEWGRF_TOGGLE_PALETTE,   STR_NEWGRF_TOGGLE_PALETTE_TIP },    // SNGRFS_TOGGLE_PALETTE
-{ WWT_PUSHTXTBTN,  RESIZE_LRTB,  COLOUR_MAUVE,  200, 299, 239, 250, STR_NEWGRF_APPLY_CHANGES,    STR_NULL },                         // SNGRFS_APPLY_CHANGES
-{ WWT_PUSHTXTBTN,   RESIZE_RTB,  COLOUR_MAUVE,    0, 287, 251, 262, STR_CONTENT_INTRO_BUTTON,    STR_CONTENT_INTRO_BUTTON_TIP },     // SNGRFS_CONTENT_DOWNLOAD
-{  WWT_RESIZEBOX,  RESIZE_LRTB,  COLOUR_MAUVE,  288, 299, 251, 262, 0x0,                         STR_RESIZE_BUTTON },                // SNGRFS_RESIZE
-{ WIDGETS_END },
-};
-
-static const NWidgetPart _nested_newgrf_widgets[] = {
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_CLOSEBOX, COLOUR_MAUVE, SNGRFS_CLOSEBOX),
-		NWidget(WWT_CAPTION, COLOUR_MAUVE, SNGRFS_CAPTION), SetDataTip(STR_NEWGRF_SETTINGS_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS),
-	EndContainer(),
-	NWidget(WWT_PANEL, COLOUR_MAUVE, SNGRFS_BACKGROUND1),
-		NWidget(NWID_HORIZONTAL), SetPadding(2, 10, 2, 10),
-			NWidget(WWT_DROPDOWN, COLOUR_YELLOW, SNGRFS_PRESET_LIST), SetMinimalSize(94, 12), SetResize(1, 0), SetDataTip(STR_EMPTY, STR_NEWGRF_PRESET_LIST_TIP),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_PRESET_SAVE), SetMinimalSize(93, 12), SetDataTip(STR_NEWGRF_PRESET_SAVE, STR_NEWGRF_PRESET_SAVE_TIP),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_PRESET_DELETE), SetMinimalSize(93, 12), SetDataTip(STR_NEWGRF_PRESET_DELETE, STR_NEWGRF_PRESET_DELETE_TIP),
-		EndContainer(),
-	EndContainer(),
-	NWidget(WWT_PANEL, COLOUR_MAUVE, SNGRFS_BACKGROUND2),
-		NWidget(NWID_HORIZONTAL), SetPadding(2, 10, 2, 10),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_ADD), SetMinimalSize(70, 12), SetDataTip(STR_NEWGRF_ADD, STR_NEWGRF_ADD_TIP),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_REMOVE), SetMinimalSize(70, 12), SetDataTip(STR_NEWGRF_REMOVE, STR_NEWGRF_REMOVE_TIP),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_MOVE_UP), SetMinimalSize(70, 12), SetDataTip(STR_NEWGRF_MOVEUP, STR_NEWGRF_MOVEUP_TIP),
-			NWidget(WWT_PUSHTXTBTN, COLOUR_YELLOW, SNGRFS_MOVE_DOWN), SetMinimalSize(70, 12), SetDataTip(STR_NEWGRF_MOVEDOWN, STR_NEWGRF_MOVEDOWN_TIP), SetResize(1, 0),
-		EndContainer(),
-	EndContainer(),
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_MATRIX, COLOUR_MAUVE, SNGRFS_FILE_LIST), SetMinimalSize(288, 70), SetDataTip(0x501, STR_NEWGRF_FILE_TIP), SetResize(1, 14),
-		NWidget(WWT_SCROLLBAR, COLOUR_MAUVE, SNGRFS_SCROLLBAR),
-	EndContainer(),
-	NWidget(WWT_PANEL, COLOUR_MAUVE, SNGRFS_NEWGRF_INFO), SetResize(1, 0), SetMinimalSize(300, 123), EndContainer(),
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_MAUVE, SNGRFS_SET_PARAMETERS), SetMinimalSize(100, 12), SetDataTip(STR_NEWGRF_SET_PARAMETERS, STR_NULL),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_MAUVE, SNGRFS_TOGGLE_PALETTE), SetMinimalSize(100, 12), SetResize(1, 0),
-													SetDataTip(STR_NEWGRF_TOGGLE_PALETTE, STR_NEWGRF_TOGGLE_PALETTE_TIP),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_MAUVE, SNGRFS_APPLY_CHANGES), SetMinimalSize(100, 12), SetDataTip(STR_NEWGRF_APPLY_CHANGES, STR_NULL),
-	EndContainer(),
-	NWidget(NWID_HORIZONTAL),
-		NWidget(WWT_PUSHTXTBTN, COLOUR_MAUVE, SNGRFS_CONTENT_DOWNLOAD), SetFill(1, 0), SetMinimalSize(288, 12), SetResize(1, 0),
-													SetDataTip(STR_CONTENT_INTRO_BUTTON, STR_CONTENT_INTRO_BUTTON_TIP),
-		NWidget(WWT_RESIZEBOX, COLOUR_MAUVE, SNGRFS_RESIZE),
-	EndContainer(),
-};
-
-/* Window definition of the manage newgrfs window */
-static const WindowDesc _newgrf_desc(
-	WDP_CENTER, WDP_CENTER, 300, 263, 300, 263,
-	WC_GAME_OPTIONS, WC_NONE,
-	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS | WDF_RESIZABLE,
-	_newgrf_widgets, _nested_newgrf_widgets, lengthof(_nested_newgrf_widgets)
-);
-
 /** Callback function for the newgrf 'apply changes' confirmation window
  * @param w Window which is calling this callback
  * @param confirmed boolean value, true when yes was clicked, false otherwise
@@ -828,23 +884,64 @@
 		GRFConfig *c;
 		int i = 0;
 
-		GamelogStartAction(GLAT_GRF);
-		GamelogGRFUpdate(_grfconfig, nw->list); // log GRF changes
 		CopyGRFConfigList(nw->orig_list, nw->list, false);
 		ReloadNewGRFData();
-		GamelogStopAction();
 
 		/* Show new, updated list */
-		for (c = nw->list; c != NULL && c != nw->sel; c = c->next, i++) {}
+		for (c = nw->list; c != NULL && c != nw->sel_r; c = c->next, i++) ;
 		CopyGRFConfigList(&nw->list, *nw->orig_list, false);
-		for (c = nw->list; c != NULL && i > 0; c = c->next, i--) {}
-		nw->sel = c;
+		for (c = nw->list; c != NULL && i > 0; c = c->next, i--) ;
+		nw->sel_r = c;
 
 		w->SetDirty();
 	}
 }
 
+static const Widget _newgrf_widgets[] = {
+{   WWT_CLOSEBOX,  RESIZE_NONE,  COLOUR_MAUVE,   0,  10,   0,  13, STR_BLACK_CROSS,             STR_TOOLTIP_CLOSE_WINDOW },            // SNGRFS_CLOSE
+{    WWT_CAPTION, RESIZE_RIGHT,  COLOUR_MAUVE,  11, 599,   0,  13, STR_NEWGRF_SETTINGS_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS },  // SNGRFS_CAPTION
+/* NewGRF Presets */
+{      WWT_PANEL, RESIZE_RIGHT,  COLOUR_MAUVE,   0, 599,  14,  29, STR_NULL,                    STR_NULL },                            // SNGRFS_EMPTY_PRESET
+{   WWT_DROPDOWN, RESIZE_RIGHT, COLOUR_YELLOW,  10, 403,  16,  27, STR_EMPTY,                   STR_NEWGRF_PRESET_LIST_TIP },          // SNGRFS_PRESET_LIST
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 404, 496,  16,  27, STR_NEWGRF_PRESET_SAVE,      STR_NEWGRF_PRESET_SAVE_TIP },          // SNGRFS_PRESET_SAVE
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 497, 587,  16,  27, STR_NEWGRF_PRESET_DELETE,    STR_NEWGRF_PRESET_DELETE_TIP },        // SNGRFS_PRESET_DELETE
+/* List of files */
+{      WWT_PANEL, RESIZE_RIGHT,  COLOUR_MAUVE,   0, 291,  30,  45, STR_NULL,                    STR_NULL },                            // SNGRFS_AVAILABLE_GRF_CAPTION
+{      WWT_PANEL,    RESIZE_RB,  COLOUR_MAUVE,   0, 279,  46, 137, STR_NULL,                    STR_NULL },                            // SNGRFS_EMPTY_GRF_LIST
+{      WWT_INSET,    RESIZE_RB,  COLOUR_MAUVE,   2, 277,  46, 137, STR_NULL,                    STR_NULL },                            // SNGRFS_AVAILABLE_GRF_LIST
+{  WWT_SCROLLBAR,   RESIZE_LRB,  COLOUR_MAUVE, 280, 291,  46, 137, STR_NULL,                    STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST },// SNGRFS_AVAILABLE_GRF_LIST_SCROLLBAR
+/* NewGRF file info */
+{      WWT_PANEL,   RESIZE_RTB,  COLOUR_MAUVE,   0, 599, 138, 237, STR_NULL,                    STR_NULL },                            // SNGRFS_NEWGRF_INFO
+/* NewGRF file list buttons */
+{ WWT_PUSHTXTBTN,   RESIZE_RTB,  COLOUR_MAUVE,   0, 145, 238, 249, STR_NEWGRF_RESCAN_FILES,     STR_NEWGRF_RESCAN_FILES_TIP },         // SNGRFS_RESCAN_FILES
+{ WWT_PUSHTXTBTN,  RESIZE_LRTB,  COLOUR_MAUVE, 146, 291, 238, 249, STR_NEWGRF_TOGGLE_SHOW,      STR_NEWGRF_TOGGLE_SHOW_TIP },          // SNGRFS_TOGGLE_SHOW_MODE
+{ WWT_PUSHTXTBTN,   RESIZE_RTB,  COLOUR_MAUVE,   0, 291, 250, 261, STR_CONTENT_INTRO_BUTTON,    STR_CONTENT_INTRO_BUTTON_TIP },        // SNGRFS_DOWNLOAD_CONTENT
+/* Middle Panel */
+{      WWT_PANEL,   RESIZE_LRB,  COLOUR_MAUVE, 292, 321,  30, 137, STR_NULL,                    STR_NULL },                             // SNGRFS_EMPTY_MIDDLE
+{      WWT_PANEL,  RESIZE_LRTB,  COLOUR_MAUVE, 292, 321, 238, 261, STR_NULL,                    STR_NULL },                             // SNGRFS_EMPTY_BOTTOM_MIDDLE
+/* NewGRF file Add, Remove, Move up, Move down */
+{      WWT_PANEL,    RESIZE_LR,  COLOUR_MAUVE, 322, 599,  30,  45, STR_NULL,                    STR_NULL },                             // SNGRFS_EMPTY_TOP_RIGHT
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 297, 316,  36,  58, STR_NEWGRF_JOINT_ADD,        STR_NEWGRF_ADD_TIP },                   // SNGRFS_ADD_FILE
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 297, 316,  66,  88, STR_NEWGRF_JOINT_REMOVE,     STR_NEWGRF_REMOVE_TIP },                // SNGRFS_REMOVE
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 379, 445,  32,  43, STR_NEWGRF_MOVEUP,           STR_NEWGRF_MOVEUP_TIP },                // SNGRFS_MOVE_UP
+{ WWT_PUSHTXTBTN,    RESIZE_LR, COLOUR_YELLOW, 484, 550,  32,  43, STR_NEWGRF_MOVEDOWN,         STR_NEWGRF_MOVEDOWN_TIP },              // SNGRFS_MOVE_DOWN
+/* NewGRF file list */
+{     WWT_MATRIX,   RESIZE_LRB,  COLOUR_MAUVE, 322, 588,  46, 137, 0x501,                       STR_NEWGRF_FILE_TIP },                  // SNGRFS_FILE_LIST
+{ WWT_SCROLL2BAR,   RESIZE_LRB,  COLOUR_MAUVE, 588, 599,  46, 137, STR_NULL,                    STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST }, // SNGRFS_FILE_LIST_SCROLLBAR
+/* Edit parameter and apply changes button... */
+{ WWT_PUSHTXTBTN,  RESIZE_LRTB,  COLOUR_MAUVE, 322, 458, 238, 249, STR_NEWGRF_TOGGLE_PALETTE,   STR_NEWGRF_TOGGLE_PALETTE_TIP },        // SNGRFS_TOGGLE_PALETTE
+{ WWT_PUSHTXTBTN,  RESIZE_LRTB,  COLOUR_MAUVE, 459, 599, 238, 249, STR_NEWGRF_SET_PARAMETERS,   STR_NULL },                             // SNGRFS_SET_PARAMETERS
+{ WWT_PUSHTXTBTN,  RESIZE_LRTB,  COLOUR_MAUVE, 322, 587, 250, 261, STR_NEWGRF_APPLY_CHANGES,    STR_NULL },                             // SNGRFS_APPLY_CHANGES
+{  WWT_RESIZEBOX,  RESIZE_LRTB,  COLOUR_MAUVE, 588, 599, 250, 261, STR_NULL,                    STR_RESIZE_BUTTON },
+{   WIDGETS_END },
+};
 
+static const WindowDesc _newgrf_desc(
+	WDP_CENTER, WDP_CENTER, 600, 262, 600, 262,
+	WC_GAME_OPTIONS, WC_NONE,
+	WDF_STD_TOOLTIPS | WDF_DEF_WIDGET | WDF_STD_BTN | WDF_UNCLICK_BUTTONS | WDF_RESIZABLE,
+	_newgrf_widgets
+);
 
 /** Setup the NewGRF gui
  * @param editable allow the user to make changes to the grfconfig in the window
@@ -855,5 +952,7 @@
 void ShowNewGRFSettings(bool editable, bool show_params, bool exec_changes, GRFConfig **config)
 {
 	DeleteWindowByClass(WC_GAME_OPTIONS);
+
 	new NewGRFWindow(&_newgrf_desc, editable, show_params, exec_changes, config);
 }
+
diff -r ebfdcb643889 -r 09346b82f96a src/openttd.cpp
--- src/openttd.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/openttd.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -157,6 +157,8 @@
 		"  -G seed             = Set random seed\n"
 #if defined(ENABLE_NETWORK)
 		"  -n [ip:port#company]= Start networkgame\n"
+		"  -p password         = Join password\n"
+		"  -P password         = Company password\n"
 		"  -D [ip][:port]      = Start dedicated server\n"
 		"  -l ip[:port]        = Redirect DEBUG()\n"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
@@ -379,6 +381,10 @@
 }
 
 byte _savegame_sort_order;
+#if defined(ENABLE_NETWORK)
+char *_login_pw = NULL;
+char *_company_pw = NULL;
+#endif /* ENABLE_NETWORK */
 #if defined(UNIX) && !defined(__MORPHOS__)
 extern void DedicatedFork();
 #endif
@@ -415,7 +421,7 @@
 	 *   a letter means: it accepts that param (e.g.: -h)
 	 *   a ':' behind it means: it need a param (e.g.: -m<driver>)
 	 *   a '::' behind it means: it can optional have a param (e.g.: -d<debug>) */
-	optformat = "m:s:v:b:hD::n::ei::I:t:d::r:g::G:c:xl:"
+	optformat = "m:s:v:b:hD::n::ei::I:t:d::r:g::G:c:xl:p:P:"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
 		"f"
 #endif
@@ -460,6 +466,12 @@
 		case 'l':
 			debuglog_conn = mgo.opt;
 			break;
+		case 'p':
+			_login_pw = mgo.opt;
+			break;
+		case 'P':
+			_company_pw = mgo.opt;
+			break;
 #endif /* ENABLE_NETWORK */
 		case 'r': ParseResolution(&resolution, mgo.opt); break;
 		case 't': startyear = atoi(mgo.opt); break;
diff -r ebfdcb643889 -r 09346b82f96a src/rail_gui.cpp
--- src/rail_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/rail_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -30,6 +30,10 @@
 #include "table/sprites.h"
 #include "table/strings.h"
 
+#include <vector>
+
+#define MAX_NEWGUI_STATIONS 10
+
 static RailType _cur_railtype;               ///< Rail type of the current build-rail toolbar.
 static bool _remove_button_clicked;          ///< Flag whether 'remove' toggle-button is currently enabled
 static DiagDirection _build_depot_direction; ///< Currently selected depot direction
@@ -42,13 +46,24 @@
 /* Map the setting: default_signal_type to the corresponding signal type */
 static const SignalType _default_signal_type[] = {SIGTYPE_NORMAL, SIGTYPE_PBS, SIGTYPE_PBS_ONEWAY};
 
+struct StationClass_Testing {
+		int result;
+		StringID string;
+};
+
+typedef std::vector<StationClass_Testing *> StationClasses;
+
 struct RailStationGUISettings {
 	Axis orientation;                 ///< Currently selected rail station orientation
 
 	bool newstations;                 ///< Are custom station definitions available?
+	bool imp_newstations;             ///< Use the improved newstations gui?
 	StationClassIDByte station_class; ///< Currently selected custom station class (if newstations is \c true )
 	byte station_type;                ///< Station type within the currently selected custom station class (if newstations is \c true )
 	byte station_count;               ///< Number of custom stations (if newstations is \c true )
+	byte station_class_count;
+	StationClasses station_classes;
+	Point window_size;                ///< Last window size
 };
 static RailStationGUISettings _railstation; ///< Settings of the station builder GUI
 
@@ -909,7 +924,14 @@
 
 		BRSW_NEWST_DROPDOWN,
 		BRSW_NEWST_LIST,
-		BRSW_NEWST_SCROLL
+		BRSW_NEWST_SCROLL,
+
+		BRSW_NEWGUI_LIST,
+		BRSW_NEWGUI_CLASS_SCROLL,
+
+		BRSW_NEWGUI_STATIONS_LIST,
+		BRSW_NEWGUI_STATION_SCROLL,
+		BRSW_NEWGUI_RESIZE,
 	};
 
 	/**
@@ -972,17 +994,52 @@
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_OFF, !_settings_client.gui.station_show_coverage);
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_ON, _settings_client.gui.station_show_coverage);
 
-		this->FindWindowPlacementAndResize(desc);
-
 		_railstation.newstations = newstation;
+		_railstation.imp_newstations = _settings_client.gui.imp_newstations_gui;
 
 		if (newstation) {
 			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+			if (!_railstation.imp_newstations) {
+				int top = this->vscroll.count - this->vscroll.cap;
+				this->vscroll.count = _railstation.station_count;
+				this->vscroll.cap   = 5;
+				this->vscroll.pos   = Clamp(_railstation.station_type - 2, 0, top > 0 ? top : 0);
+			} else {
+				// If the window is being opened again refresh the station classes
+				if (!_railstation.station_classes.empty()) {
+					_railstation.station_classes.clear();
+					_railstation.station_class_count = 0;
+				}
 
-			this->vscroll.count = _railstation.station_count;
-			this->vscroll.cap   = 5;
-			this->vscroll.pos   = Clamp(_railstation.station_type - 2, 0, this->vscroll.count - this->vscroll.cap);
+				for(uint i = 0; i < GetNumStationClasses(); i++) {
+					if (i == STAT_CLASS_WAYP) continue;
+					_railstation.station_class_count++;
+					StationClass_Testing *station_class = new StationClass_Testing();
+					station_class->result = i;
+					station_class->string = GetStationClassName((StationClassID)i);
+					_railstation.station_classes.push_back(station_class);
+				}
+
+				this->resize.step_width  = 65;
+				this->resize.step_height = 48;
+
+				int top   = this->vscroll.count - this->vscroll.cap, top2 = this->vscroll2.count - this->vscroll2.cap;
+				int width = this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF;
+
+				this->vscroll.cap    = 3;
+				this->vscroll.pos    = Clamp(_railstation.station_class, 0, top > 0 ? top : 0);
+				this->vscroll.count  = _railstation.station_class_count;
+
+				this->vscroll2.cap   = 5;
+				this->vscroll2.pos   = Clamp(_railstation.station_type / width, 0, top2 > 0 ? top2 : 0);
+				this->vscroll2.count = _railstation.station_count / width  + (_railstation.station_count % width > 0);
+			}
 		}
+
+		if (_railstation.window_size.x != 0)
+			this->FindWindowPlacementAndResize(_railstation.window_size.x, _railstation.window_size.y);
+		else
+			this->FindWindowPlacementAndResize(desc);
 	}
 
 	virtual ~BuildRailStationWindow()
@@ -993,6 +1050,7 @@
 	virtual void OnPaint()
 	{
 		bool newstations = _railstation.newstations;
+		bool imp_newstations = _railstation.imp_newstations && newstations;
 		DrawPixelInfo tmp_dpi, *old_dpi;
 		const StationSpec *statspec = newstations ? GetCustomStationSpec(_railstation.station_class, _railstation.station_type) : NULL;
 
@@ -1025,7 +1083,9 @@
 		SetDParam(0, GetStationClassName(_railstation.station_class));
 		this->DrawWidgets();
 
-		int y_offset = newstations ? 90 : 0;
+		int y_offset  = newstations ? 90 : 0;
+		    //  260 is the default background height, 48 is 1 height-resize
+		    y_offset += imp_newstations ? this->widget[BRSW_BACKGROUND].bottom - 260 - 48 : 0;
 
 		/* Set up a clipping area for the '/' station preview */
 		if (FillDrawPixelInfo(&tmp_dpi, 7, 26 + y_offset, 66, 48)) {
@@ -1053,8 +1113,8 @@
 		DrawString(this->widget[BRSW_PLATFORM_LEN_1].left, this->widget[BRSW_PLATFORM_LEN_7].right, 141 + y_offset, STR_STATION_BUILD_COVERAGE_AREA_TITLE, TC_FROMSTRING, SA_CENTER);
 
 		int text_end = DrawStationCoverageAreaText(2, 166 + y_offset, SCT_ALL, rad, false);
-		text_end = DrawStationCoverageAreaText(2, text_end + 4, SCT_ALL, rad, true) + 4;
-		if (text_end != this->widget[BRSW_BACKGROUND].bottom) {
+		    text_end = DrawStationCoverageAreaText(2, text_end + 2, SCT_ALL, rad, true) + 4;
+		if (text_end != this->widget[BRSW_BACKGROUND].bottom && !imp_newstations) {
 			this->SetDirty();
 			ResizeWindowForWidget(this, BRSW_BACKGROUND, 0, text_end - this->widget[BRSW_BACKGROUND].bottom);
 			this->SetDirty();
@@ -1063,20 +1123,61 @@
 		if (newstations) {
 			uint y = 35;
 
-			for (uint16 i = this->vscroll.pos; i < _railstation.station_count && i < (uint)(this->vscroll.pos + this->vscroll.cap); i++) {
-				const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, i);
+			if (!imp_newstations) {
+				for (uint16 i = this->vscroll.pos; i < _railstation.station_count && i < (uint)(this->vscroll.pos + this->vscroll.cap); i++) {
+					const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, i);
 
-				if (statspec != NULL && statspec->name != 0) {
-					if (HasBit(statspec->callbackmask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
-						GfxFillRect(8, y - 2, 127, y + 10, 0, FILLRECT_CHECKER);
+					if (statspec != NULL && statspec->name != 0) {
+						if (HasBit(statspec->callbackmask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
+							GfxFillRect(8, y - 2, 127, y + 10, 0, FILLRECT_CHECKER);
+						}
+
+					DrawString(9, 127, y, statspec->name, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
+					} else {
+					DrawString(9, 127, y, STR_STAT_CLASS_DFLT, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
 					}
 
-					DrawString(9, 127, y, statspec->name, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
-				} else {
-					DrawString(9, 127, y, STR_STAT_CLASS_DFLT, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
+					y += 14;
+				}
+			} else {
+				y = 22;
+				for (uint16 i = this->vscroll.pos; i < _railstation.station_class_count && i < (uint)(this->vscroll.pos + this->vscroll.cap); i++) {
+					DrawString(9, 127, y, _railstation.station_classes[i]->string,
+							_railstation.station_classes[i]->result == (StationClassID)_railstation.station_class ? TC_WHITE : TC_BLACK);
+					y += 12;
 				}
 
-				y += 14;
+
+				y = 0;
+				int x = 0, width = this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF;
+				for (uint16 i = this->vscroll2.pos; i < this->vscroll2.count && i < (uint)(this->vscroll2.pos + this->vscroll2.cap); i++) {
+					// TODO: Can the _dpi switching be done once per for loop? or completely outside the loop?
+					//		I had a graphical weirdness once but check to see if this is what caused it
+					x = 0;
+					for (uint16 station = i * width; station < _railstation.station_count && station < (i + 1) * width; station++) {
+						if (_railstation.station_type == station)
+							DrawFrameRect(144 + x, 19 + y, 208 + x, 67 + y, this->widget[BRSW_NEWGUI_STATIONS_LIST].colour, FR_LOWERED);
+
+						if (FillDrawPixelInfo(&tmp_dpi, 144 + x, 21 + y, 64, 46)) {
+							old_dpi = _cur_dpi;
+							_cur_dpi = &tmp_dpi;
+							if (!DrawStationTile(32, 16, _cur_railtype, _railstation.orientation, _railstation.station_class, station)) {
+								StationPickerDrawSprite(32, 16, STATION_RAIL, _cur_railtype, INVALID_ROADTYPE, 2 + _railstation.orientation);
+							}
+							_cur_dpi = old_dpi;
+						}
+
+						const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station);
+						if (statspec != NULL &&
+							statspec->name != 0 &&
+							HasBit(statspec->callbackmask, CBM_STATION_AVAIL) &&
+							GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0)
+								GfxFillRect(145 + x, 21 + y, 207 + x, 66 + y, 0, FILLRECT_CHECKER);
+
+						x += 65;
+					}
+					y += 48;
+				}
 			}
 		}
 	}
@@ -1234,6 +1335,81 @@
 				DeleteWindowById(WC_SELECT_STATION, 0);
 				break;
 			}
+
+			// Improved newstation gui - Class selector
+			case BRSW_NEWGUI_LIST: {
+				int y = (pt.y - 20) / 12;
+				if (y >= this->vscroll.cap) return;
+				y += this->vscroll.pos;
+				if (y >= _railstation.station_class_count) return;
+
+				if (_railstation.station_class != _railstation.station_classes[y]->result) {
+					_railstation.station_class = (StationClassID)(_railstation.station_classes[y]->result);
+					_railstation.station_type  = 0;
+					_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+
+					this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
+					
+					int width = this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF;
+					this->vscroll2.count = _railstation.station_count / width  + (_railstation.station_count % width > 0);
+					this->vscroll2.pos   = 0;
+				}
+
+				SndPlayFx(SND_15_BEEP);
+				this->SetDirty();
+				break;
+			}
+
+			// Improved newstation gui - Station selector
+			case BRSW_NEWGUI_STATIONS_LIST: {
+				const StationSpec *statspec;
+				int y = (pt.y - 20)  / 48;
+				int x = (pt.x - 144) / 65;
+				int width = this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF;
+
+				if (y >= this->vscroll2.cap) return;
+				if (x >= width) return;
+				y += this->vscroll2.pos;
+				if (y * width + x >= _railstation.station_count) return;
+
+				/* Check station availability callback */
+				statspec = GetCustomStationSpec(_railstation.station_class, y * width + x);
+				if (statspec != NULL &&
+					HasBit(statspec->callbackmask, CBM_STATION_AVAIL) &&
+					GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) return;
+
+				_railstation.station_type = y * width + x;
+
+				this->CheckSelectedSize(statspec);
+
+				SndPlayFx(SND_15_BEEP);
+				this->SetDirty();
+				//DeleteWindowById(WC_SELECT_STATION, 0);
+				break;
+			}
+		}
+	}
+
+	virtual void OnRightClick(Point pt, int widget)
+	{
+		if (widget >= BRSW_NEWGUI_STATIONS_LIST) {
+			const StationSpec *statspec;
+			int y = (pt.y - 20)  / 48;
+			int x = (pt.x - 144) / 65;
+			int width = this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF;
+
+			if (y >= this->vscroll2.cap) return;
+			if (x >= width) return;
+			y += this->vscroll2.pos;
+			if (y * width + x >= _railstation.station_count) return;
+
+			// Check station availability callback
+			statspec = GetCustomStationSpec(_railstation.station_class, y * width + x);
+
+			if (statspec != NULL && statspec->name != 0)
+				GuiShowTooltips(statspec->name);
+			else
+				GuiShowTooltips(STR_STAT_CLASS_DFLT);
 		}
 	}
 
@@ -1259,6 +1435,27 @@
 	{
 		CheckRedrawStationCoverage(this);
 	}
+
+	virtual void OnResize(Point delta)
+	{
+		int resize_y = delta.y / (int)this->resize.step_height;
+		//  The station class list resizes 4 listings for every 1 station preview
+		this->vscroll.cap  += resize_y * 4;
+		this->vscroll2.cap += resize_y;
+
+		int width = (this->widget[BRSW_NEWGUI_STATIONS_LIST].data & 0xFF) + delta.x / (int)this->resize.step_width;
+		this->vscroll2.count = _railstation.station_count / width  + (_railstation.station_count % width > 0);
+
+		this->widget[BRSW_NEWGUI_LIST].data          = (this->vscroll.cap  << 8) + 1;
+		this->widget[BRSW_NEWGUI_STATIONS_LIST].data = (this->vscroll2.cap << 8) + width;
+
+		int top = this->vscroll.count - this->vscroll.cap, top2 = this->vscroll2.count - this->vscroll2.cap;
+		this->vscroll.pos  = Clamp(_railstation.station_class       , 0, top  > 0 ? top  : 0);
+		this->vscroll2.pos = Clamp(_railstation.station_type / width, 0, top2 > 0 ? top2 : 0);
+
+		_railstation.window_size.x = this->width;
+		_railstation.window_size.y = this->height;
+	}
 };
 
 /** Widget definition of the standard build rail station window */
@@ -1326,6 +1523,50 @@
 {   WIDGETS_END},
 };
 
+/** Widget definition of the improved build NewGRF rail station window */
+static const Widget _imp_newstation_builder_widgets[] = {
+{   WWT_CLOSEBOX,   RESIZE_NONE,  COLOUR_DARK_GREEN,   0,    10,     0,    13, STR_BLACK_CROSS,                 STR_TOOLTIP_CLOSE_WINDOW},               // BRSW_CLOSEBOX
+{    WWT_CAPTION,  RESIZE_RIGHT,  COLOUR_DARK_GREEN,  11,   222,     0,    13, STR_STATION_BUILD_RAIL_CAPTION,  STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS},     // BRSW_CAPTION
+{      WWT_PANEL,     RESIZE_RB,  COLOUR_DARK_GREEN,   0,   222,    14,   260, 0x0,                             STR_NULL},                            // BRSW_BACKGROUND
+{      WWT_PANEL,     RESIZE_TB,  COLOUR_GREY,         7,    72,    68,   115, 0x0,                             STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP},    // BRSW_PLATFORM_DIR_X
+{      WWT_PANEL,     RESIZE_TB,  COLOUR_GREY,        75,   140,    68,   115, 0x0,                             STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP},    // BRSW_PLATFORM_DIR_Y
+
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        22,    36,   129,   140, STR_BLACK_1,                     STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_1
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        37,    51,   129,   140, STR_BLACK_2,                     STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_2
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        52,    66,   129,   140, STR_BLACK_3,                     STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_3
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        67,    81,   129,   140, STR_BLACK_4,                     STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_4
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        82,    96,   129,   140, STR_BLACK_5,                     STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_5
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        97,   111,   129,   140, STR_6,                           STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_6
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,       112,   126,   129,   140, STR_7,                           STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP}, // BRSW_PLATFORM_NUM_7
+
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        22,    36,   154,   165, STR_BLACK_1,                     STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_1
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        37,    51,   154,   165, STR_BLACK_2,                     STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_2
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        52,    66,   154,   165, STR_BLACK_3,                     STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_3
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        67,    81,   154,   165, STR_BLACK_4,                     STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_4
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        82,    96,   154,   165, STR_BLACK_5,                     STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_5
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        97,   111,   154,   165, STR_6,                           STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_6
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,       112,   126,   154,   165, STR_7,                           STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP},  // BRSW_PLATFORM_LEN_7
+
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        37,   111,   168,   179, STR_DRAG_DROP,                   STR_STATION_DRAG_DROP},               // BRSW_PLATFORM_DRAG_N_DROP
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        14,    73,   194,   205, STR_STATION_BUILD_COVERAGE_OFF,  STR_STATION_BUILD_COVERAGE_AREA_OFF_TOOLTIP},   // BRSW_HIGHLIGHT_OFF
+{    WWT_TEXTBTN,     RESIZE_TB,  COLOUR_GREY,        74,   133,   194,   205, STR_STATION_BUILD_COVERAGE_ON,   STR_STATION_BUILD_COVERAGE_AREA_ON_TOOLTIP},    // BRSW_HIGHLIGHT_ON
+
+// Spacers to keep compatability with enum that includes old newstation gui
+{      WWT_EMPTY,   RESIZE_NONE,  COLOUR_GREY,         0,     0,     0,     0, 0x0,                             STR_NULL},
+{      WWT_EMPTY,   RESIZE_NONE,  COLOUR_GREY,         0,     0,     0,     0, 0x0,                             STR_NULL},
+{      WWT_EMPTY,   RESIZE_NONE,  COLOUR_GREY,         0,     0,     0,     0, 0x0,                             STR_NULL},
+
+// improved newstations gui additions
+{     WWT_MATRIX, RESIZE_BOTTOM,  COLOUR_GREY,         7,   128,    20,   56, 0x301,                            STR_SELECT_STATION_CLASS_TIP},        // BRSW_NEWGUI_LIST
+{  WWT_SCROLLBAR, RESIZE_BOTTOM,  COLOUR_GREY,       129,   140,    20,   56, 0x0,                              STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST},    // BRSW_NEWGUI_SCROLL
+
+{     WWT_MATRIX,     RESIZE_RB,  COLOUR_GREY,       144,   208,    20,   259, 0x501,                           STR_NULL},                            // BRSW_NEWGUI_STATIONS_LIST
+
+{ WWT_SCROLL2BAR,    RESIZE_LRB,  COLOUR_GREY,       209,   220,    20,   248, 0x0,                             STR_TOOLTIP_VSCROLL_BAR_SCROLLS_LIST},    // BRSW_NEWGUI_SCROLL
+{  WWT_RESIZEBOX,   RESIZE_LRTB,  COLOUR_GREY,       209,   220,   248,   259, 0x0,                             STR_RESIZE_BUTTON},
+{   WIDGETS_END},
+};
+
 /** High level window description of the default station-build window */
 static const WindowDesc _station_builder_desc(
 	WDP_AUTO, WDP_AUTO, 148, 200, 148, 200,
@@ -1342,13 +1583,24 @@
 	_newstation_builder_widgets
 );
 
+/** High level window description of the newGRF station-build window */
+static const WindowDesc _imp_newstation_builder_desc(
+	WDP_AUTO, WDP_AUTO, 223, 261, 288, 309,
+	WC_BUILD_STATION, WC_BUILD_TOOLBAR,
+	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_CONSTRUCTION | WDF_RESIZABLE,
+	_imp_newstation_builder_widgets
+);
+
 /** Open station build window */
 static void ShowStationBuilder(Window *parent)
 {
 	if (GetNumStationClasses() <= 2 && GetNumCustomStations(STAT_CLASS_DFLT) == 1) {
 		new BuildRailStationWindow(&_station_builder_desc, parent, false);
 	} else {
-		new BuildRailStationWindow(&_newstation_builder_desc, parent, true);
+		if(_settings_client.gui.imp_newstations_gui)
+			new BuildRailStationWindow(&_imp_newstation_builder_desc, parent, true);
+		else
+			new BuildRailStationWindow(&_newstation_builder_desc, parent, true);
 	}
 }
 
diff -r ebfdcb643889 -r 09346b82f96a src/screenshot.cpp
--- src/screenshot.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/screenshot.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -16,6 +16,9 @@
 #include "map_func.h"
 #include "saveload/saveload.h"
 #include "company_func.h"
+#include "settings_type.h"
+#include "signs_base.h"
+#include "landscape.h"
 
 
 char _screenshot_format_name[8];
@@ -548,6 +551,42 @@
 	return filename;
 }
 
+static char *MakeTimelapseScreenshotName(const char *ext, const char *name = NULL)
+{
+	/* Path for automatic screenshots */
+	static char autoscreen_dir[MAX_PATH];
+	snprintf(autoscreen_dir, lengthof(autoscreen_dir), "%s%s%s", _personal_dir, "auto_screenshot", PATHSEP);
+	if (!FileExists(autoscreen_dir)) FioCreateDirectory(autoscreen_dir);
+	if (name != NULL) {
+		/* For local screens use subdirectory */
+		snprintf(autoscreen_dir, lengthof(autoscreen_dir), "%s%s%s", autoscreen_dir, name, PATHSEP);
+		if (!FileExists(autoscreen_dir)) FioCreateDirectory(autoscreen_dir);
+	}
+
+	/* File name base - "timelapse" */
+	ttd_strlcpy(_screenshot_name, "timelapse", lengthof(_screenshot_name));
+	size_t len = strlen(_screenshot_name);
+	/* Add '#' */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "#");
+	SanitizeFilename(_screenshot_name);
+	len = strlen(_screenshot_name);
+	/* Add initial numbers and file extension */
+	snprintf(&_screenshot_name[len], lengthof(_screenshot_name) - len, "000000.%s", ext);
+
+	uint diff = 5; // number of preceding zeros
+	static char filename[MAX_PATH];
+	for (uint serial = 1;; serial++) {
+		/* Try if the file name is available */
+		snprintf(filename, lengthof(filename), "%s%s", autoscreen_dir, _screenshot_name);
+		if (!FileExists(filename)) break;
+		/* If file already exists increase the serial */
+		if (serial == 10 || serial == 100 || serial == 1000 || serial == 10000 || serial == 100000) diff--;
+		snprintf(&_screenshot_name[len + diff], lengthof(_screenshot_name) - len, "%d.%s", serial, ext);
+	}
+
+	return filename;
+}
+
 void SetScreenshotType(ScreenshotType t)
 {
 	current_screenshot_type = t;
@@ -583,7 +622,52 @@
 	return sf->proc(MakeScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
 }
 
-bool MakeScreenshot()
+static bool MakeTimelapseScreenshot()
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint8 zoom = _settings_client.gui.auto_screenshot_zoomlvl;
+
+	vp.zoom = (ZoomLevel)zoom;
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = -(int)MapMaxX() * TILE_PIXELS;
+	vp.virtual_top = 0;
+	vp.virtual_width = (MapMaxX() + MapMaxY()) * TILE_PIXELS >> zoom;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = (MapMaxX() + MapMaxY()) * (TILE_PIXELS >> 1) >> zoom;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+static bool MakeTimelapseLocalScreenshot(const char *name, const Point *pt)
+{
+	ViewPort vp;
+	const ScreenshotFormat *sf;
+
+	uint16 size_x = _settings_client.gui.auto_local_screen_size_x;
+	uint16 size_y = _settings_client.gui.auto_local_screen_size_y;
+	uint8 zoom = _settings_client.gui.auto_local_screen_zoomlvl;
+
+	vp.zoom = ZoomLevel(zoom);
+
+	vp.left = 0;
+	vp.top = 0;
+	vp.virtual_left = pt->x - ((size_x / 2) << zoom);
+	vp.virtual_top = pt->y - ((size_y / 2) << zoom);
+	vp.virtual_width = size_x;
+	vp.width = vp.virtual_width;
+	vp.virtual_height = size_y;
+	vp.height = vp.virtual_height;
+
+	sf = _screenshot_formats + _cur_screenshot_format;
+	return sf->proc(MakeTimelapseScreenshotName(sf->extension, name), LargeWorldCallback, &vp, vp.width, vp.height, BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth(), _cur_palette);
+}
+
+bool MakeScreenshot(const void *name, const void *pt)
 {
 	switch (current_screenshot_type) {
 		case SC_VIEWPORT:
@@ -594,6 +678,12 @@
 		case SC_WORLD:
 			current_screenshot_type = SC_NONE;
 			return MakeWorldScreenshot();
+		case SC_TIMELAPSE:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseScreenshot();
+		case SC_TIMELAPSE_LOCAL:
+			current_screenshot_type = SC_NONE;
+			return MakeTimelapseLocalScreenshot((const char*) name, (const Point*) pt);
 		default: return false;
 	}
 }
diff -r ebfdcb643889 -r 09346b82f96a src/screenshot.h
--- src/screenshot.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/screenshot.h	Thu Apr 30 17:42:12 2009 +0200
@@ -13,10 +13,12 @@
 enum ScreenshotType {
 	SC_NONE,
 	SC_VIEWPORT,
-	SC_WORLD
+	SC_WORLD,
+	SC_TIMELAPSE,
+	SC_TIMELAPSE_LOCAL
 };
 
-bool MakeScreenshot();
+bool MakeScreenshot(const void *name = NULL, const void *pt = NULL);
 void SetScreenshotType(ScreenshotType t);
 bool IsScreenshotRequested();
 
diff -r ebfdcb643889 -r 09346b82f96a src/settings_gui.cpp
--- src/settings_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/settings_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -1129,9 +1129,24 @@
 /** Interaction sub-page */
 static SettingsPage _settings_ui_interaction_page = {_settings_ui_interaction, lengthof(_settings_ui_interaction)};
 
+static SettingEntry _settings_ui_automatic_screenshots[] = {
+	SettingEntry("gui.auto_screenshot"),
+	SettingEntry("gui.auto_screenshot_interval"),
+	SettingEntry("gui.auto_screenshot_num_commands"),
+	SettingEntry("gui.auto_screenshot_zoomlvl"),
+	SettingEntry("gui.auto_local_screen"),
+	SettingEntry("gui.auto_local_screen_types"),
+	SettingEntry("gui.auto_local_screen_interval"),
+	SettingEntry("gui.auto_local_screen_num_commands"),
+	SettingEntry("gui.auto_local_screen_zoomlvl"),
+};
+/** Automatic Screenshots sub-page */
+static SettingsPage _settings_ui_automatic_screenshots_page = {_settings_ui_automatic_screenshots, lengthof(_settings_ui_automatic_screenshots)};
+
 static SettingEntry _settings_ui[] = {
 	SettingEntry(&_settings_ui_display_page, STR_CONFIG_SETTING_DISPLAY_OPTIONS),
 	SettingEntry(&_settings_ui_interaction_page, STR_CONFIG_SETTING_INTERACTION),
+	SettingEntry(&_settings_ui_automatic_screenshots_page, STR_CONFIG_SETTING_AUTOMATIC_SCREENSHOTS),
 	SettingEntry("gui.show_finances"),
 	SettingEntry("gui.errmsg_duration"),
 	SettingEntry("gui.toolbar_pos"),
@@ -1143,6 +1158,7 @@
 	SettingEntry("gui.always_build_infrastructure"),
 	SettingEntry("gui.persistent_buildingtools"),
 	SettingEntry("gui.coloured_news_year"),
+	SettingEntry("gui.imp_newstations_gui"),
 };
 /** Interface subpage */
 static SettingsPage _settings_ui_page = {_settings_ui, lengthof(_settings_ui)};
diff -r ebfdcb643889 -r 09346b82f96a src/settings_type.h
--- src/settings_type.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/settings_type.h	Thu Apr 30 17:42:12 2009 +0200
@@ -91,6 +91,20 @@
 	bool   station_show_coverage;            ///< whether to highlight coverage area
 	bool   persistent_buildingtools;         ///< keep the building tools active after usage
 	uint8  expenses_layout;                  ///< layout of expenses window
+	bool   imp_newstations_gui;              ///< use the new newstations selection ui
+
+	uint8  auto_screenshot;                  ///< automatically take giant screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint16 auto_screenshot_interval;         ///< the time interval for automatic giant screenshots
+	uint16 auto_screenshot_num_commands;     ///< the number of commands for automatic giant screenshots
+	uint8  auto_screenshot_zoomlvl;          ///< the zoom level used for automatic giant screenshots (zoomed out means smaller filesize but less quality)
+	uint8  auto_local_screen;                ///< automatically take local screenshots (0 = off, 1 = after time interval, 2 = after number of commands, 3 = after time interval, but only if a number of commands were issued inbetween)
+	uint8  auto_local_screen_types;          ///< where to take local screenshots (0 = at signs, 1 = at stations, 2 = at signs and stations)
+	uint16 auto_local_screen_interval;       ///< the interval for automatic local screenshots
+	uint16 auto_local_screen_num_commands;   ///< the number of commands for automatic local screenshots
+	uint16 auto_local_screen_zoomlvl;        ///< the zoom level used for automatic local screenshots
+	uint16 auto_local_screen_size_x;         ///< width of automatic local screenshots
+	uint16 auto_local_screen_size_y;         ///< heigth of automatic local screenshots
+	uint8  auto_local_screen_prefix;         ///< the character used to specify local screen signs (# by default)
 
 	uint16 console_backlog_timeout;          ///< the minimum amount of time items should be in the console backlog before they will be removed in ~3 seconds granularity.
 	uint16 console_backlog_length;           ///< the minimum amount of items in the console backlog before items will be removed.
diff -r ebfdcb643889 -r 09346b82f96a src/smallmap_gui.cpp
--- src/smallmap_gui.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/smallmap_gui.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -20,6 +20,8 @@
 #include "vehicle_base.h"
 #include "sound_func.h"
 #include "window_func.h"
+#include "network/network_base.h"
+#include "network/network_func.h"
 
 #include "table/strings.h"
 #include "table/sprites.h"
@@ -1132,7 +1134,7 @@
 	virtual void OnPaint()
 	{
 		/* set the number in the title bar */
-		SetDParam(0, this->window_number + 1);
+		SetDParam(0, this->window_number + (this->window_class == WC_EXTRA_VIEW_PORT));
 
 		this->DrawWidgets();
 		this->DrawViewport();
@@ -1214,6 +1216,18 @@
 	new ExtraViewportWindow(&_extra_view_port_desc, i, tile);
 }
 
+void ShowBigBrotherWindow(ClientID client)
+{
+	if (BringWindowToFrontById(WC_BIG_BROTHER_WINDOW, client) != NULL) return;
+
+	const NetworkClientInfo *ci = NetworkFindClientInfoFromClientID(client);
+	if (ci == NULL || !IsValidCompanyID(ci->client_playas)) return;
+
+	Window *w = new ExtraViewportWindow(&_extra_view_port_desc, client, ci->last_build_coordinate);
+	w->window_class = WC_BIG_BROTHER_WINDOW;
+	w->widget[1].data = STR_BIG_BROTHER_CLIENT_NAME;
+}
+
 /**
  * Scrolls the main window to given coordinates.
  * @param x x coordinate
diff -r ebfdcb643889 -r 09346b82f96a src/strings.cpp
--- src/strings.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/strings.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -30,6 +30,8 @@
 #include "video/video_driver.hpp"
 #include "engine_base.h"
 #include "strgen/strgen.h"
+#include "network/network_base.h"
+#include "network/network_func.h"
 #include "gfx_func.h"
 
 #include "table/strings.h"
@@ -1007,6 +1009,13 @@
 				break;
 			}
 
+			case SCC_CLIENT_NAME: { // {CLIENTNAME}
+				const NetworkClientInfo *ci = NetworkFindClientInfoFromClientID((ClientID)GetInt32(&argv));
+				const char *src = (ci == NULL || StrEmpty(ci->client_name)) ? "(unnamed)" : ci->client_name;
+				buff = strecpy(buff, src, last);
+				break;
+			}
+
 			case SCC_SETCASE: { // {SETCASE}
 				/* This is a pseudo command, it's outputted when someone does {STRING.ack}
 				 * The modifier is added to all subsequent GetStringWithArgs that accept the modifier. */
diff -r ebfdcb643889 -r 09346b82f96a src/table/control_codes.h
--- src/table/control_codes.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/table/control_codes.h	Thu Apr 30 17:42:12 2009 +0200
@@ -35,6 +35,7 @@
 	SCC_COMPANY_NAME,
 	SCC_COMPANY_NUM,
 	SCC_PRESIDENT_NAME,
+	SCC_CLIENT_NAME,
 	SCC_ENGINE_NAME,
 
 	SCC_CURRENCY_COMPACT,
diff -r ebfdcb643889 -r 09346b82f96a src/table/settings.h
--- src/table/settings.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/table/settings.h	Thu Apr 30 17:42:12 2009 +0200
@@ -568,6 +568,20 @@
 	 SDTC_BOOL(gui.station_show_coverage,                S,  0, false,                        STR_NULL,                                       NULL),
 	 SDTC_BOOL(gui.persistent_buildingtools,             S,  0, false,                        STR_CONFIG_SETTING_PERSISTENT_BUILDINGTOOLS,    NULL),
 	 SDTC_BOOL(gui.expenses_layout,                      S,  0, false,                        STR_CONFIG_SETTING_EXPENSES_LAYOUT,             RedrawScreen),
+	 SDTC_BOOL(gui.imp_newstations_gui,                  S,  0, false,                        STR_CONFIG_SETTING_IMP_NEWSTATIONS_GUI,         RedrawScreen),
+
+	  SDTC_VAR(gui.auto_screenshot,           SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_screenshot_interval, SLE_UINT16, S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_screenshot_num_commands,SLE_UINT16,S,0,   100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_screenshot_zoomlvl,   SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_GIANT_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen,         SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN,           NULL),
+	  SDTC_VAR(gui.auto_local_screen_types,   SLE_UINT8, S, MS,     0,        0,        2, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_TYPES,     NULL),
+	  SDTC_VAR(gui.auto_local_screen_interval,SLE_UINT16,S,  0,    15,        1,     1000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_INTERVAL,  NULL),
+	  SDTC_VAR(gui.auto_local_screen_num_commands,SLE_UINT16,S,0, 100,       10,    50000, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_NUM_COMMANDS, NULL),
+	  SDTC_VAR(gui.auto_local_screen_zoomlvl, SLE_UINT8, S, MS,     0,        0,        3, 1, STR_CONFIG_SETTING_AUTO_LOCAL_SCREEN_ZOOMLVL,   NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_x, SLE_UINT16, S,  0,   800,      100,     8000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_size_y, SLE_UINT16, S,  0,   600,      100,     6000, 1, STR_NULL,                                       NULL),
+	  SDTC_VAR(gui.auto_local_screen_prefix,  SLE_UINT8, S,  0,    35,        0,      255, 1, STR_NULL,                                       NULL),
 
 	  SDTC_VAR(gui.console_backlog_timeout,  SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
 	  SDTC_VAR(gui.console_backlog_length,   SLE_UINT16, S,  0,   100,       10,    65500, 0, STR_NULL,                                       NULL),
diff -r ebfdcb643889 -r 09346b82f96a src/table/strgen_tables.h
--- src/table/strgen_tables.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/table/strgen_tables.h	Thu Apr 30 17:42:12 2009 +0200
@@ -106,6 +106,7 @@
 	{"COMPANY",         EmitSingleChar, SCC_COMPANY_NAME,       1, C_NONE},
 	{"COMPANYNUM",      EmitSingleChar, SCC_COMPANY_NUM,        1, C_NONE},
 	{"PRESIDENTNAME",   EmitSingleChar, SCC_PRESIDENT_NAME,     1, C_NONE},
+	{"CLIENTNAME",      EmitSingleChar, SCC_CLIENT_NAME,        1, C_NONE},
 
 	{"",                EmitSingleChar, '\n',                   0, C_DONTCOUNT},
 	{"{",               EmitSingleChar, '{',                    0, C_DONTCOUNT},
diff -r ebfdcb643889 -r 09346b82f96a src/timelapse.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ src/timelapse.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -0,0 +1,131 @@
+/* $Id */
+
+/** @file timelapse.cpp Timelapse patch */
+
+#include "stdafx.h"
+#include "openttd.h"
+#include "functions.h"
+#include "core/bitmath_func.hpp"
+#include "settings_type.h"
+#include "date_type.h"
+#include "screenshot.h"
+#include "signs_base.h"
+#include "station_base.h"
+#include "landscape.h"
+#include "map_func.h"
+#include "transparency.h"
+#include "debug.h"
+
+uint32 _command_count_giant = 0;
+uint32 _command_count_local = 0;
+
+extern Date _date;
+
+void DoGiantScreenshot()
+{
+	/* save the current transparency setting */
+	uint8 transparency_backup = _transparency_opt;
+	/* disable transparency for all unlocked transparency settings */
+	_transparency_opt &= _transparency_lock;
+	/* take a giant screenshot */
+	SetScreenshotType(SC_TIMELAPSE);
+	MakeScreenshot();
+	/* reset transparency to the former state */
+	_transparency_opt = transparency_backup;
+}
+
+void DoLocalScreenshots()
+{
+	/* save the current transparency setting */
+	uint8 transparency_backup = _transparency_opt;
+	/* disable transparency for all unlocked transparency settings */
+	_transparency_opt &= _transparency_lock;
+
+	/* iterate through signs and take local screenshots if appropriate */
+	if (_settings_client.gui.auto_local_screen_types != 1) { // 1 == stations only
+		const Sign *si;
+		FOR_ALL_SIGNS(si) {
+			if (si->name != NULL && *si->name == _settings_client.gui.auto_local_screen_prefix) {
+				SetScreenshotType(SC_TIMELAPSE_LOCAL);
+				const Point pt = RemapCoords2(si->x, si->y);
+				MakeScreenshot(si->name, &pt);
+			}
+		}
+	}
+
+	/* iterate through stations and take local screenshots if appropriate */
+	if (_settings_client.gui.auto_local_screen_types != 0) { // 0 == signs only
+		const Station *s;
+		FOR_ALL_STATIONS(s) {
+			if (s->name != NULL && *s->name == _settings_client.gui.auto_local_screen_prefix) {
+				SetScreenshotType(SC_TIMELAPSE_LOCAL);
+				const Point pt = RemapCoords2(TileX(s->xy) * TILE_SIZE, TileY(s->xy) * TILE_SIZE);
+				MakeScreenshot(s->name, &pt);
+			}
+		}
+	}
+	/* reset transparency to the former state */
+	_transparency_opt = transparency_backup;
+}
+
+void CheckGiantScreenshot()
+{
+	switch (_settings_client.gui.auto_screenshot) {
+		case 0: break; // off
+		case 2: break; // number of commands
+		case 1: // time interval
+			if (_date % _settings_client.gui.auto_screenshot_interval == 0) DoGiantScreenshot();
+			break;
+		case 3: // time interval and number of commands
+			if (_date % _settings_client.gui.auto_screenshot_interval != 0) break;
+			if (_command_count_giant < _settings_client.gui.auto_screenshot_num_commands) break;
+			_command_count_giant = 0;
+			DoGiantScreenshot();
+			break;
+		default: NOT_REACHED();
+	}
+}
+
+void CheckLocalScreenshots()
+{
+	switch (_settings_client.gui.auto_local_screen) {
+		case 0: break; // off
+		case 2: break; // number of commands
+		case 1: // time interval
+			if (_date % _settings_client.gui.auto_local_screen_interval == 0) DoLocalScreenshots();
+			break;
+		case 3: // time interval and number of commands
+			if (_date % _settings_client.gui.auto_local_screen_interval != 0) break;
+			if (_command_count_local < _settings_client.gui.auto_local_screen_num_commands) break;
+			_command_count_local = 0;
+			DoLocalScreenshots();
+			break;
+		default: NOT_REACHED();
+	}
+}
+
+void TimelapseDailyCheck()
+{
+	DEBUG(misc, 1, "TimelapseDailyCheck()! _command_count_giant=%d, _command_count_local=%d)", _command_count_giant, _command_count_local);
+
+	CheckLocalScreenshots();
+	CheckGiantScreenshot();
+}
+
+void TimelapseCommandCheck()
+{
+	if ((_settings_client.gui.auto_screenshot & 0x02) != 0) {
+		_command_count_giant++;
+		if ((_settings_client.gui.auto_screenshot == 2) && (_command_count_giant >= _settings_client.gui.auto_screenshot_num_commands)) {
+			_command_count_giant = 0;
+			DoGiantScreenshot();
+		}
+	}
+	if ((_settings_client.gui.auto_local_screen & 0x02) != 0) {
+		_command_count_local++;
+		if ((_settings_client.gui.auto_local_screen == 2) && (_command_count_local >= _settings_client.gui.auto_local_screen_num_commands)) {
+			_command_count_local = 0;
+			DoLocalScreenshots();
+		}
+	}
+}
diff -r ebfdcb643889 -r 09346b82f96a src/timelapse.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ src/timelapse.h	Thu Apr 30 17:42:12 2009 +0200
@@ -0,0 +1,11 @@
+/* $Id */
+
+/** @file timelapse.h Functions of the timelapse patch */
+
+#ifndef TIMELAPSE_H
+#define TIMELAPSE_H
+
+void TimelapseDailyCheck();
+void TimelapseCommandCheck();
+
+#endif /* TIMELAPSE_H */
diff -r ebfdcb643889 -r 09346b82f96a src/window.cpp
--- src/window.cpp	Thu Apr 30 12:11:51 2009 +0000
+++ src/window.cpp	Thu Apr 30 17:42:12 2009 +0200
@@ -1304,7 +1304,6 @@
 static bool HandleDragDrop()
 {
 	if (_special_mouse_mode != WSM_DRAGDROP) return true;
-	if (_left_button_down) return false;
 
 	Window *w = GetCallbackWnd();
 
@@ -1313,7 +1312,13 @@
 		Point pt;
 		pt.x = _cursor.pos.x - w->left;
 		pt.y = _cursor.pos.y - w->top;
-		w->OnDragDrop(pt, GetWidgetFromPos(w, pt.x, pt.y));
+
+		if (_left_button_down) {
+			w->OnDragMove(pt, GetWidgetFromPos(w, pt.x, pt.y));
+			return false;
+		} else {
+			w->OnDragDrop(pt, GetWidgetFromPos(w, pt.x, pt.y));
+		}
 	}
 
 	ResetObjectToPlace();
diff -r ebfdcb643889 -r 09346b82f96a src/window_gui.h
--- src/window_gui.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/window_gui.h	Thu Apr 30 17:42:12 2009 +0200
@@ -455,6 +455,13 @@
 	virtual void OnDragDrop(Point pt, int widget) {}
 
 	/**
+	 * An 'object' is being dragged.
+	 * @param pt     the point inside the window where the cursor points to.
+	 * @param widget the widget where the cursor points to.
+	 */
+	virtual void OnDragMove(Point pt, int widget) {}
+
+	/**
 	 * Handle the request for (viewport) scrolling.
 	 * @param delta the amount the viewport must be scrolled.
 	 */
diff -r ebfdcb643889 -r 09346b82f96a src/window_type.h
--- src/window_type.h	Thu Apr 30 12:11:51 2009 +0000
+++ src/window_type.h	Thu Apr 30 17:42:12 2009 +0200
@@ -79,6 +79,7 @@
 	WC_PERFORMANCE_DETAIL,
 	WC_CONSOLE,
 	WC_EXTRA_VIEW_PORT,
+	WC_BIG_BROTHER_WINDOW,
 	WC_CLIENT_LIST,
 	WC_NETWORK_STATUS_WINDOW,
 	WC_CUSTOM_CURRENCY,
