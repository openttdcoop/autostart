Index: src/rail_gui.cpp
===================================================================
--- src/rail_gui.cpp	(revision 19525)
+++ src/rail_gui.cpp	(working copy)
@@ -50,12 +50,15 @@
 static const SignalType _default_signal_type[] = {SIGTYPE_NORMAL, SIGTYPE_PBS, SIGTYPE_PBS_ONEWAY};
 
 struct RailStationGUISettings {
-	Axis orientation;                 ///< Currently selected rail station orientation
+	Axis orientation;                                   ///< Currently selected rail station orientation
 
-	bool newstations;                 ///< Are custom station definitions available?
-	StationClassIDByte station_class; ///< Currently selected custom station class (if newstations is \c true )
-	byte station_type;                ///< Station type within the currently selected custom station class (if newstations is \c true )
-	byte station_count;               ///< Number of custom stations (if newstations is \c true )
+	bool newstations;                                   ///< Are custom station definitions available?
+	StationClassIDByte station_class;                   ///< Currently selected custom station class (if newstations is \c true )
+	byte station_type;                                  ///< Station type within the currently selected custom station class (if newstations is \c true )
+	byte station_count;                                 ///< Number of custom stations (if newstations is \c true )
+	byte station_class_count;                           ///< Number of custom stations classes (if newstations is \c true)
+	StationClassIDByte station_classes[STAT_CLASS_MAX]; ///< Cache of custom stations classes (if newstations is \c true)
+	uint16 station_types_list_size;   ///< Last used size of the station type list (#BRSW_NEWST_STATION_TYPES_LIST) (if newstations is \c true)
 };
 static RailStationGUISettings _railstation; ///< Settings of the station builder GUI
 
@@ -936,6 +939,12 @@
 enum BuildRailStationWidgets {
 	BRSW_BACKGROUND,
 
+	BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT,
+
+	BRSW_SHOW_NEWST_STATION_CLASSES,
+	BRSW_NEWST_STATION_CLASSES_LIST,
+	BRSW_NEWST_STATION_CLASSES_SCROLL,
+
 	BRSW_PLATFORM_DIR_X,
 	BRSW_PLATFORM_DIR_Y,
 
@@ -960,18 +969,26 @@
 	BRSW_HIGHLIGHT_OFF,
 	BRSW_HIGHLIGHT_ON,
 
-	BRSW_SHOW_NEWST_ADDITIONS,
-	BRSW_NEWST_DROPDOWN,
-	BRSW_NEWST_LIST,
-	BRSW_NEWST_SCROLL,
+	BRSW_SHOW_NEWST_STATION_TYPES,
+	BRSW_NEWST_STATION_TYPES_LIST,
+	BRSW_NEWST_STATION_TYPES_SCROLL,
 
+	BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT,
+
+	BRSW_STATION_COVERAGE,
+
+	BRSW_SHOW_NEWST_BOTTOM_BAR,
+	BRSW_NEWST_RESIZE,
+
 	BRSW_PLATFORM_NUM_BEGIN = BRSW_PLATFORM_NUM_1 - 1,
 	BRSW_PLATFORM_LEN_BEGIN = BRSW_PLATFORM_LEN_1 - 1,
 };
 
 struct BuildRailStationWindow : public PickerWindowBase {
 private:
-	uint line_height; ///< Height of a single line in the newstation selection matrix (#BRSW_NEWST_LIST widget).
+	uint line_height;              ///< Height of a single line in the newstations classes and types selection matrices
+	                               ///  (#BRSW_NEWST_STATION_CLASSES_LIST & #BRSW_NEWST_STATION_TYPES_LIST widgets).
+	int station_coverage_increase; ///< Of how many pixels should the station coverage area text be increased (#BRSW_STATION_COVERAGE widget).
 
 	/**
 	 * Verify whether the currently selected station size is allowed after selecting a new station class/type.
@@ -1015,12 +1032,105 @@
 		return list;
 	}
 
+	/** Setup window settings for the default window. */
+	void SetupDefaultWindow()
+	{
+		/* New stations are not available, so ensure the default station
+		 * type is 'selected'. */
+		_railstation.station_class = STAT_CLASS_DFLT;
+		_railstation.station_type = 0;
+	}
+
+	/**
+	 * Setup window settings and station matrices (#BRSW_NEWST_STATION_CLASSES_LIST & #BRSW_NEWST_STATION_TYPES_LIST) scrollbars for the newstations window.
+	 * When building the window, the scrollbars position is set to try to center the previously selected element.
+	 * When reloading the NewGRF, the scrollbars position is set to try to maintain the previous position.
+	 * The scrollbars capacity can't change and is thus only set when building the window.
+	 */
+	void SetupNewstationsWindow(bool on_newgrf_reload)
+	{
+		/* When reloading NewGRF files, ensure the previously selected station class and type are still valid. */
+		if (on_newgrf_reload) _railstation.station_class = (StationClassID) min(_railstation.station_class, GetNumStationClasses() - 1);
+		_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+		if (on_newgrf_reload) _railstation.station_type = min(_railstation.station_type, _railstation.station_count - 1);
+
+		/* Setup the station classes scrollbar */
+		this->vscroll.SetCount(_railstation.station_class_count);
+		if (!on_newgrf_reload) this->vscroll.SetCapacity(GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_CLASSES_LIST)->widget_data, MAT_ROW_START, MAT_ROW_BITS));
+		uint desired_pos = on_newgrf_reload ? this->vscroll.GetPosition() : _railstation.station_class - (this->vscroll.GetCapacity() / 2);
+		this->vscroll.SetPosition(Clamp(desired_pos, 0, max(this->vscroll.GetCount() - this->vscroll.GetCapacity(), 0)));
+
+		/* Setup the station types scrollbar */
+		uint16 widget_data = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data;
+		uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+		this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+		if (!on_newgrf_reload) this->vscroll2.SetCapacity(GB(widget_data, MAT_ROW_START, MAT_ROW_BITS));
+		desired_pos = on_newgrf_reload ? this->vscroll2.GetPosition() : (_railstation.station_type / col_count) - (this->vscroll2.GetCapacity() / 2);
+		this->vscroll2.SetPosition(Clamp(desired_pos, 0, max(this->vscroll2.GetCount() - this->vscroll2.GetCapacity(), 0)));
+	}
+
+	/** Returns true if the BuildRailStationWindow should display newstations, false otherwise. */
+	static bool ShouldUseNewstationsWindow()
+	{
+		return (GetNumStationClasses() > 2 || GetNumCustomStations(STAT_CLASS_DFLT) != 1);
+	}
+
+	/** Map station class ids to their position in the matrix (#BRSW_NEWST_STATION_CLASSES_LIST). */
+	void MapStationsClassesToMatrixPosition()
+	{
+		int num_station_classes = GetNumStationClasses();
+		byte matrix_pos = 0;
+		for (StationClassID statclass = STAT_CLASS_BEGIN; statclass < num_station_classes; statclass++) {
+			if (statclass == STAT_CLASS_WAYP) continue;
+			_railstation.station_classes[matrix_pos++] = statclass;
+		}
+		_railstation.station_class_count = matrix_pos;
+	}
+
+	/** Display or not the first plane of the given stacked widget */
+	void DisplayPlane(int widget, bool display)
+	{
+		this->GetWidget<NWidgetStacked>(widget)->SetDisplayedPlane(display ? 0 : SZSP_NONE);
+	}
+
+	/** Set the planes to display to present the default or newstations window. */
+	void SetDisplayedPlanes(bool newstations)
+	{
+		this->DisplayPlane(BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT, !newstations);
+		this->DisplayPlane(BRSW_SHOW_NEWST_STATION_CLASSES, newstations);
+		this->DisplayPlane(BRSW_SHOW_NEWST_STATION_TYPES, newstations);
+		this->DisplayPlane(BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT, !newstations);
+		this->DisplayPlane(BRSW_SHOW_NEWST_BOTTOM_BAR, newstations);
+	}
+
+	/** Returns the station type denoted by a point over the station types list widget (#BRSW_NEWST_STATION_TYPES_LIST), -1 if none was found. */
+	int GetStationType(const Point pt)
+	{
+		const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+		const uint col_count = GB(stations_list_nwi->widget_data, MAT_COL_START, MAT_COL_BITS);
+		const uint row_count = GB(stations_list_nwi->widget_data, MAT_ROW_START, MAT_ROW_BITS);
+		int y = (pt.y - stations_list_nwi->pos_y) / (stations_list_nwi->current_y / row_count);
+		const uint x = (pt.x - stations_list_nwi->pos_x) / (stations_list_nwi->current_x / col_count);
+
+		if (y >= this->vscroll2.GetCapacity()) return -1;
+		if (x >= col_count) return -1;
+		y += this->vscroll2.GetPosition();
+		const uint station_type = y * col_count + x;
+		if (station_type >= _railstation.station_count) return -1;
+
+		return station_type;
+	}
+
 public:
-	BuildRailStationWindow(const WindowDesc *desc, Window *parent, bool newstation) : PickerWindowBase(parent)
+	BuildRailStationWindow(const WindowDesc *desc, Window *parent) : PickerWindowBase(parent)
 	{
+		bool newstations = this->ShouldUseNewstationsWindow();
+		_railstation.newstations = newstations;
+
+		if (newstations) this->MapStationsClassesToMatrixPosition();
+
 		this->CreateNestedTree(desc);
-		NWidgetStacked *newst_additions = this->GetWidget<NWidgetStacked>(BRSW_SHOW_NEWST_ADDITIONS);
-		newst_additions->SetDisplayedPlane(newstation ? 0 : SZSP_NONE);
+		this->SetDisplayedPlanes(newstations);
 		this->FinishInitNested(desc, TRANSPORT_RAIL);
 
 		this->LowerWidget(_railstation.orientation + BRSW_PLATFORM_DIR_X);
@@ -1033,27 +1143,75 @@
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_OFF, !_settings_client.gui.station_show_coverage);
 		this->SetWidgetLoweredState(BRSW_HIGHLIGHT_ON, _settings_client.gui.station_show_coverage);
 
-		_railstation.newstations = newstation;
+		if (newstations) {
+			if (_railstation.station_types_list_size != 0) {
+				/* The last size of the station types list was stored.
+				 * Check if we need to resize the window to restore its previous size. */
+				const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+				uint16 widget_data = stations_list_nwi->widget_data;
 
-		if (newstation) {
-			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+				uint stored_col_count = GB(_railstation.station_types_list_size, MAT_COL_START, MAT_COL_BITS);
+				uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+				uint stored_row_count = GB(_railstation.station_types_list_size, MAT_ROW_START, MAT_ROW_BITS);
+				uint row_count = GB(widget_data, MAT_ROW_START, MAT_ROW_BITS);
 
-			this->vscroll.SetCount(_railstation.station_count);
-			this->vscroll.SetCapacity(GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_LIST)->widget_data, MAT_ROW_START, MAT_ROW_BITS));
-			this->vscroll.SetPosition(Clamp(_railstation.station_type - 2, 0, max(this->vscroll.GetCount() - this->vscroll.GetCapacity(), 0)));
+				if (stored_col_count != col_count || stored_row_count != row_count) {
+					/* Resize the window to its previous size. */
+					const Dimension cell_dim = {stations_list_nwi->current_x / col_count, stations_list_nwi->current_y / row_count};
+					int delta_x = (stored_col_count - col_count) * cell_dim.width;
+					int delta_y = (stored_row_count - row_count) * cell_dim.height;
+					this->ReInit(delta_x, delta_y);
+				}
+			}
+			this->SetupNewstationsWindow(false);
 		} else {
-			/* New stations are not available, so ensure the default station
-			 * type is 'selected'. */
-			_railstation.station_class = STAT_CLASS_DFLT;
-			_railstation.station_type = 0;
+			this->SetupDefaultWindow();
 		}
 	}
 
 	virtual ~BuildRailStationWindow()
 	{
+		if (_railstation.newstations) {
+			/* Store the current size of the station types list
+			 * (used to restore window size on next gui invocation). */
+			_railstation.station_types_list_size = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data;
+		}
+
 		DeleteWindowById(WC_SELECT_STATION, 0);
 	}
 
+	/** Called after the NewGRF list was reloaded (saveload/afterload.cpp:ReloadNewGRFData()). */
+	virtual void OnInvalidateData(int data)
+	{
+		bool newstations = this->ShouldUseNewstationsWindow();
+
+		if (!_railstation.newstations && !newstations) return;
+
+		if (newstations) this->MapStationsClassesToMatrixPosition();
+
+		if (_railstation.newstations != newstations) {
+			/* Switch between default and newstations gui or the inverse. */
+			_railstation.newstations = newstations;
+			this->SetDisplayedPlanes(newstations);
+			this->ReInit();
+		}
+
+		if (newstations) {
+			this->SetupNewstationsWindow(true);
+		} else {
+			this->SetupDefaultWindow();
+		}
+
+		this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
+	}
+
+	virtual void OnInit()
+	{
+		if (_railstation.newstations) {
+			this->line_height = FONT_HEIGHT_NORMAL + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
+		}
+	}
+
 	virtual void OnPaint()
 	{
 		bool newstations = _railstation.newstations;
@@ -1088,48 +1246,55 @@
 		this->DrawWidgets();
 
 		/* 'Accepts' and 'Supplies' texts. */
-		int top = this->GetWidget<NWidgetBase>(BRSW_HIGHLIGHT_ON)->pos_y + this->GetWidget<NWidgetBase>(BRSW_HIGHLIGHT_ON)->current_y + WD_PAR_VSEP_NORMAL;
-		NWidgetBase *back_nwi = this->GetWidget<NWidgetBase>(BRSW_BACKGROUND);
-		int right = back_nwi->pos_x +  back_nwi->current_x;
-		int bottom = back_nwi->pos_y +  back_nwi->current_y;
-		top = DrawStationCoverageAreaText(back_nwi->pos_x + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, false) + WD_PAR_VSEP_NORMAL;
-		top = DrawStationCoverageAreaText(back_nwi->pos_x + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, true) + WD_PAR_VSEP_NORMAL;
-		/* Resize background if the text is not equally long as the window. */
-		if (top > bottom || (top < bottom && back_nwi->current_y > back_nwi->smallest_y)) {
-			ResizeWindow(this, 0, top - bottom);
+		NWidgetBase *station_coverage_nwi = this->GetWidget<NWidgetBase>(BRSW_STATION_COVERAGE);
+		uint left = station_coverage_nwi->pos_x;
+		uint right = left + station_coverage_nwi->current_x;
+		uint top = station_coverage_nwi->pos_y;
+		top = DrawStationCoverageAreaText(left + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, false) + WD_PAR_VSEP_NORMAL;
+		top = DrawStationCoverageAreaText(left + WD_FRAMERECT_LEFT, right - WD_FRAMERECT_RIGHT, top, SCT_ALL, rad, true) + WD_PAR_VSEP_NORMAL;
+		/* Resize background if the text is not equally long as the 'station coverage' widget. */
+		const uint text_height = top - station_coverage_nwi->pos_y + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
+		if (text_height != station_coverage_nwi->current_y) {
+			/* Sets the additional height needed to #BRSW_STATION_COVERAGE to fit
+				the coverage area text (UpdateWidgetSize(#BRSW_STATION_COVERAGE)) */
+			this->station_coverage_increase = text_height - (this->line_height * 2);
+			this->ReInit(0, this->station_coverage_increase);
 		}
 	}
 
 	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
 		switch (widget) {
-			case BRSW_NEWST_DROPDOWN: {
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				/* Increase width to match the widest custom station class name */
 				Dimension d = {0, 0};
-				for (uint i = 0; i < GetNumStationClasses(); i++) {
-					if (i == STAT_CLASS_WAYP) continue;
-					SetDParam(0, GetStationClassName((StationClassID)i));
+				for (byte i = 0; i < _railstation.station_class_count; i++) {
+					SetDParam(0, GetStationClassName(_railstation.station_classes[i]));
 					d = maxdim(d, GetStringBoundingBox(STR_BLACK_STRING));
 				}
-				d.width += padding.width;
-				d.height += padding.height;
-				*size = maxdim(*size, d);
-				break;
-			}
-			case BRSW_NEWST_LIST: {
-				Dimension d = GetStringBoundingBox(STR_STATION_CLASS_DFLT);
-				for (StationClassID statclass = STAT_CLASS_BEGIN; statclass < (StationClassID)GetNumStationClasses(); statclass++) {
-					if (statclass == STAT_CLASS_WAYP) continue;
-					for (uint16 j = 0; j < GetNumCustomStations(statclass); j++) {
-						const StationSpec *statspec = GetCustomStationSpec(statclass, j);
-						if (statspec != NULL && statspec->name != 0) d = maxdim(d, GetStringBoundingBox(statspec->name));
-					}
-				}
 				size->width = max(size->width, d.width + padding.width);
 
-				this->line_height = FONT_HEIGHT_NORMAL + WD_MATRIX_TOP + WD_MATRIX_BOTTOM;
-				size->height = GB(this->GetWidget<NWidgetCore>(widget)->widget_data, MAT_ROW_START, MAT_ROW_BITS) * this->line_height;
-				break;
-			}
+				size->height = 5 * this->line_height + 1;
+				resize->height = this->line_height;
+			} break;
+
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				const uint station_cell_height = this->line_height * 4;
+				size->height = 4 * station_cell_height;
+				resize->height = station_cell_height;
+			} break;
+
+			case BRSW_STATION_COVERAGE: {
+				/* Widget height is two lines eventually increased by the height needed
+					to fit the coverage text */
+				size->height = this->line_height * 2 + this->station_coverage_increase;
+			} break;
+
+			case BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT:
+			case BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT: {
+				/* Force height resizing when using newstations gui */
+				if (_railstation.newstations) resize->height = 1;
+			} break;
 		}
 	}
 
@@ -1162,32 +1327,69 @@
 				}
 				break;
 
-			case BRSW_NEWST_LIST: {
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				/* Draw the custom stations classes names */
 				uint y = r.top;
-				for (uint16 i = this->vscroll.GetPosition(); i < _railstation.station_count && this->vscroll.IsVisible(i); i++) {
-					const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, i);
+				for (uint16 i = this->vscroll.GetPosition(); i < _railstation.station_class_count && this->vscroll.IsVisible(i); i++) {
+					StationClassIDByte statclass = _railstation.station_classes[i];
+					DrawString(r.left + WD_MATRIX_LEFT, r.right - WD_MATRIX_RIGHT, y + WD_MATRIX_TOP, GetStationClassName(statclass),
+							statclass == _railstation.station_class ? TC_WHITE : TC_BLACK);
+					y += this->line_height;
+				}
+			} break;
 
-					StringID str = STR_STATION_CLASS_DFLT;
-					if (statspec != NULL && statspec->name != 0) {
-						if (HasBit(statspec->callback_mask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
-							GfxFillRect(r.left + 1, y + 1, r.right - 1, y + this->line_height - 2, 0, FILLRECT_CHECKER);
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				/* Draw station types of the current custom station class */
+				const NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(widget);
+				uint16 widget_data = stations_list_nwi->widget_data;
+				const uint row_count = GB(widget_data, MAT_ROW_START, MAT_ROW_BITS);
+				const uint col_count = GB(widget_data, MAT_COL_START, MAT_COL_BITS);
+				const Dimension cell_dim = {stations_list_nwi->current_x / col_count, stations_list_nwi->current_y / row_count};
+				/* Topmost-leftest cell */
+				const Rect cell = {r.left, r.top, r.left + cell_dim.width, r.top + cell_dim.height};
+
+				uint y = 0;
+				uint x = 0;
+				DrawPixelInfo *old_dpi;
+
+				for (uint16 i = this->vscroll2.GetPosition(); i < this->vscroll2.GetCount() && this->vscroll2.IsVisible(i); i++) {
+					x = 0;
+					for (uint16 station = i * col_count; station < _railstation.station_count && station < (i + 1) * col_count; station++) {
+						/* Draw selected cell as lowered */
+						if (_railstation.station_type == station) {
+							/* Rightest cells don't overwrite scrollbar */
+							const int adjust_x = (x / cell_dim.width) + 1 == col_count ? -2 : -1;
+							/* Bottom cells don't overwrite coverage area text */
+							const int adjust_y = (y / cell_dim.height) + 1 == this->vscroll2.GetCapacity() ? -1 : 0;
+							DrawFrameRect(cell.left + x, cell.top + y, cell.right + adjust_x + x, cell.bottom + adjust_y + y, stations_list_nwi->colour, FR_LOWERED);
 						}
-						str = statspec->name;
+
+						/* Draw station sprite */
+						if (FillDrawPixelInfo(&tmp_dpi, cell.left + x, cell.top + 1 + y, cell_dim.width, cell_dim.height + 1)) {
+							old_dpi = _cur_dpi;
+							_cur_dpi = &tmp_dpi;
+							if (!DrawStationTile(32, 16, _cur_railtype, _railstation.orientation, _railstation.station_class, station)) {
+								StationPickerDrawSprite(32, 16, STATION_RAIL, _cur_railtype, INVALID_ROADTYPE, 2 + _railstation.orientation);
+							}
+							_cur_dpi = old_dpi;
+						}
+
+						/* Draw unavailable station as disabled */
+						const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station);
+						if (statspec != NULL && statspec->name != 0) {
+							if (HasBit(statspec->callback_mask, CBM_STATION_AVAIL) && GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) {
+								GfxFillRect(cell.left + 1 + x, cell.top + 1 + y, cell.right - 2 + x, cell.bottom - 1 + y, 0, FILLRECT_CHECKER);
+							}
+						}
+
+						x += cell_dim.width;
 					}
-					DrawString(r.left + WD_MATRIX_LEFT, r.right - WD_MATRIX_RIGHT, y + WD_MATRIX_TOP, str, i == _railstation.station_type ? TC_WHITE : TC_BLACK);
-
-					y += this->line_height;
+					y += cell_dim.height;
 				}
-				break;
-			}
+			} break;
 		}
 	}
 
-	virtual void SetStringParameters(int widget) const
-	{
-		if (widget == BRSW_NEWST_DROPDOWN) SetDParam(0, GetStationClassName(_railstation.station_class));
-	}
-
 	virtual void OnClick(Point pt, int widget, int click_count)
 	{
 		switch (widget) {
@@ -1314,126 +1516,209 @@
 				this->SetDirty();
 				break;
 
-			case BRSW_NEWST_DROPDOWN:
-				ShowDropDownList(this, BuildStationClassDropDown(), _railstation.station_class, BRSW_NEWST_DROPDOWN);
-				break;
-
-			case BRSW_NEWST_LIST: {
-				const StationSpec *statspec;
-				int y = (pt.y - this->GetWidget<NWidgetBase>(BRSW_NEWST_LIST)->pos_y) / this->line_height;
-
+			case BRSW_NEWST_STATION_CLASSES_LIST: {
+				int y = (pt.y - this->GetWidget<NWidgetBase>(widget)->pos_y) / this->line_height;
 				if (y >= this->vscroll.GetCapacity()) return;
 				y += this->vscroll.GetPosition();
-				if (y >= _railstation.station_count) return;
+				if (y >= _railstation.station_class_count) return;
 
+				StationClassIDByte statclass = _railstation.station_classes[y];
+				if (_railstation.station_class != statclass) {
+					/* A new custom station class is selected */
+					_railstation.station_class = statclass;
+					_railstation.station_type  = 0;
+					_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+
+					this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
+
+					uint col_count = GB(this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST)->widget_data, MAT_COL_START, MAT_COL_BITS);
+					this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+					this->vscroll2.SetPosition(_railstation.station_type);
+				}
+
+				SndPlayFx(SND_15_BEEP);
+				this->SetDirty();
+				DeleteWindowById(WC_SELECT_STATION, 0);
+			} break;
+
+			case BRSW_NEWST_STATION_TYPES_LIST: {
+				int station_type = this->GetStationType(pt);
+				if (station_type == -1) return;
+
 				/* Check station availability callback */
-				statspec = GetCustomStationSpec(_railstation.station_class, y);
+				const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station_type);
 				if (statspec != NULL &&
 					HasBit(statspec->callback_mask, CBM_STATION_AVAIL) &&
 					GB(GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE), 0, 8) == 0) return;
 
-				_railstation.station_type = y;
+				/* Select current station type */
+				_railstation.station_type = station_type;
 
 				this->CheckSelectedSize(statspec);
 
 				SndPlayFx(SND_15_BEEP);
 				this->SetDirty();
 				DeleteWindowById(WC_SELECT_STATION, 0);
-				break;
-			}
+			} break;
 		}
 	}
 
-	virtual void OnDropdownSelect(int widget, int index)
+	virtual void OnRightClick(Point pt, int widget)
 	{
-		if (_railstation.station_class != index) {
-			_railstation.station_class = (StationClassID)index;
-			_railstation.station_type  = 0;
-			_railstation.station_count = GetNumCustomStations(_railstation.station_class);
+		if (widget == BRSW_NEWST_STATION_TYPES_LIST) {
+			int station_type = this->GetStationType(pt);
+			if (station_type == -1) return;
 
-			this->CheckSelectedSize(GetCustomStationSpec(_railstation.station_class, _railstation.station_type));
+			const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, station_type);
 
-			this->vscroll.SetCount(_railstation.station_count);
-			this->vscroll.SetPosition(_railstation.station_type);
+			/* Show station type name as tooltip (forced in black) */
+			uint64 args[1];
+			args[0] = (uint64)(size_t)(statspec != NULL && statspec->name != 0 ? statspec->name : STR_STATION_CLASS_DFLT);
+			GuiShowTooltips(STR_BLACK_STRING, 1, args);
 		}
-
-		SndPlayFx(SND_15_BEEP);
-		this->SetDirty();
-		DeleteWindowById(WC_SELECT_STATION, 0);
 	}
 
 	virtual void OnTick()
 	{
 		CheckRedrawStationCoverage(this);
 	}
+
+	virtual void OnResize()
+	{
+		if (_railstation.newstations) {
+			/* Update custom stations classes scrollbar */
+			uint old_capacity = this->vscroll.GetCapacity();
+			this->vscroll.SetCapacityFromWidget(this, BRSW_NEWST_STATION_CLASSES_LIST, 1);
+			uint capacity = this->vscroll.GetCapacity();
+			this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_CLASSES_LIST)->widget_data = (capacity  << MAT_ROW_START) + (1 << MAT_COL_START);
+			if (!this->vscroll.IsVisible(_railstation.station_class) && old_capacity > capacity) {
+				/* Ensure that the currently selected class is visible */
+				this->vscroll.UpdatePosition(old_capacity - capacity);
+			}
+
+			/* Update custom stations types scrollbar */
+			old_capacity = this->vscroll2.GetCapacity();
+			this->vscroll2.SetCapacityFromWidget(this, BRSW_NEWST_STATION_TYPES_LIST, 0);
+			capacity = this->vscroll2.GetCapacity();
+
+			NWidgetCore *stations_list_nwi = this->GetWidget<NWidgetCore>(BRSW_NEWST_STATION_TYPES_LIST);
+
+			const uint col_count = stations_list_nwi->current_x / stations_list_nwi->resize_x;
+			this->vscroll2.SetCount(_railstation.station_count / col_count  + (_railstation.station_count % col_count > 0));
+
+			const uint old_col_count = GB(stations_list_nwi->widget_data, MAT_COL_START, MAT_COL_BITS);
+			stations_list_nwi->widget_data = (this->vscroll2.GetCapacity() << MAT_ROW_START) + (col_count << MAT_COL_START);
+
+			if (!this->vscroll2.IsVisible(_railstation.station_type / col_count)) {
+				/* Ensure that the currently selected type is visible */
+				if (old_capacity > capacity) {
+					/* Selected type was hidden by a vertical resize */
+					this->vscroll2.UpdatePosition(old_capacity - capacity);
+				} else if(old_col_count > col_count) {
+					/* Selected type was hidden by an horizontal resize */
+					this->vscroll2.UpdatePosition(_railstation.station_type - (capacity - 1) - this->vscroll2.GetPosition());
+				}
+			}
+		}
+	}
 };
 
+/*
+ * NOTE: A stacked widget that display no plane (SZSP_NONE) has {0, 0} as size and resize. To allow a proper centering of the
+ * widgets in the default gui, two spacers (BRSW_SHOW_DEFAULT_CENTER_ALIGN_{LEFT,RIGHT}) are inserted at the inner bounds
+ * of the NWID_HORIZONTAL container that contains them.
+ */
 static const NWidgetPart _nested_station_builder_widgets[] = {
 	NWidget(NWID_HORIZONTAL),
 		NWidget(WWT_CLOSEBOX, COLOUR_DARK_GREEN),
-		NWidget(WWT_CAPTION, COLOUR_DARK_GREEN), SetDataTip(STR_STATION_BUILD_RAIL_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS),
+		NWidget(WWT_CAPTION, COLOUR_DARK_GREEN), SetDataTip(STR_STATION_BUILD_RAIL_CAPTION, STR_TOOLTIP_WINDOW_TITLE_DRAG_THIS), SetResize(1, 0),
 	EndContainer(),
 	NWidget(WWT_PANEL, COLOUR_DARK_GREEN, BRSW_BACKGROUND),
-		/* begin newstations gui additions. */
-		NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_ADDITIONS),
+		NWidget(NWID_HORIZONTAL),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_DEFAULT_CENTER_ALIGN_LEFT), // default gui 'left spacer'
+				NWidget(NWID_SPACER), SetFill(1, 1), SetResize(1, 0),
+			EndContainer(),
 			NWidget(NWID_VERTICAL),
-				NWidget(WWT_DROPDOWN, COLOUR_GREY, BRSW_NEWST_DROPDOWN), SetMinimalSize(134, 12), SetFill(1, 0), SetPadding(3, 7, 3, 7), SetDataTip(STR_BLACK_STRING, STR_STATION_BUILD_STATION_CLASS_TOOLTIP),
-				NWidget(NWID_HORIZONTAL), SetPIP(7, 0, 7),
-					NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_LIST), SetMinimalSize(122, 71), SetFill(1, 0), SetDataTip(0x501, STR_STATION_BUILD_STATION_TYPE_TOOLTIP),
-					NWidget(WWT_SCROLLBAR, COLOUR_GREY, BRSW_NEWST_SCROLL),
+				NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_STATION_CLASSES), // newstations gui 'station classes selector'
+					NWidget(NWID_VERTICAL),
+						NWidget(NWID_SPACER), SetMinimalSize(0, 3), SetResize(1, 0),
+						NWidget(NWID_HORIZONTAL), SetPIP(7, 0, 7),
+							NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_STATION_CLASSES_LIST), SetMinimalSize(122, 14 * 5 + 1), SetDataTip(0x501, STR_STATION_BUILD_STATION_CLASS_TOOLTIP), SetResize(0, 14),
+							NWidget(WWT_SCROLLBAR, COLOUR_GREY, BRSW_NEWST_STATION_CLASSES_SCROLL),
+						EndContainer(),
+					EndContainer(),
 				EndContainer(),
-				NWidget(NWID_SPACER), SetMinimalSize(0, 1),
+				/* begin common widgets definition. */
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_ORIENTATION, STR_NULL), SetPadding(1, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+					NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_X), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_Y), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
+					NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_NUMBER_OF_TRACKS, STR_NULL), SetPadding(2, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_PLATFORM_LENGTH, STR_NULL), SetPadding(2, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
+					NWidget(NWID_SPACER), SetFill(1, 0),
+				EndContainer(),
+				NWidget(NWID_SPACER), SetMinimalSize(0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_DRAG_N_DROP), SetMinimalSize(75, 12), SetDataTip(STR_STATION_BUILD_DRAG_DROP, STR_STATION_BUILD_DRAG_DROP_TOOLTIP),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+				EndContainer(),
+				NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_COVERAGE_AREA_TITLE, STR_NULL), SetPadding(3, 2, 0, 2),
+				NWidget(NWID_HORIZONTAL),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_OFF), SetMinimalSize(60, 12),
+												SetDataTip(STR_STATION_BUILD_COVERAGE_OFF, STR_STATION_BUILD_COVERAGE_AREA_OFF_TOOLTIP),
+					NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_ON), SetMinimalSize(60, 12),
+												SetDataTip(STR_STATION_BUILD_COVERAGE_ON, STR_STATION_BUILD_COVERAGE_AREA_ON_TOOLTIP),
+					NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
+				EndContainer(),
+				/* end common widgets definition. */
 			EndContainer(),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_STATION_TYPES), // newstations gui 'station's type selector'
+				NWidget(NWID_VERTICAL),
+					NWidget(NWID_SPACER), SetMinimalSize(0, 3), SetResize(1, 0),
+					NWidget(NWID_HORIZONTAL),
+						NWidget(WWT_MATRIX, COLOUR_GREY, BRSW_NEWST_STATION_TYPES_LIST), SetMinimalSize(66, 14 * 4 * 4), SetDataTip(0x401, STR_NULL), SetResize(66, 14 * 4),
+						NWidget(WWT_SCROLL2BAR, COLOUR_GREY, BRSW_NEWST_STATION_TYPES_SCROLL),
+					EndContainer(),
+				EndContainer(),
+			EndContainer(),
+			NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_DEFAULT_CENTER_ALIGN_RIGHT), // default gui 'right spacer'
+				NWidget(NWID_SPACER), SetFill(1, 1), SetResize(1, 0),
+			EndContainer(),
 		EndContainer(),
-		/* end newstations gui additions. */
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_ORIENTATION, STR_NULL), SetPadding(1, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
-			NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_X), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_PANEL, COLOUR_GREY, BRSW_PLATFORM_DIR_Y), SetMinimalSize(66, 48), SetFill(0, 0), SetDataTip(0x0, STR_STATION_BUILD_RAILROAD_ORIENTATION_TOOLTIP), EndContainer(),
-			NWidget(NWID_SPACER), SetMinimalSize(7, 0), SetFill(1, 0),
+		NWidget(NWID_SPACER), SetMinimalSize(0, WD_PAR_VSEP_NORMAL), SetFill(1, 0), SetResize(1, 0),
+		NWidget(WWT_TEXT, COLOUR_DARK_GREEN, BRSW_STATION_COVERAGE), SetMinimalSize(1, 20), SetFill(1, 0), SetResize(1, 0),
+	EndContainer(),
+	NWidget(NWID_SELECTION, INVALID_COLOUR, BRSW_SHOW_NEWST_BOTTOM_BAR), // newstations gui 'bottom bar with resize button'
+ 		NWidget(NWID_HORIZONTAL),
+			NWidget(WWT_PANEL, COLOUR_DARK_GREEN), SetFill(1, 1), SetResize(1, 0), EndContainer(),
+			NWidget(WWT_RESIZEBOX, COLOUR_DARK_GREEN, BRSW_NEWST_RESIZE),
 		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_NUMBER_OF_TRACKS, STR_NULL), SetPadding(2, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_NUM_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_NUMBER_OF_TRACKS_TOOLTIP),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_PLATFORM_LENGTH, STR_NULL), SetPadding(2, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_1), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_1, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_2), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_2, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_3), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_3, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_4), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_4, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_5), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_5, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_6), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_6, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_LEN_7), SetMinimalSize(15, 12), SetDataTip(STR_BLACK_7, STR_STATION_BUILD_PLATFORM_LENGTH_TOOLTIP),
-			NWidget(NWID_SPACER), SetFill(1, 0),
-		EndContainer(),
-		NWidget(NWID_SPACER), SetMinimalSize(0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_PLATFORM_DRAG_N_DROP), SetMinimalSize(75, 12), SetDataTip(STR_STATION_BUILD_DRAG_DROP, STR_STATION_BUILD_DRAG_DROP_TOOLTIP),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-		EndContainer(),
-		NWidget(WWT_LABEL, COLOUR_DARK_GREEN), SetMinimalSize(144, 11), SetDataTip(STR_STATION_BUILD_COVERAGE_AREA_TITLE, STR_NULL), SetPadding(3, 2, 0, 2),
-		NWidget(NWID_HORIZONTAL),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_OFF), SetMinimalSize(60, 12),
-										SetDataTip(STR_STATION_BUILD_COVERAGE_OFF, STR_STATION_BUILD_COVERAGE_AREA_OFF_TOOLTIP),
-			NWidget(WWT_TEXTBTN, COLOUR_GREY, BRSW_HIGHLIGHT_ON), SetMinimalSize(60, 12),
-										SetDataTip(STR_STATION_BUILD_COVERAGE_ON, STR_STATION_BUILD_COVERAGE_AREA_ON_TOOLTIP),
-			NWidget(NWID_SPACER), SetMinimalSize(2, 0), SetFill(1, 0),
-		EndContainer(),
-		NWidget(NWID_SPACER), SetMinimalSize(0, 20), SetResize(0, 1),
 	EndContainer(),
 };
 
@@ -1448,8 +1733,7 @@
 /** Open station build window */
 static void ShowStationBuilder(Window *parent)
 {
-	bool newstations = GetNumStationClasses() > 2 || GetNumCustomStations(STAT_CLASS_DFLT) != 1;
-	new BuildRailStationWindow(&_station_builder_desc, parent, newstations);
+	new BuildRailStationWindow(&_station_builder_desc, parent);
 }
 
 /** Enum referring to the widgets of the signal window */
Index: src/saveload/afterload.cpp
===================================================================
--- src/saveload/afterload.cpp	(revision 19525)
+++ src/saveload/afterload.cpp	(working copy)
@@ -2132,6 +2132,8 @@
 	SetCachedEngineCounts();
 	/* update station graphics */
 	AfterLoadStations();
+	/* update build rail station window */
+	InvalidateWindowData(WC_BUILD_STATION, TRANSPORT_RAIL);
 	/* Check and update house and town values */
 	UpdateHousesAndTowns();
 	/* Update livery selection windows */
